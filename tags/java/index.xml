<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Java on (๑•̀ㅂ•́) ✧ 罗泽勋</title>
    <link>/tags/java/</link>
    <description>Recent content in Java on (๑•̀ㅂ•́) ✧ 罗泽勋</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Fri, 28 May 2021 10:36:40 +0800</lastBuildDate>
    <atom:link href="/tags/java/" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>【规约】 Java 编程篇</title>
      <link>/post/javacodingguidelines/</link>
      <pubDate>Fri, 28 May 2021 10:36:40 +0800</pubDate>
      
      <guid>/post/javacodingguidelines/</guid>
      <description>
        <![CDATA[
        <h3 id="前言">前言</h3>
<p>“码出高效，码出质量”。本文整理了比较常见的 Java 编程规范，主要来源于《阿里巴巴 Java 开发手册》。</p>
<h3 id="一命名风格">（一）命名风格</h3>
<p>1.【强制】类名使用 UpperCamelCase风格，但以下情形例外：DO  /  BO  /  DTO  /  VO  /  AO  /  PO  /  UID等。
正例：MarcoPolo  /  UserDO  /  XmlService  /  TcpUdpDeal  /TaPromotion</p>
<p>2.【强制】方法名、参数名、成员变量、局部变量都统一使用 lowerCamelCase 风格，必须遵从驼峰形式。<br>
正例：localValue  /  getHttpMessage()  /  inputUserId</p>
<p>3.【强制】常量命名全部大写，单词间用下划线隔开，力求语义表达完整清楚，不要嫌名字长。<br>
正例：MAX_STOCK_COUNT</p>
<p>4.【强制】抽象类命名使用 Abstract 或 Base 开头；异常类命名使用 Exception 结尾；测试类命名以它要测试的类的名称开始，以 Test 结尾。</p>
<p>5.【强制】类型与中括号紧挨起来表示数组。<br>
正例：int[] arrayDemo;</p>
<p>6.【强制】POJO 类中布尔类型的变量，都不要加 is 前缀。</p>
<p>7.【强制】包名统一使用小写，点分隔符之间有且只有一个自然语义的英语单词。包名统一使用单数形式，但是类名如果有复数含义，类名可以使用复数形式。<br>
正例：应用工具类包名为 com.alibaba.ai.util、类名为 MessageUtils。</p>
<p>8.【强制】杜绝完全不规范的缩写，任何自定义编程元素在命名时，使用尽量完整的单词组合来表达其意。</p>
<p>9.【推荐】如果模块、接口、类、方法使用了设计模式，在命名时需体系那具体模式。</p>
<p>10.【推荐】接口类的方法和属性不要加任何修饰符号（public 也不要加），保持代码整洁，并加上有效的 Javadoc 注释。</p>
<p>11.【强制】对于 Service 和 DAO 类，基于 SOA 的理念，暴露出来的一定时接口，内部的实现类用 Impl 的后缀与接口区别。<br>
正例：CacheServiceImpl 实现 CacheService。</p>
<p>12.【参考】各层命名规约：
A）Service/DAO 层方法命名规约<br>
1）获取单个对象的方法用 get 做前缀。<br>
2）获取多个对象的方法用 list 做前缀，复数形式结尾如： listObjects。<br>
3）获取统计值的方法用 count 做前缀。<br>
4）插入的方法用 save/insert 做前缀<br>
5）删除的方法用 remove/delete 做前缀<br>
6）修改的方法用 update 做前缀<br>
B）领域模型命名规约<br>
1）数据对象：xxxDO，xxx 即为数据表名。<br>
2）数据传输对象：xxxDTO，xxx 为业务领域相关的名称。<br>
3）展示对象：xxxVO，xxx 一般为网页名称。<br>
4) POJO 是 DO/DTO/BO/VO 的统称，禁止命名为 xxxPOJO。</p>
<p>13.【强制】不允许任何魔法值（即未经预先i当以的常量）出现在代码中。<br>
反例：String key = &ldquo;ID#taobao_&rdquo; + tradeId;</p>
<p>14.【强制】代码格式，具体见下面正例。
正例：</p>
<pre tabindex="0"><code>    public static void main(String[] args) {
        // 缩进4个空格，注释内空1格
        String say = &quot;hello&quot;;
        // 运算符左右必须有一个空格
        int flag = 0;
        // 关键词 if 与括号之间必须有一个空格
        if (flag == 0) {
            System.out.println(say);
        }

        // 左大括号前加空格且不换行，左大括号后换行。
        if (flag == 0) {
            System.out.println(&quot;world&quot;);
        //  右大括号前换行，右大括号后有 else，不用换行、
        }
        else {
            System.out.printLn(&quot;ok&quot;);
        }
    }</code></pre>
        
        ]]>
      </description>
    </item>
    
    
    
    <item>
      <title>[做点有趣的]Java开发泡泡堂游戏（MVC架构）</title>
      <link>/post/paopaotang/</link>
      <pubDate>Sat, 08 May 2021 11:09:51 +0800</pubDate>
      
      <guid>/post/paopaotang/</guid>
      <description>
        <![CDATA[
        <h3 id="介绍">介绍</h3>
<p>本项目是一个很久以前的实训周项目，当时花费了两天左右时间，由我和我的组员 ljr 共同实现。整个项目思路清晰，整体难度不大，但是很多细节需要花功夫。本项目仍存在一些不足的地方，后续可能会进行优化，现在我将项目源代码和一些实现思路开源公布。</p>
<p>源代码：<a href="https://gitee.com/lzxqaq/CrazyArcade">https://gitee.com/lzxqaq/CrazyArcade</a></p>
<p>文章介绍：<a href="https://lzxqaq.com/post/java/paopaotang/">https://lzxqaq.com/post/java/paopaotang/</a></p>
<p>程序运行： 在终端下进入执行程序所在目录，执行 <code>java -jar CrazyArcade.jar</code> 或者双击 <code>CrazyArcade.jar</code>，或者在开发环境中打开源代码，运行 <code>GameStart.java</code>的 <code>main</code> 方法。</p>
<p>运行环境：Linux、Windows均可。开发环境：IDEA。</p>
<p>演示视频：</p>
<p>运行截图：</p>
<div  align="center">    
 <img src="https://cdn.jsdelivr.net/gh/lzxqaq/CrazyArcade@master/images/CrazyArcade.png" width = "500" height = "200" alt="图片1" align=center />
 <br/>
  <img src="https://cdn.jsdelivr.net/gh/lzxqaq/CrazyArcade/images/2.png" width = "500" height = "200" alt="图片2" align=center />
 </div>
<h3 id="功能">功能</h3>
<p>本项目实现的功能如下：</p>
<ul>
<li>绘制游戏启动界面、结束界面、地图、主角、道具</li>
<li>实现泡泡爆炸</li>
<li>实现双主角PK（积分制）</li>
<li>实现道具掉落和相应属性加成</li>
<li>实现游戏音效和背景音乐</li>
</ul>
<p>其中我们对游戏玩法做了调整，大致如下:</p>
<p>我们把游戏设计为双人pk积分赛模式，在这个模式里面，玩家只要率先达到一定分数既可以赢得比赛。玩家可以通过炸箱子可以得到少量的分数，也可以通过炸掉对手然后戳破包围对手的水泡得到大量分数。而玩家如果被泡泡爆炸击中，会被泡泡包裹一段时间，在这段时间内不可以移动和放泡泡，需要等时间过去或者被对手戳破水泡才能获得自由。但如果玩家被自己放的泡泡炸中，会扣一定的分数。</p>
<h3 id="思路和架构">思路和架构</h3>
<p>整个项目采用 MVC 架构，将项目整体分为数据模型层（M）、视图层（V）、控制层（C）。M层负责元素的创建、存储、管理，V层负责所有元素的显示（24帧/秒），C层负责交互（监听用户的操作），同时负责控制游戏的进程。</p>
<p>选择MVC架构最主要的原因是让这个游戏项目具有良好的可扩展性和更新功能，当然了，一个好的游戏也需要良好的交互功能，漂亮的UI设计。</p>
<p>架构设计图：</p>
<div  align="center">    
 <img src="https://cdn.jsdelivr.net/gh/lzxqaq/CrazyArcade@master/images/design.png" width = "500" height = "200" alt="图片名称" align=center /></div>
<h3 id="包结构">包结构</h3>
<p>未完待续……</p>
<h3 id="核心实现">核心实现</h3>
<p>未完待续……</p>
<h3 id="后续">后续</h3>
<p>该项目仍有许多不足之处，如果你对该项目有任何意见或建议，欢迎<a href="https://lzxqaq.com/about/">联系我</a>。如有任何问题，亦可与我一同探讨。</p>

        
        ]]>
      </description>
    </item>
    
    
    
    <item>
      <title>String 类真的不可以改变吗？</title>
      <link>/post/2020-12-15-2/</link>
      <pubDate>Tue, 15 Dec 2020 15:05:27 +0800</pubDate>
      <author>罗泽勋</author>
      <guid>/post/2020-12-15-2/</guid>
      <description>
        <![CDATA[
        <p>对于 java.lang.String 类，我相信很多人印象里都是它不能被改变。通过查看源码，可以知道 String 有一个 final char 数组的变量，这个变量初始化之后便不能重新赋值。虽然这个变量引用的 char 数组的值虽然可以改变，但是String 类中并没有主动修改 这个 char 数组的方法。这就是通常所说 String 类不可变的依据。</p>
<p>然而在学习反射的时候，我产生了一个疑问：我们不可以通过反射修改 String 内部的 char 数组的值吗？答案是可以的，了解 Java 反射的人很容易就做到这点。那为什么还说 String 不可变呢？在思考过后，我得出一个答案：String 的不可变说的是一种约束规范。换句话说，String 的不可变是有好处的。在实际工作中，代码是自己写来用的，没有人会费劲给自己找麻烦，而没有任何益处。</p>
<p>事情到这里就完了？不，最近我再去了解 String 、String Pool（字符串常量池）的时候，又有了一些疑惑，于是亲手操刀给String 来了一次手术。最后也是加深了对 String 的理解，也验证了上面的观点。先上代码（如果你对任一实验结果感到疑惑，没关系，请带着疑惑来看后面的对照实验）：</p>
<pre tabindex="0"><code>    //实验1
    String s1 = &quot;1&quot;;
    Field valueField = String.class.getDeclaredField(&quot;value&quot;);
    valueField.setAccessible(true);
    char[] value = (char[]) valueField.get(s1);
    value[0] = '2';
    System.out.println(s1);                 //2
    System.out.println((s1 == &quot;1&quot;));        //true
</code></pre><p>上述实验 1 做的事情就是：用 <code>s1 = &quot;1&quot; </code> 的方式创建字符串，用反射修改它的值为 <code>&quot;2&quot;</code>,最后用它与 <code>&quot;1&quot;</code> 比较，结果是 <code>true</code> 。琢磨琢磨，再看下一段代码：</p>
<pre tabindex="0"><code>    //实验2
    String s2 = new String(&quot;1&quot;);
    Field valueField = String.class.getDeclaredField(&quot;value&quot;);
    valueField.setAccessible(true);
    char[] value2 = (char[]) valueField.get(s2);
    value2[0] = '2';
    System.out.println(s2);                //2
    System.out.println((s2 == &quot;1&quot;));       //false
</code></pre><p>上述实验 2 和实验 1 唯一的区别是字符串创建方式，实验2是通过 <code>new String(&quot;1&quot;)</code> 方式创建，实验1是通过 <code>= &quot;1&quot;</code> 的方式创建。而实验2的结果： <code>s2 == &quot;1&quot;</code> 是 <code>false</code> 。</p>
<p>到这里，可以停一会了。很多技术文章中都做过类似上面的实验（通过比较创建方式的区别、反射修改等)，来分析 String 、String Pool 的原理和设计理念。但我总觉得以此说明最终的结论还不够严谨、或者说还不够直观。接下来请看——魔鬼实验：</p>
<pre tabindex="0"><code>    //实验3 
    String s1 = &quot;1&quot;;
    Field valueField = String.class.getDeclaredField(&quot;value&quot;);
    valueField.setAccessible(true);
    char[] value = (char[]) valueField.get(s1);
    value[0] = '2';
    System.out.println(s1);                 //2
    System.out.println((s1 == &quot;1&quot;));        //true
    System.out.println(&quot;1&quot;);                //2
</code></pre><p>不难发现，实验3仅仅只是在实验1的基础上输出了 <code>&quot;1&quot;</code> 的值。然而 <code>&quot;1&quot;</code> 输出的值为 2，这样的结果，也许有人会困惑，没关系,看完几个对比实验，相信你会对相关理论（String 、String Pool 等）有了更直观的认识。接下来，请看终极实验：</p>
<pre tabindex="0"><code>    //实验4
    String s2 = new String(&quot;1&quot;);
    Field valueField = String.class.getDeclaredField(&quot;value&quot;);
    valueField.setAccessible(true);
    char[] value2 = (char[]) valueField.get(s2);
    value2[0] = '2';
    System.out.println(s2);                 //2
    System.out.println((s2 == &quot;1&quot;));        //false
    System.out.println(&quot;1&quot;);                //2
</code></pre><p>同样的，上述实验 4 只是在实验 2 的基础上输出了 <code>&quot;1&quot;</code> 的值。结果 <code>&quot;1&quot;</code> 的值还是 2。</p>
<p><strong>结论：</strong><br>
基于对 String 类和字符串常量池（String Pool） 的了解，我对以上实验作出解释（详细理论下回贴出）:</p>
<p>实验 3 中 字符串 <code>s1</code> 通过直接赋值字符串常量 <code>&quot;1&quot;</code> 的方式创建，因此 <strong><code>s1</code> 会直接引用字符串常量池中 <code>&quot;1&quot;</code> 对应的对象</strong>。对 <code>s1</code> 的修改，也就是对常量池中 <code>&quot;1&quot;</code> 对象的修改，因此 <code>s1</code> 和 <code>&quot;1&quot;</code> 的值都是修改后的 2，而 <code>s1 == &quot;1&quot;</code> 也是 <code>true</code>,因为它们是同一个对象的引用。</p>
<p>实验 4 中 字符串 <code>s2</code> 通过 <code>new String(&quot;1&quot;)</code>的方式创建，因此，<strong><code>s2</code> 会被新建在堆中，并且，<code>s2</code> 的 <code>char</code> 数组变量会直接引用字符串常量池中 &ldquo;1&quot;对象的 <code>char</code> 数组</strong>，也就是说虽然 <code>s2</code> 是新创建的对象，但是 <code>s2</code> 里存储字符的 <code>char</code> 数组是创建时传进来的字符串常量 <code>&quot;1&quot;</code> 的 <code>char</code> 数组。因此，<code>s2</code> 修改 <code>char</code> 数组,<code>&quot;1&quot;</code> 的也会变。<code>s2</code> 和 <code>&quot;1&quot;</code> 的值都是修改后的 2 。而 <code>s2 == &quot;1&quot;</code> 是 <code>false</code> 的，因为它们引用的不是同一个对象。</p>
<p>最终结论，String 类真的是“不可以”变的！因为这不仅仅是它的特点，更是它的设计初衷。（<del>任何想通过反射修改它的人都应该被拉去祭天</del>)</p>
<p>如果你发现任何问题，请<a href="/about">联系</a>我。</p>

        
        ]]>
      </description>
    </item>
    
    
  </channel>
</rss>
