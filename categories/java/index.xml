<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Java on (๑•̀ㅂ•́) ✧ 罗泽勋</title>
    <link>/categories/java/</link>
    <description>Recent content in Java on (๑•̀ㅂ•́) ✧ 罗泽勋</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Tue, 12 Jan 2021 08:46:08 +0800</lastBuildDate>
    <atom:link href="/categories/java/" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Java I/O</title>
      <link>/post/io/</link>
      <pubDate>Tue, 12 Jan 2021 08:46:08 +0800</pubDate>
      <author>罗泽勋</author>
      <guid>/post/io/</guid>
      <description>
        <![CDATA[
        <h3 id="一概览">一、概览</h3>
<p>Java 的 I/O 大概可以分成以下几类：</p>
<ul>
<li>磁盘操作：File</li>
<li>字节操作：InputStream 和 OutputStream</li>
<li>对象操作：Serializable</li>
<li>网络操作：Socket</li>
<li>新的输入/输出：NIO</li>
</ul>
<h3 id="二磁盘操作">二、磁盘操作</h3>
<p>File 类可以用于表示文件和目录的信息，但是它不表示文件的内容。
递归地列出一个目录的所有文件：</p>
<pre tabindex="0"><code>public static void listAllFiles(File dir){
    if(dir == null || !dir.exists()){
        return ;
    }
    if(dir.isFile()) {
        System.out.println(dir.getName());
        return ;
    }
    for (File:file : dir.listFiles()) {
        listAllFiles(file);
    }
}
</code></pre><p>从 Java 7 开始，可以使用 Paths 和 Files 代替 File。</p>
<h3 id="三字节操作">三、字节操作</h3>
<h4 id="实现文件复制">实现文件复制</h4>
<pre tabindex="0"><code>public static void copuFile(String src, String dist) throws IOException {
    FileInputStream in = new FileInputStream(src);
    FileOutputStream out = new FileOutStream(dist);

    byte[] buffer = new byte[20 * 1024];
    int cnt;
    // read() 最多读 buffer.length 个字节
    // 返回的是实际读取的个数
    // 返回 -1 的时候表示读到 eof,即文件结尾
    while ((cnt = in.read(buffer, 0, buffer.length)) != -1) {
        out.write(buffer, 0, cnt);
    }

    in.close();
    out.close();
}
</code></pre><h4 id="装饰者模式">装饰者模式</h4>
<p>Java I/O 使用了装饰者模式来实现。</p>
<p>实例化一个具有缓存功能的字节流对象时，只需要在 FileInputStream 对象上再套一层 BufferedInputStream 对象即可。</p>
<h3 id="七nio">七、NIO</h3>
<p>新的输入/输出（NIO）库是在 JDK1.4中引入的，弥补了原来的 I/O 的不足，提供了高速的、面向块的 I/O。</p>

        
        ]]>
      </description>
    </item>
    
    
    
    <item>
      <title>Java 并发</title>
      <link>/post/concurrent/</link>
      <pubDate>Sat, 09 Jan 2021 10:50:16 +0800</pubDate>
      <author>罗泽勋</author>
      <guid>/post/concurrent/</guid>
      <description>
        <![CDATA[
        <h3 id="一使用线程">一、使用线程</h3>
<p>有三种使用线程的方法：</p>
<ul>
<li>实现 Runnable 接口；</li>
<li>实现 Callable接口；</li>
<li>继承 Tread 类；</li>
</ul>
<h4 id="实现-runnable-接口">实现 Runnable 接口</h4>
<p>需要实现接口中的 run() 方法。</p>
<pre tabindex="0"><code>public class MyRunnable implements Runnable {
    @Override
    public void run(){
        // ...
    }
}
</code></pre><p>使用 Runnable 实例再创建一个 Thread 实例，然后调用 Thread 实例的 start() 方法来启动线程。</p>
<pre tabindex="0"><code>public static void main(String[] args){
    MyRunnable instance = new MyRunnable();
    Thread thread = new Thread(instance);
    thread.start();
}
</code></pre><h4 id="实现-callable-接口">实现 Callable 接口</h4>
<p>与 Runnable 相比，Callable 可以有返回值，返回值通过 FutureTask 进行封装。</p>
<pre tabindex="0"><code>public class MyCallable implements Callable&lt;Integer&gt; {
    public Integer call(){
        return 123;
    }
}
</code></pre><pre tabindex="0"><code>public static void main(String[] args) throws ExecutionException,InterruptedException {
    MyCallable mc = new MyCallble();
    FutureTask&lt;Integer&gt; ft = new FutureTask&lt;&gt;(mc);
    Thread thread = new Thread(ft);
    thread.start();
    System.out.println(ft.get());
}
</code></pre><h3 id="继承-thread-类">继承 Thread 类</h3>
<p>同样也是需要实现 run() 方法，因为 Thread 类也实现了 Runnable 接口。</p>
<p>当调用 start() 方法启动一个线程时，虚拟机会将该线程放入就绪队列中等待被调度，当一个线程被调度时会执行该线程的 run() 方法。</p>
<pre tabindex="0"><code>public class MyThread extends Thread {
    public void run() {
        // ...
    }
}
</code></pre><pre tabindex="0"><code>public static void main(String[] args) {
    MyThread mt = new MyThread();
    mt.start();
}
</code></pre><h3 id="实现接口-vs-继承-thread">实现接口 VS 继承 Thread</h3>
<p>实现接口会更好一些，因为：</p>
<ul>
<li>Java 不支持多重继承，可以实现多个接口。</li>
<li>继承整个 Thread 类开销过大。</li>
</ul>
<h3 id="四互斥同步">四、互斥同步</h3>
<p>Java 提供了两种锁机制来控制多个线程对共享资源的互斥访问，第一个是 JVM 实现的 synchronized，而另一个是 JDK 实现的 ReentrantLock。</p>
<h4 id="synchronized">synchronized</h4>
<h5 id="1同步一个代码块">1.同步一个代码块</h5>
<pre tabindex="0"><code>public void func() {
    synchronized (this) {
        // ...
    }
}
</code></pre><p>它只作用于同一个对象，如果调用两个对象上的同步代码块，就不会进行同步。</p>
<p>对于以下代码，使用 ExecutorService 执行了两个线程，由于调用的是同一个对象的同步代码块，因此这两个线程会进行同步，当一个线程进入同步语句块时，另一个线程就必须等待。</p>
<pre tabindex="0"><code>public class SynchronizedExample {

    public void func1() {
        synchronized (this) {
            for (int i = 0; i &lt; 10; i++) {
                System.out.print(i + &quot; &quot;);
            }
        }
    }
}
</code></pre><pre tabindex="0"><code>public static void main(String[] args) {
    SynchronizedExample e1 = new SynchronizedExample();
    ExecutorService executorService = Executors.newCachedThreadPool();
    executorService.execute(() -&gt; e1.func1());
    executorService.execute(() -&gt; e1.func1());
}
</code></pre><pre tabindex="0"><code>0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9
</code></pre><p>对于以下代码，两个线程调用了不同对象的同步代码块，因此这两个线程就不需要同步。从输出结果可以看出，两个线程交叉执行。</p>
<pre tabindex="0"><code>public static void main(String[] args) {
    SynchronizedExample e1 = new SynchronizedExample();
    SynchronizedExample e2 = new SynchronizedExample();
    ExecutorService executorService = Executors.newCachedThreadPool();
    executorService.execute(() -&gt; e1.func1());
    executorService.execute(() -&gt; e2.func1());
}
</code></pre><pre tabindex="0"><code>0 0 1 1 2 2 3 3 4 4 5 5 6 6 7 7 8 8 9 9
</code></pre><h5 id="2同步一个方法">2.同步一个方法</h5>
<pre tabindex="0"><code>public synchronized void func() {
    // ...
}
</code></pre><p>它和同步代码块一样，作用于同一个对象</p>
<h5 id="3同步一个类">3.同步一个类</h5>
<pre tabindex="0"><code>public void func() {
    synchronized (SynchronizedExample.class) {
        // ...
    }
}
</code></pre><p>作用于整个类，也就是说两个线程调用同一个类的不同对象上的这种同步语句块，也会进行同步。</p>
<pre tabindex="0"><code>public class SynchronizedExample {

    public void func2() {
        synchronized (SynchronizedExample.class) {
            for (int i = 0; i &lt; 10; i++) {
                System.out.print(i + &quot; &quot;);
            }
        }
    }
}
</code></pre><pre tabindex="0"><code>public static void main(String[] args) {
    SynchronizedExample e1 = new SynchronizedExample();
    SynchronizedExample e2 = new SynchronizedExample();
    ExecutorService executorService = Executors.newCachedThreadPool();
    executorService.execute(() -&gt; e1.func2());
    executorService.execute(() -&gt; e2.func2());
}
</code></pre><pre tabindex="0"><code>0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9
</code></pre><h5 id="4同步一个静态方法">4.同步一个静态方法</h5>
<pre tabindex="0"><code>public synchronized static void fun() {
    // ...
}
</code></pre><p>作用于整个类。</p>
<h4 id="reentrantlock">ReentrantLock</h4>
<p>ReentrantLock 是 java.util.concurrent（J.U.C)包中的锁。</p>
<pre tabindex="0"><code>public class LockExample {

    private Lock lock = new ReentrantLock();

    public void func() {
        lock.lock();
        try {
            for (int i = 0; i &lt; 10; i++) {
                System.out.print(i + &quot; &quot;);
            }
        } finally {
            lock.unlock(); // 确保释放锁，从而避免发生死锁。
        }
    }
}

</code></pre><pre tabindex="0"><code>public static void main(String[] args) {
    LockExample lockExample = new LockExample();
    ExecutorService executorService = Executors.newCachedThreadPool();
    executorService.execute(() -&gt; lockExample.func());
    executorService.execute(() -&gt; lockExample.func());
}
</code></pre><pre tabindex="0"><code>0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9
</code></pre><h5 id="使用选择">使用选择</h5>
<p>除非需要使用 ReentrantLock 的高级功能，否则优先使用 synchronized。这是因为 synchronized 是 JVM 实现的一种锁机制，JVM 原生地支持它，而 ReentrantLock 不是所有的 JDK 版本都支持。并且使用 synchronized 不用担心没有释放锁而导致死锁问题，因为 JVM 会确保锁的释放。</p>
<h3 id="六线程状态">六、线程状态</h3>
<h4 id="新建">新建</h4>
<h4 id="可运行">可运行</h4>
<h4 id="阻塞">阻塞</h4>
<h4 id="无限期等待">无限期等待</h4>
<h4 id="死亡">死亡</h4>

        
        ]]>
      </description>
    </item>
    
    
    
    <item>
      <title>Java 虚拟机</title>
      <link>/post/jvm/</link>
      <pubDate>Fri, 25 Dec 2020 15:06:19 +0800</pubDate>
      <author>罗泽勋</author>
      <guid>/post/jvm/</guid>
      <description>
        <![CDATA[
        <p>参考自 <a href="https://github.com/CyC2018/CS-Notes/blob/master/notes/Java%20%E8%99%9A%E6%8B%9F%E6%9C%BA.md">CyC2018/CS-Notes</a></p>
<ul>
<li><a href="#1">一、运行时数据区域</a>
<ul>
<li><a href="#1.1">程序计数器</a></li>
<li><a href="#1.2">Java 虚拟机栈</a></li>
<li><a href="#1.3">本地方法栈</a></li>
<li><a href="#1.4">堆</a></li>
<li><a href="#1.5">方法区</a></li>
<li><a href="#1.6">运行时常量池</a></li>
<li><a href="#1.7">直接内存</a></li>
</ul>
</li>
<li><a href="#2">二、垃圾收集</a>
<ul>
<li><a href="#2.1">判断一个对象是否可被回收</a></li>
<li><a href="#2.2">引用类型</a></li>
<li><a href="#2.3">垃圾收集算法</a></li>
<li><a href="#2.4">垃圾收集器</a></li>
</ul>
</li>
<li><a href="#3">三、内存分配和回收策略</a>
<ul>
<li><a href="#3.1">Minor Gc 和 Full Gc</a></li>
<li><a href="#3.2">内存分配策略</a></li>
<li><a href="#3.3">Full GC 的触发条件</a></li>
</ul>
</li>
<li><a href="#4">四、类加载机制</a>
<ul>
<li><a href="#4.1">类的生命周期</a></li>
<li><a href="#4.2">类加载过程</a></li>
<li><a href="#4.3">类初始化时机</a></li>
<li><a href="#4.4">类与类加载器</a></li>
<li><a href="#4.5">类加载器分类</a></li>
<li><a href="#4.6">双亲委派模型</a></li>
<li><a href="#4.7">自定义类加载器实现</a></li>
</ul>
</li>
</ul>
<h3 id="一运行时数据区域-a-name1a">一、运行时数据区域 <a name="1"></a></h3>
<h4 id="程序计数器-a-name11a">程序计数器 <a name="1.1"></a></h4>
<p>记录正在执行的虚拟机字节码指令的地址（如果正在执行的是本地方法则为空）。</p>
<h4 id="java-虚拟机栈-a-name12a">Java 虚拟机栈 <a name="1.2"></a></h4>
<p>每个 Java方法在执行的同时会创建一个栈帧用于存储局部变量表、操作数栈、常量池引用等信息。从方法调用直至执行完成的过程，对应着一个栈帧在 Java 虚拟机栈中入栈和出栈的过程。</p>
<p>可以通过 -Xss 这个虚拟机参数来指定每个线程的 Java 虚拟机栈内存大小，在 JDK 1.4 中默认为 256K，而在 JDK1.5+ 默认为 1M：</p>
<pre tabindex="0"><code>java -Xss2M HaskTheJava
</code></pre><p>该区域可能抛出以下异常：</p>
<ul>
<li>当线程请求的栈深度超过最大值，会抛出 StackOverflowError 异常；</li>
<li>栈进行动态扩展的时如果无法申请到足够的内存，会抛出 OutofMemoryError 异常。</li>
</ul>
<h4 id="本地方法栈a-name13a">本地方法栈<a name="1.3"></a></h4>
<p>本地方法栈与 Java 虚拟机栈类似，他们之间的区别只不过是本地方法栈为本地方法服务。<br>
本地方法一般是用其他语言（C、C++或汇编语言等等）编写的，并且被编译为基于本机硬件和操作系统的程序，对待这些方法需要特别处理。</p>
<h4 id="堆-a-name14a">堆 <a name="1.4"></a></h4>
<p>所有对象都在这里分配内存，是垃圾收集的主要区域（&ldquo;GC堆&rdquo;）。<br>
现代的垃圾收集器基本都是采用分代收集算法，其主要的思想是针对不同类型的对象采用不同的垃圾回收算法。可以将堆分成两块：</p>
<ul>
<li>新生代</li>
<li>老年代</li>
</ul>
<p>堆不需要连续内存，并且可以动态增加其内存，增加失败会抛出 OutOfMemoryError 异常。</p>
<p>可以通过 -Xms 和 -Xmx 这两个虚拟机参数来指定一个程序的堆内存大小，第一个参数设置初始值，第二个参数设置最大值。</p>
<pre tabindex="0"><code>java -Xms1M -Xmx2M HackTheJava
</code></pre><h4 id="方法区a-name15a">方法区<a name="1.5"></a></h4>
<p>用于存放已被加载的类信息、常量、静态变量、即时编译器编译后的代码等数据。</p>
<p>和堆一样不需要连续的内存，并且可以动态扩展，动态扩展失败一样会抛出 OutOfMemoryError 异常。</p>
<p>对这块区域进行垃圾回收的主要目标是对常量池的回收和对类的卸载，但是一般比较难实现。</p>
<p>HotSpot 虚拟机把它当成永久代来进行垃圾回收。但很难确定永久代的大小，因为它受到很多因素影响，并且每次 Full GC 之后永久代的大小都会改变，所以经常会抛出 OutOfMemoryError 异常。为了更容易管理方法区，从 JDK 1.8 开始，移除永久代，并把方法区移至元空间，它位于本地内存，而不是虚拟机内存。<br>
方法区是一个 JVM 规范，永久代与元空间都是其一种实现方式。在 JDK 1.8 之后，原来永久代的数据被分到了堆和元空间中。元空间存储类的元信息，静态变量和常量池等放入堆中。</p>
<h4 id="运行时常量池a-name16a">运行时常量池<a name="1.6"></a></h4>
<p>运行时常量池是方法区的一部分。</p>
<p>Class 文件中的常量池（编译器生成的字面量和符号引用）会在类加载后被放入这个区域。</p>
<p>除了在编译期生成的常量，还允许动态生成，例如 String 类的 intern()。</p>
<h4 id="直接内存a-name17a">直接内存<a name="1.7"></a></h4>
<p>在 JDK 1.4 中新引入了 NIO 类，它可以使用 Native 函数库直接分配堆外内存。</p>
<h3 id="二垃圾回收a-name2a">二、垃圾回收<a name="2"></a></h3>
<p>垃圾收集主要是针对堆和方法区进行。程序计数器、虚拟机栈和本地方法栈这三个区域属于线程私有的，只存在于线程的生命周期，线程结束之后就会消失，因此不需要对这三个区域进行垃圾回收。</p>
<h4 id="判断一个对象是否可被回收a-name21a">判断一个对象是否可被回收<a name="2.1"></a></h4>
<h5 id="1引用技术算法">1.引用技术算法</h5>
<p>（相互引用时，两个对象都无法被回收）</p>
<h5 id="2可达性分析">2.可达性分析</h5>
<p>以 GC Roots为起始点进行搜索，可达的对象都是存活的，不可达的对象可被回收。
Java 虚拟机使用该算法来判断对象是否可被回收，GC Roots 一般包含以下内容：</p>
<ul>
<li>虚拟机栈中局部变量表中引用的对象</li>
<li>本地方法栈 JNI 中引用的对象</li>
<li>方法区中类静态属性引用的对象</li>
<li>方法区中的常量引用的对象</li>
</ul>
<h5 id="3方法区的回收">3.方法区的回收</h5>
<p>因为方法区主要存放永久代对象，而永久代对象的回收率比新生代低很多，所有在方法区上进行回收性价比不高。</p>
<p>主要是对常量池的回收和对类的卸载。</p>
<h5 id="4finalize">4.finalize()</h5>
<p>类似 C++ 的析构函数，用于关闭外部资源。最好别用，用try-finally等。</p>
<h4 id="引用类型a-name22a">引用类型<a name="2.2"></a></h4>
<h5 id="1强引用">1.强引用</h5>
<p>被强引用关联的对象不会被回收。</p>
<p>使用 new 一个新对象来创建强引用。</p>
<h5 id="2软引用">2.软引用</h5>
<h5 id="3弱引用">3.弱引用</h5>
<h5 id="4虚引用">4.虚引用</h5>
<h4 id="垃圾收集算法a-name23a">垃圾收集算法<a name="2.3"></a></h4>
<h5 id="1标记-清除">1.标记-清除</h5>
<h5 id="2标记-整理">2.标记-整理</h5>
<h5 id="3复制">3.复制</h5>
<h5 id="4分代收集">4.分代收集</h5>
<p>根据对象存活周期将内存划分为几块，不痛块采用适当的收集算法。</p>
<p>一般将堆分为新生代和老生代。</p>
<ul>
<li>新生代使用：复制算法</li>
<li>老生代使用：标记-清除 或者 标记-整理 算法</li>
</ul>
<h3 id="四类加载机制a-name4a">四、类加载机制<a name="4"></a></h3>
<p>类是在运行期间第一次使用时动态加载的，而不是一次性加载所有类。因为如果一次性加载，那么会占用很多的内存。</p>
<h4 id="类的生命周期a-name41a">类的生命周期<a name="4.1"></a></h4>
<p>包括以下阶段：</p>
<ul>
<li>加载</li>
<li>验证</li>
<li>准备</li>
<li>解析</li>
<li>初始化</li>
<li>使用</li>
<li>卸载</li>
</ul>

        
        ]]>
      </description>
    </item>
    
    
    
    <item>
      <title>Java 容器</title>
      <link>/post/collection/</link>
      <pubDate>Thu, 24 Dec 2020 16:47:24 +0800</pubDate>
      <author>罗泽勋</author>
      <guid>/post/collection/</guid>
      <description>
        <![CDATA[
        <p>参考自 <a href="https://github.com/CyC2018/CS-Notes/blob/master/notes/Java%20%E5%AE%B9%E5%99%A8.md">CyC2018/CS-Notes</a></p>
<ul>
<li><a href="#1">一、概览</a>
<ul>
<li><a href="#1.1">Collection</a></li>
<li><a href="#1.2">Map</a></li>
</ul>
</li>
</ul>
<!-- * [二、容器中的设计模式]
    * [迭代器模式](#2.1)
    * [适配器模式](#2.2)
* [三、源码分析](#3)
    * [ArrayList](#3.1)
    * [Vector](#3.2)
    * [CopyOnWriteArrayList](#3.3)
    * [LinkedList](#3.4)
    * [HashMap](#3.5)
    * [ConcurrentHashMap](#3.6)
    * [LinkedHashMap](#3.7)
    * [WeakHashMap](#3.8) -->
<h3 id="一概览-a-name1a">一、概览 <a name="1"></a></h3>
<p>容器主要包括 Collection 和 Map 两种，Collection 存储着对象的集合，而 Map存储着键值对（两个对象）的映射表。</p>
<h4 id="collection-a-name11a">Collection <a name="1.1"></a></h4>
<p><strong>1.Set</strong></p>
<ul>
<li>TreeSet: 基于红黑树实现，支持有序性操作，例如根据一个范围查找元素的操作。但是查找效率不如 HashSet, HashSet 查找的时间复杂度为 O(1)，TreeSet 则为 O(logN)。</li>
<li>HashSet: 基于哈希表的实现，支持快速查找，但不支持有序性操作。并且失去了元素的插入顺序信息，也就是说使用 Iterator 遍历 HashSet 得到的结果是不确定的。</li>
<li>LinkedHashSet: 具有 HashSet 的查找效率，并且内部使用双向链表维护元素的插入顺序。</li>
</ul>
<p><strong>2.List</strong></p>
<ul>
<li>ArrayList： 基于动态数组实现，支持随机访问。</li>
<li>Vector： 和 ArrayList 类似，但它是线程安全的。</li>
<li>LinkedList： 基于双向链表实现，只能顺序访问，但是可以快速地在链表中间插入和删除元素。不仅如此，LinkedList 还可以用做栈、队列和双向队列。</li>
</ul>
<p><strong>3.Queue</strong></p>
<ul>
<li>LinkedList：可以用它来实现双向队列。</li>
<li>PriorityQueue：基于堆结构实现，可以用它来实现优先队列。</li>
</ul>
<h4 id="map-a-name12a">Map <a name="1.2"></a></h4>
<ul>
<li>TreeMap：基于红黑树实现</li>
<li>HashMap：基于哈希表实现</li>
<li>hashTable：和 HashMap 类似，但它是线程安全的，这意味着同一时刻多个线程同时写入 HashTable 不会导致数据不一致。它是遗留类，不应该去使用它，而是使用 ConcurrentHashMap 来支持线程安全，ConcurrentHashMap 的效率会更高，因为 ConcurrentHashMap 引入了分段锁。</li>
<li>LinkedHashMap：使用双向链表来维护元素的顺序，顺序为插入顺序或者最近最少使用（LRU）顺序。</li>
</ul>

        
        ]]>
      </description>
    </item>
    
    
    
    <item>
      <title>String 类真的不可以改变吗？</title>
      <link>/post/2020-12-15-2/</link>
      <pubDate>Tue, 15 Dec 2020 15:05:27 +0800</pubDate>
      <author>罗泽勋</author>
      <guid>/post/2020-12-15-2/</guid>
      <description>
        <![CDATA[
        <p>对于 java.lang.String 类，我相信很多人印象里都是它不能被改变。通过查看源码，可以知道 String 有一个 final char 数组的变量，这个变量初始化之后便不能重新赋值。虽然这个变量引用的 char 数组的值虽然可以改变，但是String 类中并没有主动修改 这个 char 数组的方法。这就是通常所说 String 类不可变的依据。</p>
<p>然而在学习反射的时候，我产生了一个疑问：我们不可以通过反射修改 String 内部的 char 数组的值吗？答案是可以的，了解 Java 反射的人很容易就做到这点。那为什么还说 String 不可变呢？在思考过后，我得出一个答案：String 的不可变说的是一种约束规范。换句话说，String 的不可变是有好处的。在实际工作中，代码是自己写来用的，没有人会费劲给自己找麻烦，而没有任何益处。</p>
<p>事情到这里就完了？不，最近我再去了解 String 、String Pool（字符串常量池）的时候，又有了一些疑惑，于是亲手操刀给String 来了一次手术。最后也是加深了对 String 的理解，也验证了上面的观点。先上代码（如果你对任一实验结果感到疑惑，没关系，请带着疑惑来看后面的对照实验）：</p>
<pre tabindex="0"><code>    //实验1
    String s1 = &quot;1&quot;;
    Field valueField = String.class.getDeclaredField(&quot;value&quot;);
    valueField.setAccessible(true);
    char[] value = (char[]) valueField.get(s1);
    value[0] = '2';
    System.out.println(s1);                 //2
    System.out.println((s1 == &quot;1&quot;));        //true
</code></pre><p>上述实验 1 做的事情就是：用 <code>s1 = &quot;1&quot; </code> 的方式创建字符串，用反射修改它的值为 <code>&quot;2&quot;</code>,最后用它与 <code>&quot;1&quot;</code> 比较，结果是 <code>true</code> 。琢磨琢磨，再看下一段代码：</p>
<pre tabindex="0"><code>    //实验2
    String s2 = new String(&quot;1&quot;);
    Field valueField = String.class.getDeclaredField(&quot;value&quot;);
    valueField.setAccessible(true);
    char[] value2 = (char[]) valueField.get(s2);
    value2[0] = '2';
    System.out.println(s2);                //2
    System.out.println((s2 == &quot;1&quot;));       //false
</code></pre><p>上述实验 2 和实验 1 唯一的区别是字符串创建方式，实验2是通过 <code>new String(&quot;1&quot;)</code> 方式创建，实验1是通过 <code>= &quot;1&quot;</code> 的方式创建。而实验2的结果： <code>s2 == &quot;1&quot;</code> 是 <code>false</code> 。</p>
<p>到这里，可以停一会了。很多技术文章中都做过类似上面的实验（通过比较创建方式的区别、反射修改等)，来分析 String 、String Pool 的原理和设计理念。但我总觉得以此说明最终的结论还不够严谨、或者说还不够直观。接下来请看——魔鬼实验：</p>
<pre tabindex="0"><code>    //实验3 
    String s1 = &quot;1&quot;;
    Field valueField = String.class.getDeclaredField(&quot;value&quot;);
    valueField.setAccessible(true);
    char[] value = (char[]) valueField.get(s1);
    value[0] = '2';
    System.out.println(s1);                 //2
    System.out.println((s1 == &quot;1&quot;));        //true
    System.out.println(&quot;1&quot;);                //2
</code></pre><p>不难发现，实验3仅仅只是在实验1的基础上输出了 <code>&quot;1&quot;</code> 的值。然而 <code>&quot;1&quot;</code> 输出的值为 2，这样的结果，也许有人会困惑，没关系,看完几个对比实验，相信你会对相关理论（String 、String Pool 等）有了更直观的认识。接下来，请看终极实验：</p>
<pre tabindex="0"><code>    //实验4
    String s2 = new String(&quot;1&quot;);
    Field valueField = String.class.getDeclaredField(&quot;value&quot;);
    valueField.setAccessible(true);
    char[] value2 = (char[]) valueField.get(s2);
    value2[0] = '2';
    System.out.println(s2);                 //2
    System.out.println((s2 == &quot;1&quot;));        //false
    System.out.println(&quot;1&quot;);                //2
</code></pre><p>同样的，上述实验 4 只是在实验 2 的基础上输出了 <code>&quot;1&quot;</code> 的值。结果 <code>&quot;1&quot;</code> 的值还是 2。</p>
<p><strong>结论：</strong><br>
基于对 String 类和字符串常量池（String Pool） 的了解，我对以上实验作出解释（详细理论下回贴出）:</p>
<p>实验 3 中 字符串 <code>s1</code> 通过直接赋值字符串常量 <code>&quot;1&quot;</code> 的方式创建，因此 <strong><code>s1</code> 会直接引用字符串常量池中 <code>&quot;1&quot;</code> 对应的对象</strong>。对 <code>s1</code> 的修改，也就是对常量池中 <code>&quot;1&quot;</code> 对象的修改，因此 <code>s1</code> 和 <code>&quot;1&quot;</code> 的值都是修改后的 2，而 <code>s1 == &quot;1&quot;</code> 也是 <code>true</code>,因为它们是同一个对象的引用。</p>
<p>实验 4 中 字符串 <code>s2</code> 通过 <code>new String(&quot;1&quot;)</code>的方式创建，因此，<strong><code>s2</code> 会被新建在堆中，并且，<code>s2</code> 的 <code>char</code> 数组变量会直接引用字符串常量池中 &ldquo;1&quot;对象的 <code>char</code> 数组</strong>，也就是说虽然 <code>s2</code> 是新创建的对象，但是 <code>s2</code> 里存储字符的 <code>char</code> 数组是创建时传进来的字符串常量 <code>&quot;1&quot;</code> 的 <code>char</code> 数组。因此，<code>s2</code> 修改 <code>char</code> 数组,<code>&quot;1&quot;</code> 的也会变。<code>s2</code> 和 <code>&quot;1&quot;</code> 的值都是修改后的 2 。而 <code>s2 == &quot;1&quot;</code> 是 <code>false</code> 的，因为它们引用的不是同一个对象。</p>
<p>最终结论，String 类真的是“不可以”变的！因为这不仅仅是它的特点，更是它的设计初衷。（<del>任何想通过反射修改它的人都应该被拉去祭天</del>)</p>
<p>如果你发现任何问题，请<a href="/about">联系</a>我。</p>

        
        ]]>
      </description>
    </item>
    
    
    
    <item>
      <title>Java 基础</title>
      <link>/post/base/</link>
      <pubDate>Tue, 15 Dec 2020 08:32:26 +0800</pubDate>
      <author>罗泽勋</author>
      <guid>/post/base/</guid>
      <description>
        <![CDATA[
        <p>参考自 <a href="https://github.com/CyC2018/CS-Notes/blob/master/notes/Java%20%E5%9F%BA%E7%A1%80.md">CyC2018/CS-Notes</a></p>
<ul>
<li><a href="#1">一、数据类型</a>
<ul>
<li><a href="#1.1">基本类型</a></li>
<li><a href="#1.2">包装类型</a></li>
<li><a href="#1.3">缓存池</a></li>
</ul>
</li>
<li><a href="#2">二、String</a>
<ul>
<li><a href="#2.1">概述</a></li>
<li><a href="#2.2">不可变的好处</a></li>
<li><a href="#2.3">String,StringBuffer and StringBuilder</a></li>
<li><a href="#2.4">StringPoll</a></li>
<li><a href="#2.5">new String(&ldquo;abc&rdquo;)</a></li>
</ul>
</li>
<li><a href="#3">三、运算</a>
<ul>
<li><a href="#3.1">参数传递</a></li>
<li><a href="#3.2">float与double</a></li>
<li><a href="#3.3">隐式类型转换</a></li>
<li><a href="#3.4">switch</a></li>
</ul>
</li>
<li><a href="#4">四、关键字</a>
<ul>
<li><a href="#4.1">final</a></li>
<li><a href="#4.2">static</a></li>
</ul>
</li>
<li><a href="#5">五、Object通用方法</a>
<ul>
<li><a href="#5.1">概览</a></li>
<li><a href="#5.2">equals()</a></li>
<li><a href="#5.3">hashCode()</a></li>
<li><a href="#5.4">toString()</a></li>
<li><a href="#5.5">clone()</a></li>
</ul>
</li>
<li><a href="#6">六、继承</a>
<ul>
<li><a href="#6.1">访问权限</a></li>
<li><a href="#6.2">抽象类和接口</a></li>
<li><a href="#6.3">super</a></li>
<li><a href="#6.4">重载和重写</a></li>
</ul>
</li>
<li><a href="#7">七、反射</a></li>
<li><a href="#8">八、异常</a></li>
<li><a href="#9">九、泛型</a></li>
<li><a href="#10">十、注解</a></li>
<li><a href="#11">十一、特性</a></li>
</ul>
<h3 id="一数据类型-a-name1a">一、数据类型 <a name="1"></a></h3>
<h4 id="基本类型-a-name11a">基本类型 <a name="1.1"></a></h4>
<ul>
<li>byte/8</li>
<li>char/16</li>
<li>short/16</li>
<li>int/32</li>
<li>float/32</li>
<li>long/64</li>
<li>double/64</li>
<li>boolean/~</li>
</ul>
<p>boolean 只有两个值：true、flase,可以使用 1 bit 来存储，但是具体大小没有明确规定。JVM 会在编译时期将 boolean 类型的数据转换为 int，使用 1 来表示 true， 0 表示 false。JVM 支持 boolean 数组，但是是通过读写 byte 数组来实现的。</p>
<h4 id="包装类型-a-name12a">包装类型 <a name="1.2"></a></h4>
<p>基本类型都有对应的包装类型，基本类型与其对应的包装类型之间的赋值使用自动装箱和拆箱完成。</p>
<pre tabindex="0"><code>Integer x = 2;  //装箱 调用了 Integer.valueOf(2)
int y = x;  //  拆箱 调用了 x.intValue()
</code></pre><h4 id="缓存池-a-name13a">缓存池 <a name="1.3"></a></h4>
<p>new Integer(123) 与 Integer.valueOf(123)的区别在于：</p>
<ul>
<li>new Integer(123) 每次都会创建一个对象；</li>
<li>Integer.valueOf(123) 会使用缓存池中的对象，调用会取得同一个对象的引用。</li>
</ul>
<pre tabindex="0"><code>Integer x = new Integer(123);
Integer y = new Integer(123);
System.out.println(x == y);     //false
Integer z = Integer.valueOf(123);
Integer k = Integer.valueOf(123);
System.out.println(z == k);     //true
</code></pre><p>valueOf() 方法的实现，就是先判断值是否存在缓存池中，如果在的话就直接返回缓存池的内容。</p>
<pre tabindex="0"><code>public static Integer valueOf(int i){
    if(i &gt;= IntegerCache.low &amp;&amp; i &lt;= IntegerCache.high){
        return IntegerCache.cache[i + (-IntegerCache.low)];
        return new Integer(i);
    }
}
</code></pre><p>在 Java 8 中，Integer 缓存池的大小默认为 -128~127。</p>
<p>编译器会在自动装箱过程中调用 valueOf()方法，因此多个值相同且值在缓存池范围内的 Integer 实例使用自动装箱来创建，那么就会引用相同的对象。</p>
<pre tabindex="0"><code>Integer m = 123;
Integer n = 123;
System.out.priintln(m == n);    //true
</code></pre><p>基本类型对应的缓冲池如下：</p>
<ul>
<li>boolean values true and false</li>
<li>all byte values</li>
<li>short values between -128 and 127</li>
<li>int values between -128 and 127</li>
<li>char in the range \u0000 to \u007F</li>
</ul>
<p>在使用这些基本类型对应的包装类型时，如果该数值范围在缓冲范围内，就可以直接使用缓冲池中的对象。<br>
在 JDK 1.8 所有的数值类型缓冲池中，Integer 的缓冲池 IntegerCache 很特殊，这个缓冲池的下界是 -128，上界默认是 127，但是这个上界是可以调的，在启动 JVM 的时候，通过 <code>-XX:AutoBoxCacheMax=&lt;size&gt;</code> 来指定 IntegerCache 的大小，该选项在 JVM 初始化的时候会设定一个名为 <code>java.lang.IntegerCache.high</code> 系统属性，然后 IntegerCache 初始化的时候就会读取该系统属性来决定上界。</p>
<h3 id="二string-a-name2a">二、String <a name="2"></a></h3>
<h4 id="概览a-name21a">概览<a name="2.1"></a></h4>
<p>String 被声明为 final,因此不可被继承。(Integer 等包装类也不能被继承)<br>
在 Java 8 中，String 内部使用 char 数组存储数据。</p>
<pre tabindex="0"><code>public final class String 
    implements java.io.Serializable, Comparable&lt;String&gt;, CharSequence {
    private final char value[];   
}
</code></pre><p>在 Java 9 之后，String 类的实现改用 byte 数组存储字符串，同时使用 <code>coder</code> 来标识使用的编码。</p>
<pre tabindex="0"><code>public final class String
    implements java.io.Serializable, Comparable&lt;String&gt;, CharSequence {
        private final byte[] value;
        private final byte coder;
    }
</code></pre><p>value 数组被声明为 final，这意味着 value 数组初始化之后就不能在引用其他数组，并且 String 内部没有改变 value 数组的方法。这些表明 String 不能更改的约束规范。实际上可以通过反射来修改 String 内部 value 数组的值，但是这样的做法毫无意义，而且会引发错误。</p>
<h4 id="不可变的好处a-name22a">不可变的好处<a name="2.2"></a></h4>
<p>1.可以缓存 hash 值</p>
<p>因为 String 的 hash 值经常被使用，例如 String 用做 HashMap 的 key。不可变的特性使得 hash 值也不可变，因此只需要进行一次计算。</p>
<p>2.String Pool 的需要</p>
<p>如果一个 String 对象已经被创建过了，那么就会从 String Pool 中取得引用。只有 String 是不可变的，才可能使用 String Pool。</p>
<p>3.安全性</p>
<p>String 经常作为参数，String 不可变性可以保证参数不可变。</p>
<p>4.线程安全</p>
<p>String 不可变性天生具备线程安全，可以在多个线程中安全使用。</p>
<h4 id="stringstringbufferand-stringbuildera-name23a">String,StringBuffer,and StringBuilder<a name="2.3"></a></h4>
<p>1.可变性</p>
<ul>
<li>String 不可变</li>
<li>StringBuffer 和 StringBuilder 可变</li>
</ul>
<p>2.线程安全</p>
<ul>
<li>String 不可变，因此是线程安全的</li>
<li>StringBuilder 不是线程安全的</li>
<li>StringBuffer 是线程安全的，内部使用 synchronized 进行同步</li>
</ul>
<h4 id="string-poola-name24a">String Pool<a name="2.4"></a></h4>
<p>字符串常量池(String Pool) 保存着所有字符串字面量(literal strings) ,这些字面量在编译时期就确定。不仅如此，还可以使用 String 的 intern() 方法在运行过程将字符串添加到 String Pool中。<br>
当一个字符串调用 intern() 方法时，如果 String Pool 中已存在一个字符串和该字符串相等(使用 equals() 方法进行确定)，那么就会返回 String Pool 中字符串的引用；否则，就会在 String Poll 中添加一个新的字符串，并返回这个新字符串的引用。</p>
<pre tabindex="0"><code>String s1 = new String(&quot;aaa&quot;);
String s2 = new String(&quot;aaa&quot;);
System.out.println(s1 == s2);    //false
String s3 = s1.intern();
String s4 = s2.intern();
System.out.println(s3 == s4);   //true
</code></pre><p>如果是采用 &ldquo;bbb&rdquo; 这种字面量的形式创建字符串，会自动将字符串放入 String Pool 中。</p>
<pre tabindex="0"><code>String s5 = &quot;bbb&quot;;
String s6 = &quot;bbb&quot;;
System.out.println(s5 == s6);   //true
</code></pre><p>在 Java 7 之前，String Pool被放在运行时常量池中，它属于永久代。而在 Java 7 ，String Pool 被移到堆中。这是因为永久代的空间有限，在大量使用字符串的场景下会导致 OutOfMemoryError 错误。</p>
<h4 id="new-stringabca-name25a">new String(&ldquo;abc&rdquo;)<a name="2.5"></a></h4>
<p>使用这种方式一共会创建两个字符串对象（前提是 String Pool  中还没有 &ldquo;abc&rdquo; 字符串对象）。</p>
<ul>
<li>&ldquo;abc&rdquo; 属于字符串字面量，因此在编译时期会在 String Pool 中创建一个字符串对象，指向这个 &ldquo;abc&rdquo; 字符串字面量。</li>
<li>而使用 new 的方式会在堆中创建一个字符串对象。<br>
创建一个测试类，其 main 方法中使用这种方式来创建字符串对象。</li>
</ul>
<pre tabindex="0"><code>    public class NewStringTest {
        public static void main(String[] args){
            String s = new String(&quot;abc&quot;);
        }
    }
</code></pre><p>使用 javap -verbose 进行反编译，得到以下内容：</p>
<pre tabindex="0"><code>// ...
Constant pool:
// ...
   #2 = Class              #18            // java/lang/String
   #3 = String             #19            // abc
// ...
  #18 = Utf8               java/lang/String
  #19 = Utf8               abc
// ...
  public static void main(java.lang.String[]);
    descriptor: ([Ljava/lang/String;)V
    flags: ACC_PUBLIC, ACC_STATIC
    Code:
      stack=3, locals=2, args_size=1
         0: new           #2                  // class java/lang/String
         3: dup
         4: ldc           #3                  // String abc
         6: invokespecial #4                  // Method java/lang/String.&quot;&lt;init&gt;&quot;:(Ljava/lang/String;)V
         9: astore_1
// ...

</code></pre><p>在 Constant Pool 中，#19 存储这字符串字面量 &ldquo;abc&rdquo;, #3 是 String Pool 的字符串对象，它指向 #19 这个字符串字面量。在 main 方法中， 0: 行使用 new #2 在堆中创建一个字符串对象，并且使用 ldc #3 将 String Pool 中的字符串对象作为 String 构造函数的参数。</p>
<p>以下是 String 构造函数的源码，可以看到，在将一个字符串对象作为另一个字符串对象的构造函数参数时，并不会完全复制 value 数组内容，而是都会指向同一个 value 数组。</p>
<pre tabindex="0"><code>public String(String original){
    this.value = original.value;
    this.hash = original.hash;
}
</code></pre><h3 id="三运算a-name3a">三、运算<a name="3"></a></h3>
<h4 id="参数传递a-name31a">参数传递<a name="3.1"></a></h4>
<p>以下代码中 Dog dog 的dog是一个指针，存储的是对象的地址。在将一个参数传入一个方法时，本质上是将对象的地址以值得方式传递到形参中。</p>
<pre tabindex="0"><code>public class Dog {
    
    String name;

    Dog(String name) {
        this.name = name;
    }

    String getName() {
        return this.name;
    }

    String getObjectAddress() {
        return super.toString();
    }
}
</code></pre><p>在方法中改变对象的字段值会改变原对象该字段值，因为引用的是同一个对象。</p>
<pre tabindex="0"><code>class PassByValueExample {
    public static void main(String[] args) {
        Dog dog = new Dog(&quot;A&quot;);
        func(dog);
        System.out.println(dog.getName());      // B
    }

    private static void func(Dog dog) {
        dog.setName(&quot;B&quot;);
    }
}
</code></pre><p>但是在方法中将指针引用了其它对象，那么此时方法里和方法外的两个指针指向了不同的对象，在一个指针改变其所指向对象的内容对另一个指针所指向的对象没有影响。</p>
<pre tabindex="0"><code>public class PassByValueExample {
    public static void main(String[] args) {
        Dog dog = new Dog(&quot;A&quot;);
        System.out.println(dog.getObjectAddress()); // Dog@4554617c
        func(dog);
        System.out.println(dog.getObjectAddress()); // Dog@4554617c
        System.out.println(dog.getName());          // A
    }

    private static void func(Dog dog) {
        System.out.println(dog.getObjectAddress()); // Dog@4554617c
        dog = new Dog(&quot;B&quot;);
        System.out.println(dog.getObjectAddress()); // Dog@74a14482
        System.out.println(dog.getName());          // B
    }
}
</code></pre><h4 id="float-与-doublea-name32a">float 与 double<a name="3.2"></a></h4>
<p>Java 不能隐式执行向下转型，因为这会使得精度降低。</p>
<p>1.1 字面量属于 double 类型，不能直接将 1.1 直接赋值给 float 变量，因为这是向下转型。</p>
<pre tabindex="0"><code>// float f = 1.1;
</code></pre><p>1.1f 字面量才是 float 类型。</p>
<pre tabindex="0"><code>float f = 1.1f;
</code></pre><h4 id="隐式类型转换a-name33a">隐式类型转换<a name="3.3"></a></h4>
<p>因为字面量 1 是 int 类型，它比 short 类型精度要高，因此不能隐式地将 int 类型向下转型为 short 类型。</p>
<pre tabindex="0"><code>short s1 = 1;
//s1 = s1 + 1;
</code></pre><p>但是使用 += 或者 ++ 运算符会执行隐式类型转换。</p>
<pre tabindex="0"><code>s1 += 1;
s1++;
</code></pre><p>上面的语句相当于将 s1 + 1 的计算结果进行了向下转型：</p>
<pre tabindex="0"><code>s1 = (short)(s1 + 1);
</code></pre><h4 id="switcha-name34a">switch<a name="3.4"></a></h4>
<p>从 Java 7 开始，可以在 switch 条件判断语句中使用 String 对象。<br>
switch 不支持 long、float、double，是因为 switch 的设计初衷是对那些只有少数几个值的类型进行等值判断，如果值过于复杂，那么还是用 if 比较合适。</p>
<h3 id="四关键字a-name4a">四、关键字<a name="4"></a></h3>
<h4 id="finala-name41a">final<a name="4.1"></a></h4>
<p>1.<strong>数据</strong></p>
<p>声明数据为常量，可以是编译时的常量，也可以是在运行时被初始化后不能被改变的常量。</p>
<ul>
<li>对于基本类型，final 使数值不变；</li>
<li>对于引用类型，final 使引用不变，也就不能引用其他对象，但是被引用的对象本身是可以修改的。</li>
</ul>
<pre tabindex="0"><code>final int x = 1;
//x = 3;    // cannot assign value to final variable 'x'
final A y = new A();
y.a = 1;
</code></pre><p>2.<strong>方法</strong></p>
<p>声明方法不能被子类重写。<br>
private 方法隐式地被指定为 final，如果在子类中定义的方法和基类中的一个 private 方法签名相同，此时子类的方法不是重写基类方法，而是在子类中定义了一个新的方法。</p>
<p>3.<strong>类</strong>
声明类不允许被继承。</p>
<h4 id="statica-name42a">static<a name="4.2"></a></h4>
<p>1.<strong>静态变量</strong></p>
<ul>
<li>静态变量： 又被称为类变量，也就是说这个变量属于类的，类所有的实例都共享静态变量，可以直接通过类名来访问它。静态变量在内存中只存在一份。</li>
<li>实例变量： 每创建一个实例就会产生一个实例变量，它与该实例同生共死。</li>
</ul>
<pre tabindex="0"><code>public class A {
    private int x;          // 实例变量
    private static int y;   // 静态变量

    public static void main(String[] args) {
        // int x = A.x;     // Non-static field 'x' cannot be referenced from a static context 
        A a = new A();
        int x = a.x;
        int y = A.y;
    }
}
</code></pre><p>2.<strong>静态方法</strong></p>
<p>静态方法在类加载的时候就存在了，它不依赖于任何实例。所以静态方法必须有实现，也就是说它不能是抽象方法。</p>
<pre tabindex="0"><code>public  abstract class A {
    public static void func1(){}
}
</code></pre><p>只能访问所属类的静态字段和静态方法，方法中不能有 this 和 super 关键字，因为这两个关键字与具体对象关联。</p>
<pre tabindex="0"><code>public class A {
    private static int x;
    private int y;

    public static void func1(){
        int a = x;
        // int b = y;       // Non-static field 'y' cannot be referenced from a static context
        // int b = this.y;  //'A.this' cannot be referenced from a static context
    }
}
</code></pre><p><strong>3.静态语句块</strong><br>
静态语句块在类初始化时运行一次。</p>
<pre tabindex="0"><code>public class A {
    static {
        System.out.println(&quot;123&quot;);
    }

    public static void main(String[] args) {
        A a1 = new A();
        A a2 = new A();
    }
}
</code></pre><pre tabindex="0"><code>123
</code></pre><p><strong>4.静态内部类</strong><br>
非静态内部类依赖于外部类的实例，也就是说需要先创建外部类的实例，才能用这个实例去创建非静态内部类。而静态内部类不需要。</p>
<pre tabindex="0"><code>public class OuterClass {
    class InnerClass {
    }
    static class StaticInnerClass {
    }
    public static void main(String[] args) {
        //InnerClass innerClass = new InnerClass();     //  'OuterClass.this' cannot be referenced from a static context
        OuterClass  outerClass = new OuterClass();
        InnerClass innerClass = outerClass.new InnerClass();
        StaticInnerClass staticInnerClass = new StaticInnerClass(); 
    }
}
</code></pre><p>静态内部类不能访问外部类的非静态的变量和方法。</p>
<p><strong>5.静态导包</strong>
在使用静态变量和方法时不用再指明 ClassName,从而简化代码，但可读性大大降低。</p>
<p><strong>6.初始化顺序</strong><br>
静态变量和静态语句块优先于实例变量和普通语句块，静态变量和静态语句块的初始化顺序取决于它们在代码中的顺序。</p>
<pre tabindex="0"><code>public static String staticField = &quot;静态变量&quot;;
</code></pre><pre tabindex="0"><code>static {
    System.out.println(&quot;静态语句块&quot;);
}
</code></pre><pre tabindex="0"><code>public String field = &quot;实例变量&quot;;
</code></pre><pre tabindex="0"><code>{
    System.out.println(&quot;普通语句块&quot;);
}
</code></pre><p>最后才是构造函数的初始化。</p>
<pre tabindex="0"><code>public InitialOrderTest(){
    System.out.println(&quot;构造函数&quot;);
}
</code></pre><p>存在继承的情况下，初始化顺序为：</p>
<ul>
<li>父类（静态变量、静态语句块）</li>
<li>子类（静态变量、静态语句块）</li>
<li>父类（实例变量、普通语句块）</li>
<li>父类（构造函数）</li>
<li>子类（实例变量、普通语句块）</li>
<li>子类（构造函数）</li>
</ul>
<h3 id="五object-通用方法a-name5a">五、Object 通用方法<a name="5"></a></h3>
<h4 id="概述a-name51a">概述<a name="5.1"></a></h4>
<pre tabindex="0"><code>public native int hashCode()

public boolean equals(Object obj)

protected native Object clone() throws CloneNotSupportedException

public String toString()

public final native Class&lt;?&gt; getClass()

protected void finalize() throws Throwable

public final native void notify()

public final native void notifyAll()

public final native void wait(long timeout) throws InterruptedException

public final void wait(long timeout, int nanos) throws InterruptedException

public final void wait() throws InterruptedException

</code></pre><h4 id="equalsa-name52a">equals()<a name="5.2"></a></h4>
<p><strong>1.等价关系</strong><br>
两个对象具有等价关系，需要满足以下五个条件：自反性、对称性、传递性、一致性、与 null 的比较（对任何不是 null 的对象 x 调用 x.equals(null) 结果都为flase)</p>
<p><strong>2.等价于相等</strong></p>
<ul>
<li>对于基本类型，== 判断两个值是否相等，基本类型没有 equals() 方法。</li>
<li>对于引用类型，== 判断两个变量是否引用同一个对象，而 equals() 判断引用的对象是否等价。</li>
</ul>
<pre tabindex="0"><code>Integer x = new Integer(1);
Integer y = new Integer(1);
System.out.println(x.equals(y));    // true
System.out.println(x == y);         // false
</code></pre><p><strong>3.实现</strong></p>
<ul>
<li>检查是否为同一个对象的引用，如果是直接返回 true；</li>
<li>检查是否是同一个类型，如果不是，直接返回 false；</li>
<li>将 Object 对象进行转型；</li>
<li>判断每个关键域是否相等</li>
</ul>
<pre tabindex="0"><code>public class EqualExample {
    private int x;
    private int y;
    private int z;

    public EqualExample(int x, int y, int z){
        this.x = x;
        this.y = y;
        this.z = z;
    }

    @Override
    public boolean equals(Object o){
        if(this == o) return true;
        if(o == null || getClass() != o.getClass()) return false;

        EqualExample that = (EqualExample) o;
        
        if(x != that.x) return false;
        if(y != that.y) return false;
        return z == that.z;
    }
}
</code></pre><h4 id="hashcodea-name53a">hashCode()<a name="5.3"></a></h4>
<p>hashCode() 返回哈希值，而 equals() 是用来判断两个对象是否等价。等价的两个对象散列值一定相同，但是散列值相同的两个对象不一定等价，这是因为计算哈希值具有随机性，两个值不同的对象可能计算出相同的哈希值。<br>
在覆盖 equals() 方法时应当总是覆盖 hashCode() 方法，保证等价的两个对象哈希值也相等。<br>
HashSet 和 HashMap 等集合类使用了 hashCode() 方法来计算对象应该存储的位置，因此要将对象添加到这些集合类中，需要让对应的类实现 hashCode() 方法。<br>
下面的代码中，新建了两个等价的对象，并将它们添加到 HashSet 中，我们希望将两个对象当成一样的，只在集合中添加一个对象。但是 EqualExample 没有实现 hashCode() 方法，因此两个对象的哈希值是不同的，最终导致集合添加了两个等价的对象。</p>
<pre tabindex="0"><code>EqualExample e1 = new EqualExample(1,1,1);
EqualExample e2 = new EqualExample(1,1,1);
System.out.println(eq.equal(e2));   // true
HashSet&lt;EqualExample&gt; set  = new HashSet&lt;&gt;();
set.add(e1);
set.add(e2);
System.out.println(set.size());     // 2
</code></pre><p>理想的哈希函数应当具有均匀性 ，即不相等的对象应当均匀分布到所有可能的哈希值上。这就要求了哈希函数要把所有域的值都考虑进来。可以将每个域都当成 R 进制的某一位，然后组成一个 R 进制的整数。</p>
<p>R 一般取 31，它是一个奇素数。</p>
<h4 id="tostringa-name54a">toString()<a name="5.4"></a></h4>
<p>默认返回 类名@十六进制数 这种形式，其中 @ 后面的数值为散列码的无符号十六进制表示。</p>
<h4 id="clonea-name55a">clone()<a name="5.5"></a></h4>
<h5 id="1cloneable">1.cloneable</h5>
<p>clone() 是 Object 的 protected 方法，它不是 public，一个类不显式去重写 clone()，其他类就不能直接去调用该类实例的 clone() 方法。</p>
<h5 id="2浅拷贝">2.浅拷贝</h5>
<p>拷贝对象和原始对象的引用类型引用同一个对象。</p>
<h5 id="3深拷贝">3.深拷贝</h5>
<p>拷贝对象和原始对象的引用类型引用不同的对象。</p>
<h5 id="4clone的替代方案">4.clone的替代方案</h5>
<p>使用 clone() 方法既复杂又有风险，最好别用，使用拷贝构造函数或拷贝工厂来拷贝一个对象。</p>
<h3 id="六继承-a-name6a">六、继承 <a name="6"></a></h3>
<h4 id="访问权限-a-name61a">访问权限 <a name="6.1"></a></h4>
<p>Java 中有三个访问权限修饰符：private、protected 以及 public，如果不加访问修饰符，表示包级可见。</p>
<h4 id="抽象类与接口-a-name62a">抽象类与接口 <a name="6.2"></a></h4>
<h5 id="1抽象类">1.抽象类</h5>
<p>抽象类和抽象方法都使用 abstract 关键字进行声明。如果一个类中包含抽象方法，那么该类必须声明为抽象类。</p>
<p>抽象类不能被实例化，只能被继承。</p>
<h5 id="2接口">2.接口</h5>
<p>接口是抽象类的延伸，在 Java 8 之前，它可以看成是一个完全抽象的类，也就是说它不能有任何的方法实现。</p>
<p>从 Java 8开始，接口也可以拥有默认的方法实现，这是因为不支持默认方法的接口的维护成本太高了。</p>
<p>接口的成员（字段+方法）默认都是 public的，并且不允许定义为 private 或 protected。从 Java 9 开始，允许将方法定义为 private，这样就能定义某些复用的代码又不会把方法暴露出去。</p>
<p>接口的字段默认都是 static 和 final 的。</p>
<h5 id="3抽象类与接口比较">3.抽象类与接口比较</h5>
<ul>
<li>从设计层面上看，抽象类提供一种 IS-A 关系，而接口更像一种 LIKE-A 关系。</li>
<li>从使用上看，一个类可以实现多个接口，但是不能继承多个抽象类。</li>
<li>接口的字段只能是 static 和 final 类型的，而抽象类的字段没有这种限制。</li>
<li>接口的成员只能是 public 的，而抽象类的成员可以有多种访问权限。</li>
</ul>
<p>在很多情况下，接口优先于抽象类。因为接口没有抽象类严格的类层次结构要求，可以灵活地为一个类添加行为。并且从 Java 8 开始，接口也可以有默认的方法实现，使得接口的成本也变得很低。</p>
<h4 id="supera-name63a">super<a name="6.3"></a></h4>
<ul>
<li>访问父类的构造函数。super()。</li>
<li>访问父类的成员。</li>
</ul>
<h4 id="重写与重载-a-name64a">重写与重载 <a name="6.4"></a></h4>
<h5 id="1重写">1.重写</h5>
<p>存在于继承体系中，指子类实现了一个与父类在方法声明上完全相同的一个方法。</p>
<h5 id="2重载">2.重载</h5>
<p>存在于一个类中，指一个方法与已经存在的方法名称上相同，但是参数类型、个数、顺序至少有一个不同。</p>
<p>应该注意的是，返回值不同，其他都相同不算是重载。</p>
<h3 id="七反射a-name7a">七、反射<a name="7"></a></h3>
<p>每个类都有一个 Class 对象，包含了与类有关的信息。当编译一个新类时，会产生一个同名的 .class 文件，该文件内容保存着 Class 对象。</p>
<p>类加载相当于 Class 对象的加载，类在第一次使用时才动态加载到 JVM 中。也可以使用 Class.forname(&ldquo;com.mysql.jdbc.Driver&rdquo;) 这种方式来控制类的加载，该方法会返回一个 Class 对象。</p>
<p>反射可以提供运行时的类信息，并且这个类可以在运行时才加载进来，甚至在编译时期该类的.class不存在也可以加载进来。</p>
<p>反射的优点：</p>
<ul>
<li>可扩展性</li>
<li>可视化开发环境： 如IDE,从反射中可用的类型信息中受益，帮助程序员编写正确的代码。</li>
<li>调试器和测试工具</li>
</ul>
<p>反射的缺点：</p>
<ul>
<li>性能开销</li>
<li>安全限制</li>
<li>内部暴露</li>
</ul>
<h3 id="八异常a-name8a">八、异常<a name="8"></a></h3>
<h3 id="九泛型a-name9a">九、泛型<a name="9"></a></h3>
<h3 id="十注解a-name10a">十、注解<a name="10"></a></h3>
<h3 id="十一特性a-name11a">十一、特性<a name="11"></a></h3>

        
        ]]>
      </description>
    </item>
    
    
  </channel>
</rss>
