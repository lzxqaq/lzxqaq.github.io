<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Java on 罗泽勋</title>
    <link>/categories/java/</link>
    <description>Recent content in Java on 罗泽勋</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Tue, 12 Jan 2021 08:46:08 +0800</lastBuildDate><atom:link href="/categories/java/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Java I/O</title>
      <link>/post/2021/01/12/java-i/o/</link>
      <pubDate>Tue, 12 Jan 2021 08:46:08 +0800</pubDate>
      
      <guid>/post/2021/01/12/java-i/o/</guid>
      <description>一、概览 Java 的 I/O 大概可以分成以下几类： 磁盘操作：File 字节操作：InputStream 和 OutputStream 对象操作：Serializable 网络操作：Soc</description>
    </item>
    
    <item>
      <title>Java 并发</title>
      <link>/post/2021/01/09/java-%E5%B9%B6%E5%8F%91/</link>
      <pubDate>Sat, 09 Jan 2021 10:50:16 +0800</pubDate>
      
      <guid>/post/2021/01/09/java-%E5%B9%B6%E5%8F%91/</guid>
      <description>一、使用线程 有三种使用线程的方法： 实现 Runnable 接口； 实现 Callable接口； 继承 Tread 类； 实现 Runnable 接口 需要实现接口中的 run() 方法。 public class MyRunnable implements Runnable { @Override public void run(){ // ...</description>
    </item>
    
    <item>
      <title>【转载】Java 虚拟机</title>
      <link>/collection/2020-12-25jvm/</link>
      <pubDate>Fri, 25 Dec 2020 15:06:19 +0800</pubDate>
      
      <guid>/collection/2020-12-25jvm/</guid>
      <description>参考自 CyC2018/CS-Notes 一、运行时数据区域 程序计数器 Java 虚拟机栈 本地方法栈 堆 方法区 运行时常量池 直接内存 二、垃圾收集 判断一个对象是否可被回收 引用类型 垃圾收集算法</description>
    </item>
    
    <item>
      <title>【转载】Java 容器</title>
      <link>/collection/2020-12-24-collection/</link>
      <pubDate>Thu, 24 Dec 2020 16:47:24 +0800</pubDate>
      
      <guid>/collection/2020-12-24-collection/</guid>
      <description>参考自 CyC2018/CS-Notes 一、概览 Collection Map 一、概览 容器主要包括 Collection 和 Map 两种，Collection 存储着对象的集合，而 Map存储着键值对（两个对象）的映射表。 Collection 1.Set TreeSet: 基</description>
    </item>
    
    <item>
      <title>String 类真的不可以改变吗？</title>
      <link>/post/2020/12/15/string-%E7%B1%BB%E7%9C%9F%E7%9A%84%E4%B8%8D%E5%8F%AF%E4%BB%A5%E6%94%B9%E5%8F%98%E5%90%97/</link>
      <pubDate>Tue, 15 Dec 2020 15:05:27 +0800</pubDate>
      
      <guid>/post/2020/12/15/string-%E7%B1%BB%E7%9C%9F%E7%9A%84%E4%B8%8D%E5%8F%AF%E4%BB%A5%E6%94%B9%E5%8F%98%E5%90%97/</guid>
      <description>对于 java.lang.String 类，我相信很多人印象里都是它不能被改变。通过查看源码，可以知道 String 有一个 final char 数组的变量，这个变量初始化之后便不能重新赋值。虽然这个变量引</description>
    </item>
    
    <item>
      <title>【转载】Java 基础</title>
      <link>/collection/2020-12-15-base/</link>
      <pubDate>Tue, 15 Dec 2020 08:32:26 +0800</pubDate>
      
      <guid>/collection/2020-12-15-base/</guid>
      <description>参考自 CyC2018/CS-Notes 一、数据类型 基本类型 包装类型 缓存池 二、String 概述 不可变的好处 String,StringBuffer and StringBuilder StringPoll new String(&amp;ldquo;abc&amp;rdquo;) 三、运算 参数传递 float与double 隐式类型转换 switch</description>
    </item>
    
  </channel>
</rss>
