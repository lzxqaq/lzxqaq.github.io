<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>数据库 on 糸色生</title>
    <link>/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/</link>
    <description>Recent content in 数据库 on 糸色生</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Wed, 22 Dec 2021 23:34:10 +0800</lastBuildDate>
    <atom:link href="/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>【转载】Redis</title>
      <link>/post/2021/12/22/%E8%BD%AC%E8%BD%BDredis/</link>
      <pubDate>Wed, 22 Dec 2021 23:34:10 +0800</pubDate>
      <author>糸色生</author>
      <guid>/post/2021/12/22/%E8%BD%AC%E8%BD%BDredis/</guid>
      <description>
        <![CDATA[
        <h1 id="redis">Redis</h1>
<!-- GFM-TOC -->
<ul>
<li><a href="#redis">Redis</a>
<ul>
<li><a href="#%E4%B8%80%E6%A6%82%E8%BF%B0">一、概述</a></li>
<li><a href="#%E4%BA%8C%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B">二、数据类型</a>
<ul>
<li><a href="#string">STRING</a></li>
<li><a href="#list">LIST</a></li>
<li><a href="#set">SET</a></li>
<li><a href="#hash">HASH</a></li>
<li><a href="#zset">ZSET</a></li>
</ul>
</li>
<li><a href="#%E4%B8%89%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84">三、数据结构</a>
<ul>
<li><a href="#%E5%AD%97%E5%85%B8">字典</a></li>
<li><a href="#%E8%B7%B3%E8%B7%83%E8%A1%A8">跳跃表</a></li>
</ul>
</li>
<li><a href="#%E5%9B%9B%E4%BD%BF%E7%94%A8%E5%9C%BA%E6%99%AF">四、使用场景</a>
<ul>
<li><a href="#%E8%AE%A1%E6%95%B0%E5%99%A8">计数器</a></li>
<li><a href="#%E7%BC%93%E5%AD%98">缓存</a></li>
<li><a href="#%E6%9F%A5%E6%89%BE%E8%A1%A8">查找表</a></li>
<li><a href="#%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97">消息队列</a></li>
<li><a href="#%E4%BC%9A%E8%AF%9D%E7%BC%93%E5%AD%98">会话缓存</a></li>
<li><a href="#%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81%E5%AE%9E%E7%8E%B0">分布式锁实现</a></li>
<li><a href="#%E5%85%B6%E5%AE%83">其它</a></li>
</ul>
</li>
<li><a href="#%E4%BA%94redis-%E4%B8%8E-memcached">五、Redis 与 Memcached</a>
<ul>
<li><a href="#%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B">数据类型</a></li>
<li><a href="#%E6%95%B0%E6%8D%AE%E6%8C%81%E4%B9%85%E5%8C%96">数据持久化</a></li>
<li><a href="#%E5%88%86%E5%B8%83%E5%BC%8F">分布式</a></li>
<li><a href="#%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86%E6%9C%BA%E5%88%B6">内存管理机制</a></li>
</ul>
</li>
<li><a href="#%E5%85%AD%E9%94%AE%E7%9A%84%E8%BF%87%E6%9C%9F%E6%97%B6%E9%97%B4">六、键的过期时间</a></li>
<li><a href="#%E4%B8%83%E6%95%B0%E6%8D%AE%E6%B7%98%E6%B1%B0%E7%AD%96%E7%95%A5">七、数据淘汰策略</a></li>
<li><a href="#%E5%85%AB%E6%8C%81%E4%B9%85%E5%8C%96">八、持久化</a>
<ul>
<li><a href="#rdb-%E6%8C%81%E4%B9%85%E5%8C%96">RDB 持久化</a></li>
<li><a href="#aof-%E6%8C%81%E4%B9%85%E5%8C%96">AOF 持久化</a></li>
</ul>
</li>
<li><a href="#%E4%B9%9D%E4%BA%8B%E5%8A%A1">九、事务</a></li>
<li><a href="#%E5%8D%81%E4%BA%8B%E4%BB%B6">十、事件</a>
<ul>
<li><a href="#%E6%96%87%E4%BB%B6%E4%BA%8B%E4%BB%B6">文件事件</a></li>
<li><a href="#%E6%97%B6%E9%97%B4%E4%BA%8B%E4%BB%B6">时间事件</a></li>
<li><a href="#%E4%BA%8B%E4%BB%B6%E7%9A%84%E8%B0%83%E5%BA%A6%E4%B8%8E%E6%89%A7%E8%A1%8C">事件的调度与执行</a></li>
</ul>
</li>
<li><a href="#%E5%8D%81%E4%B8%80%E5%A4%8D%E5%88%B6">十一、复制</a>
<ul>
<li><a href="#%E8%BF%9E%E6%8E%A5%E8%BF%87%E7%A8%8B">连接过程</a></li>
<li><a href="#%E4%B8%BB%E4%BB%8E%E9%93%BE">主从链</a></li>
</ul>
</li>
<li><a href="#%E5%8D%81%E4%BA%8Csentinel">十二、Sentinel</a></li>
<li><a href="#%E5%8D%81%E4%B8%89%E5%88%86%E7%89%87">十三、分片</a></li>
<li><a href="#%E5%8D%81%E5%9B%9B%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95%E7%9A%84%E8%AE%BA%E5%9D%9B%E7%B3%BB%E7%BB%9F%E5%88%86%E6%9E%90">十四、一个简单的论坛系统分析</a>
<ul>
<li><a href="#%E6%96%87%E7%AB%A0%E4%BF%A1%E6%81%AF">文章信息</a></li>
<li><a href="#%E7%82%B9%E8%B5%9E%E5%8A%9F%E8%83%BD">点赞功能</a></li>
<li><a href="#%E5%AF%B9%E6%96%87%E7%AB%A0%E8%BF%9B%E8%A1%8C%E6%8E%92%E5%BA%8F">对文章进行排序</a></li>
</ul>
</li>
<li><a href="#%E5%8F%82%E8%80%83%E8%B5%84%E6%96%99">参考资料</a></li>
</ul>
</li>
</ul>
<!-- GFM-TOC -->
<h2 id="一概述">一、概述</h2>
<p>Redis 是速度非常快的非关系型（NoSQL）内存键值数据库，可以存储键和五种不同类型的值之间的映射。</p>
<p>键的类型只能为字符串，值支持五种数据类型：字符串、列表、集合、散列表、有序集合。</p>
<p>Redis 支持很多特性，例如将内存中的数据持久化到硬盘中，使用复制来扩展读性能，使用分片来扩展写性能。</p>
<h2 id="二数据类型">二、数据类型</h2>
<table>
<thead>
<tr>
<th style="text-align:center">数据类型</th>
<th style="text-align:center">可以存储的值</th>
<th style="text-align:center">操作</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">STRING</td>
<td style="text-align:center">字符串、整数或者浮点数</td>
<td style="text-align:center">对整个字符串或者字符串的其中一部分执行操作&lt;/br&gt; 对整数和浮点数执行自增或者自减操作</td>
</tr>
<tr>
<td style="text-align:center">LIST</td>
<td style="text-align:center">列表</td>
<td style="text-align:center">从两端压入或者弹出元素 &lt;/br&gt; 对单个或者多个元素进行修剪，&lt;/br&gt; 只保留一个范围内的元素</td>
</tr>
<tr>
<td style="text-align:center">SET</td>
<td style="text-align:center">无序集合</td>
<td style="text-align:center">添加、获取、移除单个元素&lt;/br&gt; 检查一个元素是否存在于集合中&lt;/br&gt; 计算交集、并集、差集&lt;/br&gt; 从集合里面随机获取元素</td>
</tr>
<tr>
<td style="text-align:center">HASH</td>
<td style="text-align:center">包含键值对的无序散列表</td>
<td style="text-align:center">添加、获取、移除单个键值对&lt;/br&gt; 获取所有键值对&lt;/br&gt; 检查某个键是否存在</td>
</tr>
<tr>
<td style="text-align:center">ZSET</td>
<td style="text-align:center">有序集合</td>
<td style="text-align:center">添加、获取、删除元素&lt;/br&gt; 根据分值范围或者成员来获取元素&lt;/br&gt; 计算一个键的排名</td>
</tr>
</tbody>
</table>
<blockquote>
<p><a href="https://redislabs.com/ebook/part-1-getting-started/chapter-1-getting-to-know-redis/1-2-what-redis-data-structures-look-like/">What Redis data structures look like</a></p>
</blockquote>
<h3 id="string">STRING</h3>
<div align="center"> <img src="https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/6019b2db-bc3e-4408-b6d8-96025f4481d6.png" width="400"/> </div><br>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-html" data-lang="html">&gt; set hello world
OK
&gt; get hello
&#34;world&#34;
&gt; del hello
(integer) 1
&gt; get hello
(nil)
</code></pre></div><h3 id="list">LIST</h3>
<div align="center"> <img src="https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/fb327611-7e2b-4f2f-9f5b-38592d408f07.png" width="400"/> </div><br>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-html" data-lang="html">&gt; rpush list-key item
(integer) 1
&gt; rpush list-key item2
(integer) 2
&gt; rpush list-key item
(integer) 3

&gt; lrange list-key 0 -1
1) &#34;item&#34;
2) &#34;item2&#34;
3) &#34;item&#34;

&gt; lindex list-key 1
&#34;item2&#34;

&gt; lpop list-key
&#34;item&#34;

&gt; lrange list-key 0 -1
1) &#34;item2&#34;
2) &#34;item&#34;
</code></pre></div><h3 id="set">SET</h3>
<div align="center"> <img src="https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/cd5fbcff-3f35-43a6-8ffa-082a93ce0f0e.png" width="400"/> </div><br>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-html" data-lang="html">&gt; sadd set-key item
(integer) 1
&gt; sadd set-key item2
(integer) 1
&gt; sadd set-key item3
(integer) 1
&gt; sadd set-key item
(integer) 0

&gt; smembers set-key
1) &#34;item&#34;
2) &#34;item2&#34;
3) &#34;item3&#34;

&gt; sismember set-key item4
(integer) 0
&gt; sismember set-key item
(integer) 1

&gt; srem set-key item2
(integer) 1
&gt; srem set-key item2
(integer) 0

&gt; smembers set-key
1) &#34;item&#34;
2) &#34;item3&#34;
</code></pre></div><h3 id="hash">HASH</h3>
<div align="center"> <img src="https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/7bd202a7-93d4-4f3a-a878-af68ae25539a.png" width="400"/> </div><br>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-html" data-lang="html">&gt; hset hash-key sub-key1 value1
(integer) 1
&gt; hset hash-key sub-key2 value2
(integer) 1
&gt; hset hash-key sub-key1 value1
(integer) 0

&gt; hgetall hash-key
1) &#34;sub-key1&#34;
2) &#34;value1&#34;
3) &#34;sub-key2&#34;
4) &#34;value2&#34;

&gt; hdel hash-key sub-key2
(integer) 1
&gt; hdel hash-key sub-key2
(integer) 0

&gt; hget hash-key sub-key1
&#34;value1&#34;

&gt; hgetall hash-key
1) &#34;sub-key1&#34;
2) &#34;value1&#34;
</code></pre></div><h3 id="zset">ZSET</h3>
<div align="center"> <img src="https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/1202b2d6-9469-4251-bd47-ca6034fb6116.png" width="400"/> </div><br>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-html" data-lang="html">&gt; zadd zset-key 728 member1
(integer) 1
&gt; zadd zset-key 982 member0
(integer) 1
&gt; zadd zset-key 982 member0
(integer) 0

&gt; zrange zset-key 0 -1 withscores
1) &#34;member1&#34;
2) &#34;728&#34;
3) &#34;member0&#34;
4) &#34;982&#34;

&gt; zrangebyscore zset-key 0 800 withscores
1) &#34;member1&#34;
2) &#34;728&#34;

&gt; zrem zset-key member1
(integer) 1
&gt; zrem zset-key member1
(integer) 0

&gt; zrange zset-key 0 -1 withscores
1) &#34;member0&#34;
2) &#34;982&#34;
</code></pre></div><h2 id="三数据结构">三、数据结构</h2>
<h3 id="字典">字典</h3>
<p>dictht 是一个散列表结构，使用拉链法解决哈希冲突。</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c"><span style="color:#75715e">/* This is our hash table structure. Every dictionary has two of this as we
</span><span style="color:#75715e"> * implement incremental rehashing, for the old to the new table. */</span>
<span style="color:#66d9ef">typedef</span> <span style="color:#66d9ef">struct</span> dictht {
    dictEntry <span style="color:#f92672">**</span>table;
    <span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">long</span> size;
    <span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">long</span> sizemask;
    <span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">long</span> used;
} dictht;
</code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c"><span style="color:#66d9ef">typedef</span> <span style="color:#66d9ef">struct</span> dictEntry {
    <span style="color:#66d9ef">void</span> <span style="color:#f92672">*</span>key;
    <span style="color:#66d9ef">union</span> {
        <span style="color:#66d9ef">void</span> <span style="color:#f92672">*</span>val;
        <span style="color:#66d9ef">uint64_t</span> u64;
        <span style="color:#66d9ef">int64_t</span> s64;
        <span style="color:#66d9ef">double</span> d;
    } v;
    <span style="color:#66d9ef">struct</span> dictEntry <span style="color:#f92672">*</span>next;
} dictEntry;
</code></pre></div><p>Redis 的字典 dict 中包含两个哈希表 dictht，这是为了方便进行 rehash 操作。在扩容时，将其中一个 dictht 上的键值对 rehash 到另一个 dictht 上面，完成之后释放空间并交换两个 dictht 的角色。</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c"><span style="color:#66d9ef">typedef</span> <span style="color:#66d9ef">struct</span> dict {
    dictType <span style="color:#f92672">*</span>type;
    <span style="color:#66d9ef">void</span> <span style="color:#f92672">*</span>privdata;
    dictht ht[<span style="color:#ae81ff">2</span>];
    <span style="color:#66d9ef">long</span> rehashidx; <span style="color:#75715e">/* rehashing not in progress if rehashidx == -1 */</span>
    <span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">long</span> iterators; <span style="color:#75715e">/* number of iterators currently running */</span>
} dict;
</code></pre></div><p>rehash 操作不是一次性完成，而是采用渐进方式，这是为了避免一次性执行过多的 rehash 操作给服务器带来过大的负担。</p>
<p>渐进式 rehash 通过记录 dict 的 rehashidx 完成，它从 0 开始，然后每执行一次 rehash 都会递增。例如在一次 rehash 中，要把 dict[0] rehash 到 dict[1]，这一次会把 dict[0] 上 table[rehashidx] 的键值对 rehash 到 dict[1] 上，dict[0] 的 table[rehashidx] 指向 null，并令 rehashidx++。</p>
<p>在 rehash 期间，每次对字典执行添加、删除、查找或者更新操作时，都会执行一次渐进式 rehash。</p>
<p>采用渐进式 rehash 会导致字典中的数据分散在两个 dictht 上，因此对字典的查找操作也需要到对应的 dictht 去执行。</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c"><span style="color:#75715e">/* Performs N steps of incremental rehashing. Returns 1 if there are still
</span><span style="color:#75715e"> * keys to move from the old to the new hash table, otherwise 0 is returned.
</span><span style="color:#75715e"> *
</span><span style="color:#75715e"> * Note that a rehashing step consists in moving a bucket (that may have more
</span><span style="color:#75715e"> * than one key as we use chaining) from the old to the new hash table, however
</span><span style="color:#75715e"> * since part of the hash table may be composed of empty spaces, it is not
</span><span style="color:#75715e"> * guaranteed that this function will rehash even a single bucket, since it
</span><span style="color:#75715e"> * will visit at max N*10 empty buckets in total, otherwise the amount of
</span><span style="color:#75715e"> * work it does would be unbound and the function may block for a long time. */</span>
<span style="color:#66d9ef">int</span> <span style="color:#a6e22e">dictRehash</span>(dict <span style="color:#f92672">*</span>d, <span style="color:#66d9ef">int</span> n) {
    <span style="color:#66d9ef">int</span> empty_visits <span style="color:#f92672">=</span> n <span style="color:#f92672">*</span> <span style="color:#ae81ff">10</span>; <span style="color:#75715e">/* Max number of empty buckets to visit. */</span>
    <span style="color:#66d9ef">if</span> (<span style="color:#f92672">!</span>dictIsRehashing(d)) <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0</span>;

    <span style="color:#66d9ef">while</span> (n<span style="color:#f92672">--</span> <span style="color:#f92672">&amp;&amp;</span> d<span style="color:#f92672">-&gt;</span>ht[<span style="color:#ae81ff">0</span>].used <span style="color:#f92672">!=</span> <span style="color:#ae81ff">0</span>) {
        dictEntry <span style="color:#f92672">*</span>de, <span style="color:#f92672">*</span>nextde;

        <span style="color:#75715e">/* Note that rehashidx can&#39;t overflow as we are sure there are more
</span><span style="color:#75715e">         * elements because ht[0].used != 0 */</span>
        assert(d<span style="color:#f92672">-&gt;</span>ht[<span style="color:#ae81ff">0</span>].size <span style="color:#f92672">&gt;</span> (<span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">long</span>) d<span style="color:#f92672">-&gt;</span>rehashidx);
        <span style="color:#66d9ef">while</span> (d<span style="color:#f92672">-&gt;</span>ht[<span style="color:#ae81ff">0</span>].table[d<span style="color:#f92672">-&gt;</span>rehashidx] <span style="color:#f92672">==</span> NULL) {
            d<span style="color:#f92672">-&gt;</span>rehashidx<span style="color:#f92672">++</span>;
            <span style="color:#66d9ef">if</span> (<span style="color:#f92672">--</span>empty_visits <span style="color:#f92672">==</span> <span style="color:#ae81ff">0</span>) <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">1</span>;
        }
        de <span style="color:#f92672">=</span> d<span style="color:#f92672">-&gt;</span>ht[<span style="color:#ae81ff">0</span>].table[d<span style="color:#f92672">-&gt;</span>rehashidx];
        <span style="color:#75715e">/* Move all the keys in this bucket from the old to the new hash HT */</span>
        <span style="color:#66d9ef">while</span> (de) {
            <span style="color:#66d9ef">uint64_t</span> h;

            nextde <span style="color:#f92672">=</span> de<span style="color:#f92672">-&gt;</span>next;
            <span style="color:#75715e">/* Get the index in the new hash table */</span>
            h <span style="color:#f92672">=</span> dictHashKey(d, de<span style="color:#f92672">-&gt;</span>key) <span style="color:#f92672">&amp;</span> d<span style="color:#f92672">-&gt;</span>ht[<span style="color:#ae81ff">1</span>].sizemask;
            de<span style="color:#f92672">-&gt;</span>next <span style="color:#f92672">=</span> d<span style="color:#f92672">-&gt;</span>ht[<span style="color:#ae81ff">1</span>].table[h];
            d<span style="color:#f92672">-&gt;</span>ht[<span style="color:#ae81ff">1</span>].table[h] <span style="color:#f92672">=</span> de;
            d<span style="color:#f92672">-&gt;</span>ht[<span style="color:#ae81ff">0</span>].used<span style="color:#f92672">--</span>;
            d<span style="color:#f92672">-&gt;</span>ht[<span style="color:#ae81ff">1</span>].used<span style="color:#f92672">++</span>;
            de <span style="color:#f92672">=</span> nextde;
        }
        d<span style="color:#f92672">-&gt;</span>ht[<span style="color:#ae81ff">0</span>].table[d<span style="color:#f92672">-&gt;</span>rehashidx] <span style="color:#f92672">=</span> NULL;
        d<span style="color:#f92672">-&gt;</span>rehashidx<span style="color:#f92672">++</span>;
    }

    <span style="color:#75715e">/* Check if we already rehashed the whole table... */</span>
    <span style="color:#66d9ef">if</span> (d<span style="color:#f92672">-&gt;</span>ht[<span style="color:#ae81ff">0</span>].used <span style="color:#f92672">==</span> <span style="color:#ae81ff">0</span>) {
        zfree(d<span style="color:#f92672">-&gt;</span>ht[<span style="color:#ae81ff">0</span>].table);
        d<span style="color:#f92672">-&gt;</span>ht[<span style="color:#ae81ff">0</span>] <span style="color:#f92672">=</span> d<span style="color:#f92672">-&gt;</span>ht[<span style="color:#ae81ff">1</span>];
        _dictReset(<span style="color:#f92672">&amp;</span>d<span style="color:#f92672">-&gt;</span>ht[<span style="color:#ae81ff">1</span>]);
        d<span style="color:#f92672">-&gt;</span>rehashidx <span style="color:#f92672">=</span> <span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>;
        <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0</span>;
    }

    <span style="color:#75715e">/* More to rehash... */</span>
    <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">1</span>;
}
</code></pre></div><h3 id="跳跃表">跳跃表</h3>
<p>是有序集合的底层实现之一。</p>
<p>跳跃表是基于多指针有序链表实现的，可以看成多个有序链表。</p>
<div align="center"> <img src="https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/beba612e-dc5b-4fc2-869d-0b23408ac90a.png" width="600px"/> </div><br>
<p>在查找时，从上层指针开始查找，找到对应的区间之后再到下一层去查找。下图演示了查找 22 的过程。</p>
<div align="center"> <img src="https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/0ea37ee2-c224-4c79-b895-e131c6805c40.png" width="600px"/> </div><br>
<p>与红黑树等平衡树相比，跳跃表具有以下优点：</p>
<ul>
<li>插入速度非常快速，因为不需要进行旋转等操作来维护平衡性；</li>
<li>更容易实现；</li>
<li>支持无锁操作。</li>
</ul>
<h2 id="四使用场景">四、使用场景</h2>
<h3 id="计数器">计数器</h3>
<p>可以对 String 进行自增自减运算，从而实现计数器功能。</p>
<p>Redis 这种内存型数据库的读写性能非常高，很适合存储频繁读写的计数量。</p>
<h3 id="缓存">缓存</h3>
<p>将热点数据放到内存中，设置内存的最大使用量以及淘汰策略来保证缓存的命中率。</p>
<h3 id="查找表">查找表</h3>
<p>例如 DNS 记录就很适合使用 Redis 进行存储。</p>
<p>查找表和缓存类似，也是利用了 Redis 快速的查找特性。但是查找表的内容不能失效，而缓存的内容可以失效，因为缓存不作为可靠的数据来源。</p>
<h3 id="消息队列">消息队列</h3>
<p>List 是一个双向链表，可以通过 lpush 和 rpop 写入和读取消息</p>
<p>不过最好使用 Kafka、RabbitMQ 等消息中间件。</p>
<h3 id="会话缓存">会话缓存</h3>
<p>可以使用 Redis 来统一存储多台应用服务器的会话信息。</p>
<p>当应用服务器不再存储用户的会话信息，也就不再具有状态，一个用户可以请求任意一个应用服务器，从而更容易实现高可用性以及可伸缩性。</p>
<h3 id="分布式锁实现">分布式锁实现</h3>
<p>在分布式场景下，无法使用单机环境下的锁来对多个节点上的进程进行同步。</p>
<p>可以使用 Redis 自带的 SETNX 命令实现分布式锁，除此之外，还可以使用官方提供的 RedLock 分布式锁实现。</p>
<h3 id="其它">其它</h3>
<p>Set 可以实现交集、并集等操作，从而实现共同好友等功能。</p>
<p>ZSet 可以实现有序性操作，从而实现排行榜等功能。</p>
<h2 id="五redis-与-memcached">五、Redis 与 Memcached</h2>
<p>两者都是非关系型内存键值数据库，主要有以下不同：</p>
<h3 id="数据类型">数据类型</h3>
<p>Memcached 仅支持字符串类型，而 Redis 支持五种不同的数据类型，可以更灵活地解决问题。</p>
<h3 id="数据持久化">数据持久化</h3>
<p>Redis 支持两种持久化策略：RDB 快照和 AOF 日志，而 Memcached 不支持持久化。</p>
<h3 id="分布式">分布式</h3>
<p>Memcached 不支持分布式，只能通过在客户端使用一致性哈希来实现分布式存储，这种方式在存储和查询时都需要先在客户端计算一次数据所在的节点。</p>
<p>Redis Cluster 实现了分布式的支持。</p>
<h3 id="内存管理机制">内存管理机制</h3>
<ul>
<li>
<p>在 Redis 中，并不是所有数据都一直存储在内存中，可以将一些很久没用的 value 交换到磁盘，而 Memcached 的数据则会一直在内存中。</p>
</li>
<li>
<p>Memcached 将内存分割成特定长度的块来存储数据，以完全解决内存碎片的问题。但是这种方式会使得内存的利用率不高，例如块的大小为 128 bytes，只存储 100 bytes 的数据，那么剩下的 28 bytes 就浪费掉了。</p>
</li>
</ul>
<h2 id="六键的过期时间">六、键的过期时间</h2>
<p>Redis 可以为每个键设置过期时间，当键过期时，会自动删除该键。</p>
<p>对于散列表这种容器，只能为整个键设置过期时间（整个散列表），而不能为键里面的单个元素设置过期时间。</p>
<h2 id="七数据淘汰策略">七、数据淘汰策略</h2>
<p>可以设置内存最大使用量，当内存使用量超出时，会施行数据淘汰策略。</p>
<p>Redis 具体有 6 种淘汰策略：</p>
<table>
<thead>
<tr>
<th style="text-align:center">策略</th>
<th style="text-align:center">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">volatile-lru</td>
<td style="text-align:center">从已设置过期时间的数据集中挑选最近最少使用的数据淘汰</td>
</tr>
<tr>
<td style="text-align:center">volatile-ttl</td>
<td style="text-align:center">从已设置过期时间的数据集中挑选将要过期的数据淘汰</td>
</tr>
<tr>
<td style="text-align:center">volatile-random</td>
<td style="text-align:center">从已设置过期时间的数据集中任意选择数据淘汰</td>
</tr>
<tr>
<td style="text-align:center">allkeys-lru</td>
<td style="text-align:center">从所有数据集中挑选最近最少使用的数据淘汰</td>
</tr>
<tr>
<td style="text-align:center">allkeys-random</td>
<td style="text-align:center">从所有数据集中任意选择数据进行淘汰</td>
</tr>
<tr>
<td style="text-align:center">noeviction</td>
<td style="text-align:center">禁止驱逐数据</td>
</tr>
</tbody>
</table>
<p>作为内存数据库，出于对性能和内存消耗的考虑，Redis 的淘汰算法实际实现上并非针对所有 key，而是抽样一小部分并且从中选出被淘汰的 key。</p>
<p>使用 Redis 缓存数据时，为了提高缓存命中率，需要保证缓存数据都是热点数据。可以将内存最大使用量设置为热点数据占用的内存量，然后启用 allkeys-lru 淘汰策略，将最近最少使用的数据淘汰。</p>
<p>Redis 4.0 引入了 volatile-lfu 和 allkeys-lfu 淘汰策略，LFU 策略通过统计访问频率，将访问频率最少的键值对淘汰。</p>
<h2 id="八持久化">八、持久化</h2>
<p>Redis 是内存型数据库，为了保证数据在断电后不会丢失，需要将内存中的数据持久化到硬盘上。</p>
<h3 id="rdb-持久化">RDB 持久化</h3>
<p>将某个时间点的所有数据都存放到硬盘上。</p>
<p>可以将快照复制到其它服务器从而创建具有相同数据的服务器副本。</p>
<p>如果系统发生故障，将会丢失最后一次创建快照之后的数据。</p>
<p>如果数据量很大，保存快照的时间会很长。</p>
<h3 id="aof-持久化">AOF 持久化</h3>
<p>将写命令添加到 AOF 文件（Append Only File）的末尾。</p>
<p>使用 AOF 持久化需要设置同步选项，从而确保写命令同步到磁盘文件上的时机。这是因为对文件进行写入并不会马上将内容同步到磁盘上，而是先存储到缓冲区，然后由操作系统决定什么时候同步到磁盘。有以下同步选项：</p>
<table>
<thead>
<tr>
<th style="text-align:center">选项</th>
<th style="text-align:center">同步频率</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">always</td>
<td style="text-align:center">每个写命令都同步</td>
</tr>
<tr>
<td style="text-align:center">everysec</td>
<td style="text-align:center">每秒同步一次</td>
</tr>
<tr>
<td style="text-align:center">no</td>
<td style="text-align:center">让操作系统来决定何时同步</td>
</tr>
</tbody>
</table>
<ul>
<li>always 选项会严重减低服务器的性能；</li>
<li>everysec 选项比较合适，可以保证系统崩溃时只会丢失一秒左右的数据，并且 Redis 每秒执行一次同步对服务器性能几乎没有任何影响；</li>
<li>no 选项并不能给服务器性能带来多大的提升，而且也会增加系统崩溃时数据丢失的数量。</li>
</ul>
<p>随着服务器写请求的增多，AOF 文件会越来越大。Redis 提供了一种将 AOF 重写的特性，能够去除 AOF 文件中的冗余写命令。</p>
<h2 id="九事务">九、事务</h2>
<p>一个事务包含了多个命令，服务器在执行事务期间，不会改去执行其它客户端的命令请求。</p>
<p>事务中的多个命令被一次性发送给服务器，而不是一条一条发送，这种方式被称为流水线，它可以减少客户端与服务器之间的网络通信次数从而提升性能。</p>
<p>Redis 最简单的事务实现方式是使用 MULTI 和 EXEC 命令将事务操作包围起来。</p>
<h2 id="十事件">十、事件</h2>
<p>Redis 服务器是一个事件驱动程序。</p>
<h3 id="文件事件">文件事件</h3>
<p>服务器通过套接字与客户端或者其它服务器进行通信，文件事件就是对套接字操作的抽象。</p>
<p>Redis 基于 Reactor 模式开发了自己的网络事件处理器，使用 I/O 多路复用程序来同时监听多个套接字，并将到达的事件传送给文件事件分派器，分派器会根据套接字产生的事件类型调用相应的事件处理器。</p>
<div align="center"> <img src="https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/9ea86eb5-000a-4281-b948-7b567bd6f1d8.png" width=""/> </div><br>
<h3 id="时间事件">时间事件</h3>
<p>服务器有一些操作需要在给定的时间点执行，时间事件是对这类定时操作的抽象。</p>
<p>时间事件又分为：</p>
<ul>
<li>定时事件：是让一段程序在指定的时间之内执行一次；</li>
<li>周期性事件：是让一段程序每隔指定时间就执行一次。</li>
</ul>
<p>Redis 将所有时间事件都放在一个无序链表中，通过遍历整个链表查找出已到达的时间事件，并调用相应的事件处理器。</p>
<h3 id="事件的调度与执行">事件的调度与执行</h3>
<p>服务器需要不断监听文件事件的套接字才能得到待处理的文件事件，但是不能一直监听，否则时间事件无法在规定的时间内执行，因此监听时间应该根据距离现在最近的时间事件来决定。</p>
<p>事件调度与执行由 aeProcessEvents 函数负责，伪代码如下：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">aeProcessEvents</span>():
    <span style="color:#75715e"># 获取到达时间离当前时间最接近的时间事件</span>
    time_event <span style="color:#f92672">=</span> aeSearchNearestTimer()
    <span style="color:#75715e"># 计算最接近的时间事件距离到达还有多少毫秒</span>
    remaind_ms <span style="color:#f92672">=</span> time_event<span style="color:#f92672">.</span>when <span style="color:#f92672">-</span> unix_ts_now()
    <span style="color:#75715e"># 如果事件已到达，那么 remaind_ms 的值可能为负数，将它设为 0</span>
    <span style="color:#66d9ef">if</span> remaind_ms <span style="color:#f92672">&lt;</span> <span style="color:#ae81ff">0</span>:
        remaind_ms <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>
    <span style="color:#75715e"># 根据 remaind_ms 的值，创建 timeval</span>
    timeval <span style="color:#f92672">=</span> create_timeval_with_ms(remaind_ms)
    <span style="color:#75715e"># 阻塞并等待文件事件产生，最大阻塞时间由传入的 timeval 决定</span>
    aeApiPoll(timeval)
    <span style="color:#75715e"># 处理所有已产生的文件事件</span>
    procesFileEvents()
    <span style="color:#75715e"># 处理所有已到达的时间事件</span>
    processTimeEvents()
</code></pre></div><p>将 aeProcessEvents 函数置于一个循环里面，加上初始化和清理函数，就构成了 Redis 服务器的主函数，伪代码如下：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">main</span>():
    <span style="color:#75715e"># 初始化服务器</span>
    init_server()
    <span style="color:#75715e"># 一直处理事件，直到服务器关闭为止</span>
    <span style="color:#66d9ef">while</span> server_is_not_shutdown():
        aeProcessEvents()
    <span style="color:#75715e"># 服务器关闭，执行清理操作</span>
    clean_server()
</code></pre></div><p>从事件处理的角度来看，服务器运行流程如下：</p>
<div align="center"> <img src="https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/c0a9fa91-da2e-4892-8c9f-80206a6f7047.png" width="350"/> </div><br>
<h2 id="十一复制">十一、复制</h2>
<p>通过使用 slaveof host port 命令来让一个服务器成为另一个服务器的从服务器。</p>
<p>一个从服务器只能有一个主服务器，并且不支持主主复制。</p>
<h3 id="连接过程">连接过程</h3>
<ol>
<li>
<p>主服务器创建快照文件，发送给从服务器，并在发送期间使用缓冲区记录执行的写命令。快照文件发送完毕之后，开始向从服务器发送存储在缓冲区中的写命令；</p>
</li>
<li>
<p>从服务器丢弃所有旧数据，载入主服务器发来的快照文件，之后从服务器开始接受主服务器发来的写命令；</p>
</li>
<li>
<p>主服务器每执行一次写命令，就向从服务器发送相同的写命令。</p>
</li>
</ol>
<h3 id="主从链">主从链</h3>
<p>随着负载不断上升，主服务器可能无法很快地更新所有从服务器，或者重新连接和重新同步从服务器将导致系统超载。为了解决这个问题，可以创建一个中间层来分担主服务器的复制工作。中间层的服务器是最上层服务器的从服务器，又是最下层服务器的主服务器。</p>
<div align="center"> <img src="https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/395a9e83-b1a1-4a1d-b170-d081e7bb5bab.png" width="600"/> </div><br>
<h2 id="十二sentinel">十二、Sentinel</h2>
<p>Sentinel（哨兵）可以监听集群中的服务器，并在主服务器进入下线状态时，自动从从服务器中选举出新的主服务器。</p>
<h2 id="十三分片">十三、分片</h2>
<p>分片是将数据划分为多个部分的方法，可以将数据存储到多台机器里面，这种方法在解决某些问题时可以获得线性级别的性能提升。</p>
<p>假设有 4 个 Redis 实例 R0，R1，R2，R3，还有很多表示用户的键 user:1，user:2，&hellip; ，有不同的方式来选择一个指定的键存储在哪个实例中。</p>
<ul>
<li>最简单的方式是范围分片，例如用户 id 从 0~1000 的存储到实例 R0 中，用户 id 从 1001~2000 的存储到实例 R1 中，等等。但是这样需要维护一张映射范围表，维护操作代价很高。</li>
<li>还有一种方式是哈希分片，使用 CRC32 哈希函数将键转换为一个数字，再对实例数量求模就能知道应该存储的实例。</li>
</ul>
<p>根据执行分片的位置，可以分为三种分片方式：</p>
<ul>
<li>客户端分片：客户端使用一致性哈希等算法决定键应当分布到哪个节点。</li>
<li>代理分片：将客户端请求发送到代理上，由代理转发请求到正确的节点上。</li>
<li>服务器分片：Redis Cluster。</li>
</ul>
<h2 id="十四一个简单的论坛系统分析">十四、一个简单的论坛系统分析</h2>
<p>该论坛系统功能如下：</p>
<ul>
<li>可以发布文章；</li>
<li>可以对文章进行点赞；</li>
<li>在首页可以按文章的发布时间或者文章的点赞数进行排序显示。</li>
</ul>
<h3 id="文章信息">文章信息</h3>
<p>文章包括标题、作者、赞数等信息，在关系型数据库中很容易构建一张表来存储这些信息，在 Redis 中可以使用 HASH 来存储每种信息以及其对应的值的映射。</p>
<p>Redis 没有关系型数据库中的表这一概念来将同种类型的数据存放在一起，而是使用命名空间的方式来实现这一功能。键名的前面部分存储命名空间，后面部分的内容存储 ID，通常使用 : 来进行分隔。例如下面的 HASH 的键名为 article:92617，其中 article 为命名空间，ID 为 92617。</p>
<div align="center"> <img src="https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/7c54de21-e2ff-402e-bc42-4037de1c1592.png" width="400"/> </div><br>
<h3 id="点赞功能">点赞功能</h3>
<p>当有用户为一篇文章点赞时，除了要对该文章的 votes 字段进行加 1 操作，还必须记录该用户已经对该文章进行了点赞，防止用户点赞次数超过 1。可以建立文章的已投票用户集合来进行记录。</p>
<p>为了节约内存，规定一篇文章发布满一周之后，就不能再对它进行投票，而文章的已投票集合也会被删除，可以为文章的已投票集合设置一个一周的过期时间就能实现这个规定。</p>
<div align="center"> <img src="https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/485fdf34-ccf8-4185-97c6-17374ee719a0.png" width="400"/> </div><br>
<h3 id="对文章进行排序">对文章进行排序</h3>
<p>为了按发布时间和点赞数进行排序，可以建立一个文章发布时间的有序集合和一个文章点赞数的有序集合。（下图中的 score 就是这里所说的点赞数；下面所示的有序集合分值并不直接是时间和点赞数，而是根据时间和点赞数间接计算出来的）</p>
<div align="center"> <img src="https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/f7d170a3-e446-4a64-ac2d-cb95028f81a8.png" width="800"/> </div><br>
<h2 id="参考资料">参考资料</h2>
<ul>
<li>Carlson J L. Redis in Action[J]. Media.johnwiley.com.au, 2013.</li>
<li><a href="http://redisbook.com/index.html">黄健宏. Redis 设计与实现 [M]. 机械工业出版社, 2014.</a></li>
<li><a href="https://redislabs.com/ebook/foreword/">REDIS IN ACTION</a></li>
<li><a href="http://ticki.github.io/blog/skip-lists-done-right/">Skip Lists: Done Right</a></li>
<li><a href="http://www.cnblogs.com/loveincode/p/7411911.html">论述 Redis 和 Memcached 的差异</a></li>
<li><a href="http://wiki.jikexueyuan.com/project/redis-guide">Redis 3.0 中文版- 分片</a></li>
<li><a href="http://www.scienjus.com/redis-use-case/">Redis 应用场景</a></li>
<li><a href="https://redis.io/topics/lru-cache">Using Redis as an LRU cache</a></li>
</ul>

        
        ]]>
      </description>
    </item>
    
    
    
    <item>
      <title>【转载】SQL 练习</title>
      <link>/post/2021/12/22/%E8%BD%AC%E8%BD%BDsql-%E7%BB%83%E4%B9%A0/</link>
      <pubDate>Wed, 22 Dec 2021 23:32:38 +0800</pubDate>
      <author>糸色生</author>
      <guid>/post/2021/12/22/%E8%BD%AC%E8%BD%BDsql-%E7%BB%83%E4%B9%A0/</guid>
      <description>
        <![CDATA[
        <h1 id="sql-练习">SQL 练习</h1>
<!-- GFM-TOC -->
<ul>
<li><a href="#sql-%E7%BB%83%E4%B9%A0">SQL 练习</a>
<ul>
<li><a href="#595-big-countries">595. Big Countries</a></li>
<li><a href="#627-swap-salary">627. Swap Salary</a></li>
<li><a href="#620-not-boring-movies">620. Not Boring Movies</a></li>
<li><a href="#596-classes-more-than-5-students">596. Classes More Than 5 Students</a></li>
<li><a href="#182-duplicate-emails">182. Duplicate Emails</a></li>
<li><a href="#196-delete-duplicate-emails">196. Delete Duplicate Emails</a></li>
<li><a href="#175-combine-two-tables">175. Combine Two Tables</a></li>
<li><a href="#181-employees-earning-more-than-their-managers">181. Employees Earning More Than Their Managers</a></li>
<li><a href="#183-customers-who-never-order">183. Customers Who Never Order</a></li>
<li><a href="#184-department-highest-salary">184. Department Highest Salary</a></li>
<li><a href="#176-second-highest-salary">176. Second Highest Salary</a></li>
<li><a href="#177-nth-highest-salary">177. Nth Highest Salary</a></li>
<li><a href="#178-rank-scores">178. Rank Scores</a></li>
<li><a href="#180-consecutive-numbers">180. Consecutive Numbers</a></li>
<li><a href="#626-exchange-seats">626. Exchange Seats</a></li>
</ul>
</li>
</ul>
<!-- GFM-TOC -->
<h2 id="595-big-countries">595. Big Countries</h2>
<p><a href="https://leetcode.com/problems/big-countries/description/">https://leetcode.com/problems/big-countries/description/</a></p>
<h3 id="description">Description</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-html" data-lang="html">+-----------------+------------+------------+--------------+---------------+
| name            | continent  | area       | population   | gdp           |
+-----------------+------------+------------+--------------+---------------+
| Afghanistan     | Asia       | 652230     | 25500100     | 20343000      |
| Albania         | Europe     | 28748      | 2831741      | 12960000      |
| Algeria         | Africa     | 2381741    | 37100000     | 188681000     |
| Andorra         | Europe     | 468        | 78115        | 3712000       |
| Angola          | Africa     | 1246700    | 20609294     | 100990000     |
+-----------------+------------+------------+--------------+---------------+
</code></pre></div><p>查找面积超过 3,000,000 或者人口数超过 25,000,000 的国家。</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-html" data-lang="html">+--------------+-------------+--------------+
| name         | population  | area         |
+--------------+-------------+--------------+
| Afghanistan  | 25500100    | 652230       |
| Algeria      | 37100000    | 2381741      |
+--------------+-------------+--------------+
</code></pre></div><h3 id="solution">Solution</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sql" data-lang="sql"><span style="color:#66d9ef">SELECT</span> name,
    population,
    area
<span style="color:#66d9ef">FROM</span>
    World
<span style="color:#66d9ef">WHERE</span>
    area <span style="color:#f92672">&gt;</span> <span style="color:#ae81ff">3000000</span>
    <span style="color:#66d9ef">OR</span> population <span style="color:#f92672">&gt;</span> <span style="color:#ae81ff">25000000</span>;
</code></pre></div><h3 id="sql-schema">SQL Schema</h3>
<p>SQL Schema 用于在本地环境下创建表结构并导入数据，从而方便在本地环境调试。</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sql" data-lang="sql"><span style="color:#66d9ef">DROP</span> <span style="color:#66d9ef">TABLE</span>
<span style="color:#66d9ef">IF</span>
    <span style="color:#66d9ef">EXISTS</span> World;
<span style="color:#66d9ef">CREATE</span> <span style="color:#66d9ef">TABLE</span> World ( NAME VARCHAR ( <span style="color:#ae81ff">255</span> ), continent VARCHAR ( <span style="color:#ae81ff">255</span> ), area INT, population INT, gdp INT );
<span style="color:#66d9ef">INSERT</span> <span style="color:#66d9ef">INTO</span> World ( NAME, continent, area, population, gdp )
<span style="color:#66d9ef">VALUES</span>
    ( <span style="color:#e6db74">&#39;Afghanistan&#39;</span>, <span style="color:#e6db74">&#39;Asia&#39;</span>, <span style="color:#e6db74">&#39;652230&#39;</span>, <span style="color:#e6db74">&#39;25500100&#39;</span>, <span style="color:#e6db74">&#39;203430000&#39;</span> ),
    ( <span style="color:#e6db74">&#39;Albania&#39;</span>, <span style="color:#e6db74">&#39;Europe&#39;</span>, <span style="color:#e6db74">&#39;28748&#39;</span>, <span style="color:#e6db74">&#39;2831741&#39;</span>, <span style="color:#e6db74">&#39;129600000&#39;</span> ),
    ( <span style="color:#e6db74">&#39;Algeria&#39;</span>, <span style="color:#e6db74">&#39;Africa&#39;</span>, <span style="color:#e6db74">&#39;2381741&#39;</span>, <span style="color:#e6db74">&#39;37100000&#39;</span>, <span style="color:#e6db74">&#39;1886810000&#39;</span> ),
    ( <span style="color:#e6db74">&#39;Andorra&#39;</span>, <span style="color:#e6db74">&#39;Europe&#39;</span>, <span style="color:#e6db74">&#39;468&#39;</span>, <span style="color:#e6db74">&#39;78115&#39;</span>, <span style="color:#e6db74">&#39;37120000&#39;</span> ),
    ( <span style="color:#e6db74">&#39;Angola&#39;</span>, <span style="color:#e6db74">&#39;Africa&#39;</span>, <span style="color:#e6db74">&#39;1246700&#39;</span>, <span style="color:#e6db74">&#39;20609294&#39;</span>, <span style="color:#e6db74">&#39;1009900000&#39;</span> );
</code></pre></div><h2 id="627-swap-salary">627. Swap Salary</h2>
<p><a href="https://leetcode.com/problems/swap-salary/description/">https://leetcode.com/problems/swap-salary/description/</a></p>
<h3 id="description-1">Description</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-html" data-lang="html">| id | name | sex | salary |
|----|------|-----|--------|
| 1  | A    | m   | 2500   |
| 2  | B    | f   | 1500   |
| 3  | C    | m   | 5500   |
| 4  | D    | f   | 500    |
</code></pre></div><p>只用一个 SQL 查询，将 sex 字段反转。</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-html" data-lang="html">| id | name | sex | salary |
|----|------|-----|--------|
| 1  | A    | f   | 2500   |
| 2  | B    | m   | 1500   |
| 3  | C    | f   | 5500   |
| 4  | D    | m   | 500    |
</code></pre></div><h3 id="solution-1">Solution</h3>
<p>两个相等的数异或的结果为 0，而 0 与任何一个数异或的结果为这个数。</p>
<p>sex  字段只有两个取值：&lsquo;f&rsquo; 和 &rsquo;m'，并且有以下规律：</p>
<pre tabindex="0"><code>'f' ^ ('m' ^ 'f') = 'm' ^ ('f' ^ 'f') = 'm'
'm' ^ ('m' ^ 'f') = 'f' ^ ('m' ^ 'm') = 'f'
</code></pre><p>因此将 sex 字段和 &rsquo;m' ^ &lsquo;f&rsquo; 进行异或操作，最后就能反转 sex 字段。</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sql" data-lang="sql"><span style="color:#66d9ef">UPDATE</span> salary
<span style="color:#66d9ef">SET</span> sex <span style="color:#f92672">=</span> CHAR ( ASCII(sex) <span style="color:#f92672">^</span> ASCII( <span style="color:#e6db74">&#39;m&#39;</span> ) <span style="color:#f92672">^</span> ASCII( <span style="color:#e6db74">&#39;f&#39;</span> ) );
</code></pre></div><h3 id="sql-schema-1">SQL Schema</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sql" data-lang="sql"><span style="color:#66d9ef">DROP</span> <span style="color:#66d9ef">TABLE</span>
<span style="color:#66d9ef">IF</span>
    <span style="color:#66d9ef">EXISTS</span> salary;
<span style="color:#66d9ef">CREATE</span> <span style="color:#66d9ef">TABLE</span> salary ( id INT, NAME VARCHAR ( <span style="color:#ae81ff">100</span> ), sex CHAR ( <span style="color:#ae81ff">1</span> ), salary INT );
<span style="color:#66d9ef">INSERT</span> <span style="color:#66d9ef">INTO</span> salary ( id, NAME, sex, salary )
<span style="color:#66d9ef">VALUES</span>
    ( <span style="color:#e6db74">&#39;1&#39;</span>, <span style="color:#e6db74">&#39;A&#39;</span>, <span style="color:#e6db74">&#39;m&#39;</span>, <span style="color:#e6db74">&#39;2500&#39;</span> ),
    ( <span style="color:#e6db74">&#39;2&#39;</span>, <span style="color:#e6db74">&#39;B&#39;</span>, <span style="color:#e6db74">&#39;f&#39;</span>, <span style="color:#e6db74">&#39;1500&#39;</span> ),
    ( <span style="color:#e6db74">&#39;3&#39;</span>, <span style="color:#e6db74">&#39;C&#39;</span>, <span style="color:#e6db74">&#39;m&#39;</span>, <span style="color:#e6db74">&#39;5500&#39;</span> ),
    ( <span style="color:#e6db74">&#39;4&#39;</span>, <span style="color:#e6db74">&#39;D&#39;</span>, <span style="color:#e6db74">&#39;f&#39;</span>, <span style="color:#e6db74">&#39;500&#39;</span> );
</code></pre></div><h2 id="620-not-boring-movies">620. Not Boring Movies</h2>
<p><a href="https://leetcode.com/problems/not-boring-movies/description/">https://leetcode.com/problems/not-boring-movies/description/</a></p>
<h3 id="description-2">Description</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-html" data-lang="html">+---------+-----------+--------------+-----------+
|   id    | movie     |  description |  rating   |
+---------+-----------+--------------+-----------+
|   1     | War       |   great 3D   |   8.9     |
|   2     | Science   |   fiction    |   8.5     |
|   3     | irish     |   boring     |   6.2     |
|   4     | Ice song  |   Fantacy    |   8.6     |
|   5     | House card|   Interesting|   9.1     |
+---------+-----------+--------------+-----------+
</code></pre></div><p>查找 id 为奇数，并且 description 不是 boring 的电影，按 rating 降序。</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-html" data-lang="html">+---------+-----------+--------------+-----------+
|   id    | movie     |  description |  rating   |
+---------+-----------+--------------+-----------+
|   5     | House card|   Interesting|   9.1     |
|   1     | War       |   great 3D   |   8.9     |
+---------+-----------+--------------+-----------+
</code></pre></div><h3 id="solution-2">Solution</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sql" data-lang="sql"><span style="color:#66d9ef">SELECT</span>
    <span style="color:#f92672">*</span>
<span style="color:#66d9ef">FROM</span>
    cinema
<span style="color:#66d9ef">WHERE</span>
    id <span style="color:#f92672">%</span> <span style="color:#ae81ff">2</span> <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>
    <span style="color:#66d9ef">AND</span> description <span style="color:#f92672">!=</span> <span style="color:#e6db74">&#39;boring&#39;</span>
<span style="color:#66d9ef">ORDER</span> <span style="color:#66d9ef">BY</span>
    rating <span style="color:#66d9ef">DESC</span>;
</code></pre></div><h3 id="sql-schema-2">SQL Schema</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sql" data-lang="sql"><span style="color:#66d9ef">DROP</span> <span style="color:#66d9ef">TABLE</span>
<span style="color:#66d9ef">IF</span>
    <span style="color:#66d9ef">EXISTS</span> cinema;
<span style="color:#66d9ef">CREATE</span> <span style="color:#66d9ef">TABLE</span> cinema ( id INT, movie VARCHAR ( <span style="color:#ae81ff">255</span> ), description VARCHAR ( <span style="color:#ae81ff">255</span> ), rating FLOAT ( <span style="color:#ae81ff">2</span>, <span style="color:#ae81ff">1</span> ) );
<span style="color:#66d9ef">INSERT</span> <span style="color:#66d9ef">INTO</span> cinema ( id, movie, description, rating )
<span style="color:#66d9ef">VALUES</span>
    ( <span style="color:#ae81ff">1</span>, <span style="color:#e6db74">&#39;War&#39;</span>, <span style="color:#e6db74">&#39;great 3D&#39;</span>, <span style="color:#ae81ff">8</span>.<span style="color:#ae81ff">9</span> ),
    ( <span style="color:#ae81ff">2</span>, <span style="color:#e6db74">&#39;Science&#39;</span>, <span style="color:#e6db74">&#39;fiction&#39;</span>, <span style="color:#ae81ff">8</span>.<span style="color:#ae81ff">5</span> ),
    ( <span style="color:#ae81ff">3</span>, <span style="color:#e6db74">&#39;irish&#39;</span>, <span style="color:#e6db74">&#39;boring&#39;</span>, <span style="color:#ae81ff">6</span>.<span style="color:#ae81ff">2</span> ),
    ( <span style="color:#ae81ff">4</span>, <span style="color:#e6db74">&#39;Ice song&#39;</span>, <span style="color:#e6db74">&#39;Fantacy&#39;</span>, <span style="color:#ae81ff">8</span>.<span style="color:#ae81ff">6</span> ),
    ( <span style="color:#ae81ff">5</span>, <span style="color:#e6db74">&#39;House card&#39;</span>, <span style="color:#e6db74">&#39;Interesting&#39;</span>, <span style="color:#ae81ff">9</span>.<span style="color:#ae81ff">1</span> );
</code></pre></div><h2 id="596-classes-more-than-5-students">596. Classes More Than 5 Students</h2>
<p><a href="https://leetcode.com/problems/classes-more-than-5-students/description/">https://leetcode.com/problems/classes-more-than-5-students/description/</a></p>
<h3 id="description-3">Description</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-html" data-lang="html">+---------+------------+
| student | class      |
+---------+------------+
| A       | Math       |
| B       | English    |
| C       | Math       |
| D       | Biology    |
| E       | Math       |
| F       | Computer   |
| G       | Math       |
| H       | Math       |
| I       | Math       |
+---------+------------+
</code></pre></div><p>查找有五名及以上 student 的 class。</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-html" data-lang="html">+---------+
| class   |
+---------+
| Math    |
+---------+
</code></pre></div><h3 id="solution-3">Solution</h3>
<p>对 class 列进行分组之后，再使用 count 汇总函数统计每个分组的记录个数，之后使用 HAVING 进行筛选。HAVING  针对分组进行筛选，而 WHERE 针对每个记录（行）进行筛选。</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sql" data-lang="sql"><span style="color:#66d9ef">SELECT</span>
    <span style="color:#66d9ef">class</span>
<span style="color:#66d9ef">FROM</span>
    courses
<span style="color:#66d9ef">GROUP</span> <span style="color:#66d9ef">BY</span>
    <span style="color:#66d9ef">class</span>
<span style="color:#66d9ef">HAVING</span>
    <span style="color:#66d9ef">count</span>( <span style="color:#66d9ef">DISTINCT</span> student ) <span style="color:#f92672">&gt;=</span> <span style="color:#ae81ff">5</span>;
</code></pre></div><h3 id="sql-schema-3">SQL Schema</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sql" data-lang="sql"><span style="color:#66d9ef">DROP</span> <span style="color:#66d9ef">TABLE</span>
<span style="color:#66d9ef">IF</span>
    <span style="color:#66d9ef">EXISTS</span> courses;
<span style="color:#66d9ef">CREATE</span> <span style="color:#66d9ef">TABLE</span> courses ( student VARCHAR ( <span style="color:#ae81ff">255</span> ), <span style="color:#66d9ef">class</span> VARCHAR ( <span style="color:#ae81ff">255</span> ) );
<span style="color:#66d9ef">INSERT</span> <span style="color:#66d9ef">INTO</span> courses ( student, <span style="color:#66d9ef">class</span> )
<span style="color:#66d9ef">VALUES</span>
    ( <span style="color:#e6db74">&#39;A&#39;</span>, <span style="color:#e6db74">&#39;Math&#39;</span> ),
    ( <span style="color:#e6db74">&#39;B&#39;</span>, <span style="color:#e6db74">&#39;English&#39;</span> ),
    ( <span style="color:#e6db74">&#39;C&#39;</span>, <span style="color:#e6db74">&#39;Math&#39;</span> ),
    ( <span style="color:#e6db74">&#39;D&#39;</span>, <span style="color:#e6db74">&#39;Biology&#39;</span> ),
    ( <span style="color:#e6db74">&#39;E&#39;</span>, <span style="color:#e6db74">&#39;Math&#39;</span> ),
    ( <span style="color:#e6db74">&#39;F&#39;</span>, <span style="color:#e6db74">&#39;Computer&#39;</span> ),
    ( <span style="color:#e6db74">&#39;G&#39;</span>, <span style="color:#e6db74">&#39;Math&#39;</span> ),
    ( <span style="color:#e6db74">&#39;H&#39;</span>, <span style="color:#e6db74">&#39;Math&#39;</span> ),
    ( <span style="color:#e6db74">&#39;I&#39;</span>, <span style="color:#e6db74">&#39;Math&#39;</span> );
</code></pre></div><h2 id="182-duplicate-emails">182. Duplicate Emails</h2>
<p><a href="https://leetcode.com/problems/duplicate-emails/description/">https://leetcode.com/problems/duplicate-emails/description/</a></p>
<h3 id="description-4">Description</h3>
<p>邮件地址表：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-html" data-lang="html">+----+---------+
| Id | Email   |
+----+---------+
| 1  | a@b.com |
| 2  | c@d.com |
| 3  | a@b.com |
+----+---------+
</code></pre></div><p>查找重复的邮件地址：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-html" data-lang="html">+---------+
| Email   |
+---------+
| a@b.com |
+---------+
</code></pre></div><h3 id="solution-4">Solution</h3>
<p>对 Email 进行分组，如果并使用 COUNT 进行计数统计，结果大于等于 2 的表示 Email  重复。</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sql" data-lang="sql"><span style="color:#66d9ef">SELECT</span>
    Email
<span style="color:#66d9ef">FROM</span>
    Person
<span style="color:#66d9ef">GROUP</span> <span style="color:#66d9ef">BY</span>
    Email
<span style="color:#66d9ef">HAVING</span>
    <span style="color:#66d9ef">COUNT</span>( <span style="color:#f92672">*</span> ) <span style="color:#f92672">&gt;=</span> <span style="color:#ae81ff">2</span>;
</code></pre></div><h3 id="sql-schema-4">SQL Schema</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sql" data-lang="sql"><span style="color:#66d9ef">DROP</span> <span style="color:#66d9ef">TABLE</span>
<span style="color:#66d9ef">IF</span>
    <span style="color:#66d9ef">EXISTS</span> Person;
<span style="color:#66d9ef">CREATE</span> <span style="color:#66d9ef">TABLE</span> Person ( Id INT, Email VARCHAR ( <span style="color:#ae81ff">255</span> ) );
<span style="color:#66d9ef">INSERT</span> <span style="color:#66d9ef">INTO</span> Person ( Id, Email )
<span style="color:#66d9ef">VALUES</span>
    ( <span style="color:#ae81ff">1</span>, <span style="color:#e6db74">&#39;a@b.com&#39;</span> ),
    ( <span style="color:#ae81ff">2</span>, <span style="color:#e6db74">&#39;c@d.com&#39;</span> ),
    ( <span style="color:#ae81ff">3</span>, <span style="color:#e6db74">&#39;a@b.com&#39;</span> );
</code></pre></div><h2 id="196-delete-duplicate-emails">196. Delete Duplicate Emails</h2>
<p><a href="https://leetcode.com/problems/delete-duplicate-emails/description/">https://leetcode.com/problems/delete-duplicate-emails/description/</a></p>
<h3 id="description-5">Description</h3>
<p>邮件地址表：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-html" data-lang="html">+----+---------+
| Id | Email   |
+----+---------+
| 1  | john@example.com |
| 2  | bob@example.com |
| 3  | john@example.com |
+----+---------+
</code></pre></div><p>删除重复的邮件地址：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-html" data-lang="html">+----+------------------+
| Id | Email            |
+----+------------------+
| 1  | john@example.com |
| 2  | bob@example.com  |
+----+------------------+
</code></pre></div><h3 id="solution-5">Solution</h3>
<p>只保留相同 Email 中 Id 最小的那一个，然后删除其它的。</p>
<p>连接查询：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sql" data-lang="sql"><span style="color:#66d9ef">DELETE</span> p1
<span style="color:#66d9ef">FROM</span>
    Person p1,
    Person p2
<span style="color:#66d9ef">WHERE</span>
    p1.Email <span style="color:#f92672">=</span> p2.Email
    <span style="color:#66d9ef">AND</span> p1.Id <span style="color:#f92672">&gt;</span> p2.Id
</code></pre></div><p>子查询：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sql" data-lang="sql"><span style="color:#66d9ef">DELETE</span>
<span style="color:#66d9ef">FROM</span>
    Person
<span style="color:#66d9ef">WHERE</span>
    id <span style="color:#66d9ef">NOT</span> <span style="color:#66d9ef">IN</span> (
        <span style="color:#66d9ef">SELECT</span> id 
        <span style="color:#66d9ef">FROM</span> ( 
            <span style="color:#66d9ef">SELECT</span> <span style="color:#66d9ef">min</span>( id ) <span style="color:#66d9ef">AS</span> id 
            <span style="color:#66d9ef">FROM</span> Person
            <span style="color:#66d9ef">GROUP</span> <span style="color:#66d9ef">BY</span> email
        ) <span style="color:#66d9ef">AS</span> m
    );
</code></pre></div><p>应该注意的是上述解法额外嵌套了一个 SELECT 语句，如果不这么做，会出现错误：You can&rsquo;t specify target table &lsquo;Person&rsquo; for update in FROM clause。以下演示了这种错误解法。</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sql" data-lang="sql"><span style="color:#66d9ef">DELETE</span>
<span style="color:#66d9ef">FROM</span>
    Person
<span style="color:#66d9ef">WHERE</span>
    id <span style="color:#66d9ef">NOT</span> <span style="color:#66d9ef">IN</span> ( 
        <span style="color:#66d9ef">SELECT</span> <span style="color:#66d9ef">min</span>( id ) <span style="color:#66d9ef">AS</span> id 
        <span style="color:#66d9ef">FROM</span> Person 
        <span style="color:#66d9ef">GROUP</span> <span style="color:#66d9ef">BY</span> email 
    );
</code></pre></div><p>参考：<a href="https://stackoverflow.com/questions/45494/mysql-error-1093-cant-specify-target-table-for-update-in-from-clause">pMySQL Error 1093 - Can&rsquo;t specify target table for update in FROM clause</a></p>
<h3 id="sql-schema-5">SQL Schema</h3>
<p>与 182 相同。</p>
<h2 id="175-combine-two-tables">175. Combine Two Tables</h2>
<p><a href="https://leetcode.com/problems/combine-two-tables/description/">https://leetcode.com/problems/combine-two-tables/description/</a></p>
<h3 id="description-6">Description</h3>
<p>Person 表：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-html" data-lang="html">+-------------+---------+
| Column Name | Type    |
+-------------+---------+
| PersonId    | int     |
| FirstName   | varchar |
| LastName    | varchar |
+-------------+---------+
PersonId is the primary key column for this table.
</code></pre></div><p>Address 表：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-html" data-lang="html">+-------------+---------+
| Column Name | Type    |
+-------------+---------+
| AddressId   | int     |
| PersonId    | int     |
| City        | varchar |
| State       | varchar |
+-------------+---------+
AddressId is the primary key column for this table.
</code></pre></div><p>查找 FirstName, LastName, City, State 数据，而不管一个用户有没有填地址信息。</p>
<h3 id="solution-6">Solution</h3>
<p>涉及到 Person 和 Address 两个表，在对这两个表执行连接操作时，因为要保留 Person 表中的信息，即使在 Address 表中没有关联的信息也要保留。此时可以用左外连接，将 Person 表放在 LEFT JOIN 的左边。</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sql" data-lang="sql"><span style="color:#66d9ef">SELECT</span>
    FirstName,
    LastName,
    City,
    <span style="color:#66d9ef">State</span>
<span style="color:#66d9ef">FROM</span>
    Person P
    <span style="color:#66d9ef">LEFT</span> <span style="color:#66d9ef">JOIN</span> Address A
    <span style="color:#66d9ef">ON</span> P.PersonId <span style="color:#f92672">=</span> A.PersonId;
</code></pre></div><h3 id="sql-schema-6">SQL Schema</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sql" data-lang="sql"><span style="color:#66d9ef">DROP</span> <span style="color:#66d9ef">TABLE</span>
<span style="color:#66d9ef">IF</span>
    <span style="color:#66d9ef">EXISTS</span> Person;
<span style="color:#66d9ef">CREATE</span> <span style="color:#66d9ef">TABLE</span> Person ( PersonId INT, FirstName VARCHAR ( <span style="color:#ae81ff">255</span> ), LastName VARCHAR ( <span style="color:#ae81ff">255</span> ) );
<span style="color:#66d9ef">DROP</span> <span style="color:#66d9ef">TABLE</span>
<span style="color:#66d9ef">IF</span>
    <span style="color:#66d9ef">EXISTS</span> Address;
<span style="color:#66d9ef">CREATE</span> <span style="color:#66d9ef">TABLE</span> Address ( AddressId INT, PersonId INT, City VARCHAR ( <span style="color:#ae81ff">255</span> ), <span style="color:#66d9ef">State</span> VARCHAR ( <span style="color:#ae81ff">255</span> ) );
<span style="color:#66d9ef">INSERT</span> <span style="color:#66d9ef">INTO</span> Person ( PersonId, LastName, FirstName )
<span style="color:#66d9ef">VALUES</span>
    ( <span style="color:#ae81ff">1</span>, <span style="color:#e6db74">&#39;Wang&#39;</span>, <span style="color:#e6db74">&#39;Allen&#39;</span> );
<span style="color:#66d9ef">INSERT</span> <span style="color:#66d9ef">INTO</span> Address ( AddressId, PersonId, City, <span style="color:#66d9ef">State</span> )
<span style="color:#66d9ef">VALUES</span>
    ( <span style="color:#ae81ff">1</span>, <span style="color:#ae81ff">2</span>, <span style="color:#e6db74">&#39;New York City&#39;</span>, <span style="color:#e6db74">&#39;New York&#39;</span> );
</code></pre></div><h2 id="181-employees-earning-more-than-their-managers">181. Employees Earning More Than Their Managers</h2>
<p><a href="https://leetcode.com/problems/employees-earning-more-than-their-managers/description/">https://leetcode.com/problems/employees-earning-more-than-their-managers/description/</a></p>
<h3 id="description-7">Description</h3>
<p>Employee 表：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-html" data-lang="html">+----+-------+--------+-----------+
| Id | Name  | Salary | ManagerId |
+----+-------+--------+-----------+
| 1  | Joe   | 70000  | 3         |
| 2  | Henry | 80000  | 4         |
| 3  | Sam   | 60000  | NULL      |
| 4  | Max   | 90000  | NULL      |
+----+-------+--------+-----------+
</code></pre></div><p>查找薪资大于其经理薪资的员工信息。</p>
<h3 id="solution-7">Solution</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sql" data-lang="sql"><span style="color:#66d9ef">SELECT</span>
    E1.NAME <span style="color:#66d9ef">AS</span> Employee
<span style="color:#66d9ef">FROM</span>
    Employee E1
    <span style="color:#66d9ef">INNER</span> <span style="color:#66d9ef">JOIN</span> Employee E2
    <span style="color:#66d9ef">ON</span> E1.ManagerId <span style="color:#f92672">=</span> E2.Id
    <span style="color:#66d9ef">AND</span> E1.Salary <span style="color:#f92672">&gt;</span> E2.Salary;
</code></pre></div><h3 id="sql-schema-7">SQL Schema</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sql" data-lang="sql"><span style="color:#66d9ef">DROP</span> <span style="color:#66d9ef">TABLE</span>
<span style="color:#66d9ef">IF</span>
    <span style="color:#66d9ef">EXISTS</span> Employee;
<span style="color:#66d9ef">CREATE</span> <span style="color:#66d9ef">TABLE</span> Employee ( Id INT, NAME VARCHAR ( <span style="color:#ae81ff">255</span> ), Salary INT, ManagerId INT );
<span style="color:#66d9ef">INSERT</span> <span style="color:#66d9ef">INTO</span> Employee ( Id, NAME, Salary, ManagerId )
<span style="color:#66d9ef">VALUES</span>
    ( <span style="color:#ae81ff">1</span>, <span style="color:#e6db74">&#39;Joe&#39;</span>, <span style="color:#ae81ff">70000</span>, <span style="color:#ae81ff">3</span> ),
    ( <span style="color:#ae81ff">2</span>, <span style="color:#e6db74">&#39;Henry&#39;</span>, <span style="color:#ae81ff">80000</span>, <span style="color:#ae81ff">4</span> ),
    ( <span style="color:#ae81ff">3</span>, <span style="color:#e6db74">&#39;Sam&#39;</span>, <span style="color:#ae81ff">60000</span>, <span style="color:#66d9ef">NULL</span> ),
    ( <span style="color:#ae81ff">4</span>, <span style="color:#e6db74">&#39;Max&#39;</span>, <span style="color:#ae81ff">90000</span>, <span style="color:#66d9ef">NULL</span> );
</code></pre></div><h2 id="183-customers-who-never-order">183. Customers Who Never Order</h2>
<p><a href="https://leetcode.com/problems/customers-who-never-order/description/">https://leetcode.com/problems/customers-who-never-order/description/</a></p>
<h3 id="description-8">Description</h3>
<p>Customers 表：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-html" data-lang="html">+----+-------+
| Id | Name  |
+----+-------+
| 1  | Joe   |
| 2  | Henry |
| 3  | Sam   |
| 4  | Max   |
+----+-------+
</code></pre></div><p>Orders 表：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-html" data-lang="html">+----+------------+
| Id | CustomerId |
+----+------------+
| 1  | 3          |
| 2  | 1          |
+----+------------+
</code></pre></div><p>查找没有订单的顾客信息：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-html" data-lang="html">+-----------+
| Customers |
+-----------+
| Henry     |
| Max       |
+-----------+
</code></pre></div><h3 id="solution-8">Solution</h3>
<p>左外链接</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sql" data-lang="sql"><span style="color:#66d9ef">SELECT</span>
    <span style="color:#66d9ef">C</span>.Name <span style="color:#66d9ef">AS</span> Customers
<span style="color:#66d9ef">FROM</span>
    Customers <span style="color:#66d9ef">C</span>
    <span style="color:#66d9ef">LEFT</span> <span style="color:#66d9ef">JOIN</span> Orders O
    <span style="color:#66d9ef">ON</span> <span style="color:#66d9ef">C</span>.Id <span style="color:#f92672">=</span> O.CustomerId
<span style="color:#66d9ef">WHERE</span>
    O.CustomerId <span style="color:#66d9ef">IS</span> <span style="color:#66d9ef">NULL</span>;
</code></pre></div><p>子查询</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sql" data-lang="sql"><span style="color:#66d9ef">SELECT</span>
    Name <span style="color:#66d9ef">AS</span> Customers
<span style="color:#66d9ef">FROM</span>
    Customers
<span style="color:#66d9ef">WHERE</span>
    Id <span style="color:#66d9ef">NOT</span> <span style="color:#66d9ef">IN</span> ( 
        <span style="color:#66d9ef">SELECT</span> CustomerId 
        <span style="color:#66d9ef">FROM</span> Orders 
    );
</code></pre></div><h3 id="sql-schema-8">SQL Schema</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sql" data-lang="sql"><span style="color:#66d9ef">DROP</span> <span style="color:#66d9ef">TABLE</span>
<span style="color:#66d9ef">IF</span>
    <span style="color:#66d9ef">EXISTS</span> Customers;
<span style="color:#66d9ef">CREATE</span> <span style="color:#66d9ef">TABLE</span> Customers ( Id INT, NAME VARCHAR ( <span style="color:#ae81ff">255</span> ) );
<span style="color:#66d9ef">DROP</span> <span style="color:#66d9ef">TABLE</span>
<span style="color:#66d9ef">IF</span>
    <span style="color:#66d9ef">EXISTS</span> Orders;
<span style="color:#66d9ef">CREATE</span> <span style="color:#66d9ef">TABLE</span> Orders ( Id INT, CustomerId INT );
<span style="color:#66d9ef">INSERT</span> <span style="color:#66d9ef">INTO</span> Customers ( Id, NAME )
<span style="color:#66d9ef">VALUES</span>
    ( <span style="color:#ae81ff">1</span>, <span style="color:#e6db74">&#39;Joe&#39;</span> ),
    ( <span style="color:#ae81ff">2</span>, <span style="color:#e6db74">&#39;Henry&#39;</span> ),
    ( <span style="color:#ae81ff">3</span>, <span style="color:#e6db74">&#39;Sam&#39;</span> ),
    ( <span style="color:#ae81ff">4</span>, <span style="color:#e6db74">&#39;Max&#39;</span> );
<span style="color:#66d9ef">INSERT</span> <span style="color:#66d9ef">INTO</span> Orders ( Id, CustomerId )
<span style="color:#66d9ef">VALUES</span>
    ( <span style="color:#ae81ff">1</span>, <span style="color:#ae81ff">3</span> ),
    ( <span style="color:#ae81ff">2</span>, <span style="color:#ae81ff">1</span> );
</code></pre></div><h2 id="184-department-highest-salary">184. Department Highest Salary</h2>
<p><a href="https://leetcode.com/problems/department-highest-salary/description/">https://leetcode.com/problems/department-highest-salary/description/</a></p>
<h3 id="description-9">Description</h3>
<p>Employee 表：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-html" data-lang="html">+----+-------+--------+--------------+
| Id | Name  | Salary | DepartmentId |
+----+-------+--------+--------------+
| 1  | Joe   | 70000  | 1            |
| 2  | Henry | 80000  | 2            |
| 3  | Sam   | 60000  | 2            |
| 4  | Max   | 90000  | 1            |
+----+-------+--------+--------------+
</code></pre></div><p>Department 表：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-html" data-lang="html">+----+----------+
| Id | Name     |
+----+----------+
| 1  | IT       |
| 2  | Sales    |
+----+----------+
</code></pre></div><p>查找一个 Department 中收入最高者的信息：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-html" data-lang="html">+------------+----------+--------+
| Department | Employee | Salary |
+------------+----------+--------+
| IT         | Max      | 90000  |
| Sales      | Henry    | 80000  |
+------------+----------+--------+
</code></pre></div><h3 id="solution-9">Solution</h3>
<p>创建一个临时表，包含了部门员工的最大薪资。可以对部门进行分组，然后使用 MAX() 汇总函数取得最大薪资。</p>
<p>之后使用连接找到一个部门中薪资等于临时表中最大薪资的员工。</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sql" data-lang="sql"><span style="color:#66d9ef">SELECT</span>
    D.NAME Department,
    E.NAME Employee,
    E.Salary
<span style="color:#66d9ef">FROM</span>
    Employee E,
    Department D,
    ( <span style="color:#66d9ef">SELECT</span> DepartmentId, <span style="color:#66d9ef">MAX</span>( Salary ) Salary 
     <span style="color:#66d9ef">FROM</span> Employee 
     <span style="color:#66d9ef">GROUP</span> <span style="color:#66d9ef">BY</span> DepartmentId ) M
<span style="color:#66d9ef">WHERE</span>
    E.DepartmentId <span style="color:#f92672">=</span> D.Id
    <span style="color:#66d9ef">AND</span> E.DepartmentId <span style="color:#f92672">=</span> M.DepartmentId
    <span style="color:#66d9ef">AND</span> E.Salary <span style="color:#f92672">=</span> M.Salary;
</code></pre></div><h3 id="sql-schema-9">SQL Schema</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sql" data-lang="sql"><span style="color:#66d9ef">DROP</span> <span style="color:#66d9ef">TABLE</span> <span style="color:#66d9ef">IF</span> <span style="color:#66d9ef">EXISTS</span> Employee;
<span style="color:#66d9ef">CREATE</span> <span style="color:#66d9ef">TABLE</span> Employee ( Id INT, NAME VARCHAR ( <span style="color:#ae81ff">255</span> ), Salary INT, DepartmentId INT );
<span style="color:#66d9ef">DROP</span> <span style="color:#66d9ef">TABLE</span> <span style="color:#66d9ef">IF</span> <span style="color:#66d9ef">EXISTS</span> Department;
<span style="color:#66d9ef">CREATE</span> <span style="color:#66d9ef">TABLE</span> Department ( Id INT, NAME VARCHAR ( <span style="color:#ae81ff">255</span> ) );
<span style="color:#66d9ef">INSERT</span> <span style="color:#66d9ef">INTO</span> Employee ( Id, NAME, Salary, DepartmentId )
<span style="color:#66d9ef">VALUES</span>
    ( <span style="color:#ae81ff">1</span>, <span style="color:#e6db74">&#39;Joe&#39;</span>, <span style="color:#ae81ff">70000</span>, <span style="color:#ae81ff">1</span> ),
    ( <span style="color:#ae81ff">2</span>, <span style="color:#e6db74">&#39;Henry&#39;</span>, <span style="color:#ae81ff">80000</span>, <span style="color:#ae81ff">2</span> ),
    ( <span style="color:#ae81ff">3</span>, <span style="color:#e6db74">&#39;Sam&#39;</span>, <span style="color:#ae81ff">60000</span>, <span style="color:#ae81ff">2</span> ),
    ( <span style="color:#ae81ff">4</span>, <span style="color:#e6db74">&#39;Max&#39;</span>, <span style="color:#ae81ff">90000</span>, <span style="color:#ae81ff">1</span> );
<span style="color:#66d9ef">INSERT</span> <span style="color:#66d9ef">INTO</span> Department ( Id, NAME )
<span style="color:#66d9ef">VALUES</span>
    ( <span style="color:#ae81ff">1</span>, <span style="color:#e6db74">&#39;IT&#39;</span> ),
    ( <span style="color:#ae81ff">2</span>, <span style="color:#e6db74">&#39;Sales&#39;</span> );
</code></pre></div><h2 id="176-second-highest-salary">176. Second Highest Salary</h2>
<p><a href="https://leetcode.com/problems/second-highest-salary/description/">https://leetcode.com/problems/second-highest-salary/description/</a></p>
<h3 id="description-10">Description</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-html" data-lang="html">+----+--------+
| Id | Salary |
+----+--------+
| 1  | 100    |
| 2  | 200    |
| 3  | 300    |
+----+--------+
</code></pre></div><p>查找工资第二高的员工。</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-html" data-lang="html">+---------------------+
| SecondHighestSalary |
+---------------------+
| 200                 |
+---------------------+
</code></pre></div><p>没有找到返回 null 而不是不返回数据。</p>
<h3 id="solution-10">Solution</h3>
<p>为了在没有查找到数据时返回 null，需要在查询结果外面再套一层 SELECT。</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sql" data-lang="sql"><span style="color:#66d9ef">SELECT</span>
    ( <span style="color:#66d9ef">SELECT</span> <span style="color:#66d9ef">DISTINCT</span> Salary 
     <span style="color:#66d9ef">FROM</span> Employee 
     <span style="color:#66d9ef">ORDER</span> <span style="color:#66d9ef">BY</span> Salary <span style="color:#66d9ef">DESC</span> 
     <span style="color:#66d9ef">LIMIT</span> <span style="color:#ae81ff">1</span>, <span style="color:#ae81ff">1</span> ) SecondHighestSalary;
</code></pre></div><h3 id="sql-schema-10">SQL Schema</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sql" data-lang="sql"><span style="color:#66d9ef">DROP</span> <span style="color:#66d9ef">TABLE</span>
<span style="color:#66d9ef">IF</span>
    <span style="color:#66d9ef">EXISTS</span> Employee;
<span style="color:#66d9ef">CREATE</span> <span style="color:#66d9ef">TABLE</span> Employee ( Id INT, Salary INT );
<span style="color:#66d9ef">INSERT</span> <span style="color:#66d9ef">INTO</span> Employee ( Id, Salary )
<span style="color:#66d9ef">VALUES</span>
    ( <span style="color:#ae81ff">1</span>, <span style="color:#ae81ff">100</span> ),
    ( <span style="color:#ae81ff">2</span>, <span style="color:#ae81ff">200</span> ),
    ( <span style="color:#ae81ff">3</span>, <span style="color:#ae81ff">300</span> );
</code></pre></div><h2 id="177-nth-highest-salary">177. Nth Highest Salary</h2>
<h3 id="description-11">Description</h3>
<p>查找工资第 N 高的员工。</p>
<h3 id="solution-11">Solution</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sql" data-lang="sql"><span style="color:#66d9ef">CREATE</span> <span style="color:#66d9ef">FUNCTION</span> getNthHighestSalary ( N INT ) <span style="color:#66d9ef">RETURNS</span> INT <span style="color:#66d9ef">BEGIN</span>

<span style="color:#66d9ef">SET</span> N <span style="color:#f92672">=</span> N <span style="color:#f92672">-</span> <span style="color:#ae81ff">1</span>;
<span style="color:#66d9ef">RETURN</span> ( 
    <span style="color:#66d9ef">SELECT</span> ( 
        <span style="color:#66d9ef">SELECT</span> <span style="color:#66d9ef">DISTINCT</span> Salary 
        <span style="color:#66d9ef">FROM</span> Employee 
        <span style="color:#66d9ef">ORDER</span> <span style="color:#66d9ef">BY</span> Salary <span style="color:#66d9ef">DESC</span> 
        <span style="color:#66d9ef">LIMIT</span> N, <span style="color:#ae81ff">1</span> 
    ) 
);

<span style="color:#66d9ef">END</span>
</code></pre></div><h3 id="sql-schema-11">SQL Schema</h3>
<p>同 176。</p>
<h2 id="178-rank-scores">178. Rank Scores</h2>
<p><a href="https://leetcode.com/problems/rank-scores/description/">https://leetcode.com/problems/rank-scores/description/</a></p>
<h3 id="description-12">Description</h3>
<p>得分表：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-html" data-lang="html">+----+-------+
| Id | Score |
+----+-------+
| 1  | 3.50  |
| 2  | 3.65  |
| 3  | 4.00  |
| 4  | 3.85  |
| 5  | 4.00  |
| 6  | 3.65  |
+----+-------+
</code></pre></div><p>将得分排序，并统计排名。</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-html" data-lang="html">+-------+------+
| Score | Rank |
+-------+------+
| 4.00  | 1    |
| 4.00  | 1    |
| 3.85  | 2    |
| 3.65  | 3    |
| 3.65  | 3    |
| 3.50  | 4    |
+-------+------+
</code></pre></div><h3 id="solution-12">Solution</h3>
<p>要统计某个 score 的排名，只要统计大于等于该 score 的 score 数量。</p>
<table>
<thead>
<tr>
<th style="text-align:center">Id</th>
<th style="text-align:center">score</th>
<th style="text-align:center">大于等于该 score 的 score 数量</th>
<th style="text-align:center">排名</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">1</td>
<td style="text-align:center">4.1</td>
<td style="text-align:center">3</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:center">2</td>
<td style="text-align:center">4.2</td>
<td style="text-align:center">2</td>
<td style="text-align:center">2</td>
</tr>
<tr>
<td style="text-align:center">3</td>
<td style="text-align:center">4.3</td>
<td style="text-align:center">1</td>
<td style="text-align:center">1</td>
</tr>
</tbody>
</table>
<p>使用连接操作找到某个 score 对应的大于等于其值的记录：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sql" data-lang="sql"><span style="color:#66d9ef">SELECT</span>
	<span style="color:#f92672">*</span>
<span style="color:#66d9ef">FROM</span>
    Scores S1
    <span style="color:#66d9ef">INNER</span> <span style="color:#66d9ef">JOIN</span> Scores S2
    <span style="color:#66d9ef">ON</span> S1.score <span style="color:#f92672">&lt;=</span> S2.score
<span style="color:#66d9ef">ORDER</span> <span style="color:#66d9ef">BY</span>
    S1.score <span style="color:#66d9ef">DESC</span>, S1.Id;
</code></pre></div><table>
<thead>
<tr>
<th style="text-align:center">S1.Id</th>
<th style="text-align:center">S1.score</th>
<th style="text-align:center">S2.Id</th>
<th style="text-align:center">S2.score</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">3</td>
<td style="text-align:center">4.3</td>
<td style="text-align:center">3</td>
<td style="text-align:center">4.3</td>
</tr>
<tr>
<td style="text-align:center">2</td>
<td style="text-align:center">4.2</td>
<td style="text-align:center">2</td>
<td style="text-align:center">4.2</td>
</tr>
<tr>
<td style="text-align:center">2</td>
<td style="text-align:center">4.2</td>
<td style="text-align:center">3</td>
<td style="text-align:center">4.3</td>
</tr>
<tr>
<td style="text-align:center">1</td>
<td style="text-align:center">4.1</td>
<td style="text-align:center">1</td>
<td style="text-align:center">4.1</td>
</tr>
<tr>
<td style="text-align:center">1</td>
<td style="text-align:center">4.1</td>
<td style="text-align:center">2</td>
<td style="text-align:center">4.2</td>
</tr>
<tr>
<td style="text-align:center">1</td>
<td style="text-align:center">4.1</td>
<td style="text-align:center">3</td>
<td style="text-align:center">4.3</td>
</tr>
</tbody>
</table>
<p>可以看到每个 S1.score 都有对应好几条记录，我们再进行分组，并统计每个分组的数量作为 &lsquo;Rank&rsquo;</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sql" data-lang="sql"><span style="color:#66d9ef">SELECT</span>
    S1.score <span style="color:#e6db74">&#39;Score&#39;</span>,
    <span style="color:#66d9ef">COUNT</span>(<span style="color:#f92672">*</span>) <span style="color:#e6db74">&#39;Rank&#39;</span>
<span style="color:#66d9ef">FROM</span>
    Scores S1
    <span style="color:#66d9ef">INNER</span> <span style="color:#66d9ef">JOIN</span> Scores S2
    <span style="color:#66d9ef">ON</span> S1.score <span style="color:#f92672">&lt;=</span> S2.score
<span style="color:#66d9ef">GROUP</span> <span style="color:#66d9ef">BY</span>
    S1.id, S1.score
<span style="color:#66d9ef">ORDER</span> <span style="color:#66d9ef">BY</span>
    S1.score <span style="color:#66d9ef">DESC</span>, S1.Id;
</code></pre></div><table>
<thead>
<tr>
<th style="text-align:center">score</th>
<th style="text-align:center">Rank</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">4.3</td>
<td style="text-align:center">1</td>
</tr>
<tr>
<td style="text-align:center">4.2</td>
<td style="text-align:center">2</td>
</tr>
<tr>
<td style="text-align:center">4.1</td>
<td style="text-align:center">3</td>
</tr>
</tbody>
</table>
<p>上面的解法看似没问题，但是对于以下数据，它却得到了错误的结果：</p>
<table>
<thead>
<tr>
<th style="text-align:center">Id</th>
<th style="text-align:center">score</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">1</td>
<td style="text-align:center">4.1</td>
</tr>
<tr>
<td style="text-align:center">2</td>
<td style="text-align:center">4.2</td>
</tr>
<tr>
<td style="text-align:center">3</td>
<td style="text-align:center">4.2</td>
</tr>
</tbody>
</table>
<table>
<thead>
<tr>
<th style="text-align:center">score</th>
<th style="text-align:center">Rank</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">4.2</td>
<td style="text-align:center">2</td>
</tr>
<tr>
<td style="text-align:center">4.2</td>
<td style="text-align:center">2</td>
</tr>
<tr>
<td style="text-align:center">4.1</td>
<td style="text-align:center">3</td>
</tr>
</tbody>
</table>
<p>而我们希望的结果为：</p>
<table>
<thead>
<tr>
<th style="text-align:center">score</th>
<th style="text-align:center">Rank</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">4.2</td>
<td style="text-align:center">1</td>
</tr>
<tr>
<td style="text-align:center">4.2</td>
<td style="text-align:center">1</td>
</tr>
<tr>
<td style="text-align:center">4.1</td>
<td style="text-align:center">2</td>
</tr>
</tbody>
</table>
<p>连接情况如下：</p>
<table>
<thead>
<tr>
<th style="text-align:center">S1.Id</th>
<th style="text-align:center">S1.score</th>
<th style="text-align:center">S2.Id</th>
<th style="text-align:center">S2.score</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">2</td>
<td style="text-align:center">4.2</td>
<td style="text-align:center">3</td>
<td style="text-align:center">4.2</td>
</tr>
<tr>
<td style="text-align:center">2</td>
<td style="text-align:center">4.2</td>
<td style="text-align:center">2</td>
<td style="text-align:center">4.2</td>
</tr>
<tr>
<td style="text-align:center">3</td>
<td style="text-align:center">4.2</td>
<td style="text-align:center">3</td>
<td style="text-align:center">4.2</td>
</tr>
<tr>
<td style="text-align:center">3</td>
<td style="text-align:center">4.2</td>
<td style="text-align:center">2</td>
<td style="text-align:center">4.1</td>
</tr>
<tr>
<td style="text-align:center">1</td>
<td style="text-align:center">4.1</td>
<td style="text-align:center">3</td>
<td style="text-align:center">4.2</td>
</tr>
<tr>
<td style="text-align:center">1</td>
<td style="text-align:center">4.1</td>
<td style="text-align:center">2</td>
<td style="text-align:center">4.2</td>
</tr>
<tr>
<td style="text-align:center">1</td>
<td style="text-align:center">4.1</td>
<td style="text-align:center">1</td>
<td style="text-align:center">4.1</td>
</tr>
</tbody>
</table>
<p>我们想要的结果是，把分数相同的放在同一个排名，并且相同分数只占一个位置，例如上面的分数，Id=2 和 Id=3 的记录都有相同的分数，并且最高，他们并列第一。而 Id=1 的记录应该排第二名，而不是第三名。所以在进行 COUNT 计数统计时，我们需要使用 COUNT( DISTINCT S2.score ) 从而只统计一次相同的分数。</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sql" data-lang="sql"><span style="color:#66d9ef">SELECT</span>
    S1.score <span style="color:#e6db74">&#39;Score&#39;</span>,
    <span style="color:#66d9ef">COUNT</span>( <span style="color:#66d9ef">DISTINCT</span> S2.score ) <span style="color:#e6db74">&#39;Rank&#39;</span>
<span style="color:#66d9ef">FROM</span>
    Scores S1
    <span style="color:#66d9ef">INNER</span> <span style="color:#66d9ef">JOIN</span> Scores S2
    <span style="color:#66d9ef">ON</span> S1.score <span style="color:#f92672">&lt;=</span> S2.score
<span style="color:#66d9ef">GROUP</span> <span style="color:#66d9ef">BY</span>
    S1.id, S1.score
<span style="color:#66d9ef">ORDER</span> <span style="color:#66d9ef">BY</span>
    S1.score <span style="color:#66d9ef">DESC</span>;
</code></pre></div><h3 id="sql-schema-12">SQL Schema</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sql" data-lang="sql"><span style="color:#66d9ef">DROP</span> <span style="color:#66d9ef">TABLE</span>
<span style="color:#66d9ef">IF</span>
    <span style="color:#66d9ef">EXISTS</span> Scores;
<span style="color:#66d9ef">CREATE</span> <span style="color:#66d9ef">TABLE</span> Scores ( Id INT, Score DECIMAL ( <span style="color:#ae81ff">3</span>, <span style="color:#ae81ff">2</span> ) );
<span style="color:#66d9ef">INSERT</span> <span style="color:#66d9ef">INTO</span> Scores ( Id, Score )
<span style="color:#66d9ef">VALUES</span>
    ( <span style="color:#ae81ff">1</span>, <span style="color:#ae81ff">4</span>.<span style="color:#ae81ff">1</span> ),
    ( <span style="color:#ae81ff">2</span>, <span style="color:#ae81ff">4</span>.<span style="color:#ae81ff">1</span> ),
    ( <span style="color:#ae81ff">3</span>, <span style="color:#ae81ff">4</span>.<span style="color:#ae81ff">2</span> ),
    ( <span style="color:#ae81ff">4</span>, <span style="color:#ae81ff">4</span>.<span style="color:#ae81ff">2</span> ),
    ( <span style="color:#ae81ff">5</span>, <span style="color:#ae81ff">4</span>.<span style="color:#ae81ff">3</span> ),
    ( <span style="color:#ae81ff">6</span>, <span style="color:#ae81ff">4</span>.<span style="color:#ae81ff">3</span> );
</code></pre></div><h2 id="180-consecutive-numbers">180. Consecutive Numbers</h2>
<p><a href="https://leetcode.com/problems/consecutive-numbers/description/">https://leetcode.com/problems/consecutive-numbers/description/</a></p>
<h3 id="description-13">Description</h3>
<p>数字表：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-html" data-lang="html">+----+-----+
| Id | Num |
+----+-----+
| 1  |  1  |
| 2  |  1  |
| 3  |  1  |
| 4  |  2  |
| 5  |  1  |
| 6  |  2  |
| 7  |  2  |
+----+-----+
</code></pre></div><p>查找连续出现三次的数字。</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-html" data-lang="html">+-----------------+
| ConsecutiveNums |
+-----------------+
| 1               |
+-----------------+
</code></pre></div><h3 id="solution-13">Solution</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sql" data-lang="sql"><span style="color:#66d9ef">SELECT</span>
    <span style="color:#66d9ef">DISTINCT</span> L1.num ConsecutiveNums
<span style="color:#66d9ef">FROM</span>
    Logs L1,
    Logs L2,
    Logs L3
<span style="color:#66d9ef">WHERE</span> L1.id <span style="color:#f92672">=</span> l2.id <span style="color:#f92672">-</span> <span style="color:#ae81ff">1</span>
    <span style="color:#66d9ef">AND</span> L2.id <span style="color:#f92672">=</span> L3.id <span style="color:#f92672">-</span> <span style="color:#ae81ff">1</span>
    <span style="color:#66d9ef">AND</span> L1.num <span style="color:#f92672">=</span> L2.num
    <span style="color:#66d9ef">AND</span> l2.num <span style="color:#f92672">=</span> l3.num;
</code></pre></div><h3 id="sql-schema-13">SQL Schema</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sql" data-lang="sql"><span style="color:#66d9ef">DROP</span> <span style="color:#66d9ef">TABLE</span>
<span style="color:#66d9ef">IF</span>
    <span style="color:#66d9ef">EXISTS</span> LOGS;
<span style="color:#66d9ef">CREATE</span> <span style="color:#66d9ef">TABLE</span> LOGS ( Id INT, Num INT );
<span style="color:#66d9ef">INSERT</span> <span style="color:#66d9ef">INTO</span> LOGS ( Id, Num )
<span style="color:#66d9ef">VALUES</span>
    ( <span style="color:#ae81ff">1</span>, <span style="color:#ae81ff">1</span> ),
    ( <span style="color:#ae81ff">2</span>, <span style="color:#ae81ff">1</span> ),
    ( <span style="color:#ae81ff">3</span>, <span style="color:#ae81ff">1</span> ),
    ( <span style="color:#ae81ff">4</span>, <span style="color:#ae81ff">2</span> ),
    ( <span style="color:#ae81ff">5</span>, <span style="color:#ae81ff">1</span> ),
    ( <span style="color:#ae81ff">6</span>, <span style="color:#ae81ff">2</span> ),
    ( <span style="color:#ae81ff">7</span>, <span style="color:#ae81ff">2</span> );
</code></pre></div><h2 id="626-exchange-seats">626. Exchange Seats</h2>
<p><a href="https://leetcode.com/problems/exchange-seats/description/">https://leetcode.com/problems/exchange-seats/description/</a></p>
<h3 id="description-14">Description</h3>
<p>seat 表存储着座位对应的学生。</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-html" data-lang="html">+---------+---------+
|    id   | student |
+---------+---------+
|    1    | Abbot   |
|    2    | Doris   |
|    3    | Emerson |
|    4    | Green   |
|    5    | Jeames  |
+---------+---------+
</code></pre></div><p>要求交换相邻座位的两个学生，如果最后一个座位是奇数，那么不交换这个座位上的学生。</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-html" data-lang="html">+---------+---------+
|    id   | student |
+---------+---------+
|    1    | Doris   |
|    2    | Abbot   |
|    3    | Green   |
|    4    | Emerson |
|    5    | Jeames  |
+---------+---------+
</code></pre></div><h3 id="solution-14">Solution</h3>
<p>使用多个 union。</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sql" data-lang="sql"><span style="color:#f92672">##</span> <span style="color:#960050;background-color:#1e0010">处理偶数</span> id<span style="color:#960050;background-color:#1e0010">，让</span> id <span style="color:#960050;background-color:#1e0010">减</span> <span style="color:#ae81ff">1</span>
<span style="color:#f92672">##</span> <span style="color:#960050;background-color:#1e0010">例如</span> <span style="color:#ae81ff">2</span>,<span style="color:#ae81ff">4</span>,<span style="color:#ae81ff">6</span>,... <span style="color:#960050;background-color:#1e0010">变成</span> <span style="color:#ae81ff">1</span>,<span style="color:#ae81ff">3</span>,<span style="color:#ae81ff">5</span>,...
<span style="color:#66d9ef">SELECT</span>
    s1.id <span style="color:#f92672">-</span> <span style="color:#ae81ff">1</span> <span style="color:#66d9ef">AS</span> id,
    s1.student
<span style="color:#66d9ef">FROM</span>
    seat s1
<span style="color:#66d9ef">WHERE</span>
    s1.id <span style="color:#66d9ef">MOD</span> <span style="color:#ae81ff">2</span> <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span> <span style="color:#66d9ef">UNION</span>
<span style="color:#f92672">##</span> <span style="color:#960050;background-color:#1e0010">处理奇数</span> id<span style="color:#960050;background-color:#1e0010">，让</span> id <span style="color:#960050;background-color:#1e0010">加</span> <span style="color:#ae81ff">1</span><span style="color:#960050;background-color:#1e0010">。但是如果最大的</span> id <span style="color:#960050;background-color:#1e0010">为奇数，则不做处理</span>
<span style="color:#f92672">##</span> <span style="color:#960050;background-color:#1e0010">例如</span> <span style="color:#ae81ff">1</span>,<span style="color:#ae81ff">3</span>,<span style="color:#ae81ff">5</span>,... <span style="color:#960050;background-color:#1e0010">变成</span> <span style="color:#ae81ff">2</span>,<span style="color:#ae81ff">4</span>,<span style="color:#ae81ff">6</span>,...
<span style="color:#66d9ef">SELECT</span>
    s2.id <span style="color:#f92672">+</span> <span style="color:#ae81ff">1</span> <span style="color:#66d9ef">AS</span> id,
    s2.student
<span style="color:#66d9ef">FROM</span>
    seat s2
<span style="color:#66d9ef">WHERE</span>
    s2.id <span style="color:#66d9ef">MOD</span> <span style="color:#ae81ff">2</span> <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>
    <span style="color:#66d9ef">AND</span> s2.id <span style="color:#f92672">!=</span> ( <span style="color:#66d9ef">SELECT</span> <span style="color:#66d9ef">max</span>( s3.id ) <span style="color:#66d9ef">FROM</span> seat s3 ) <span style="color:#66d9ef">UNION</span>
<span style="color:#f92672">##</span> <span style="color:#960050;background-color:#1e0010">如果最大的</span> id <span style="color:#960050;background-color:#1e0010">为奇数，单独取出这个数</span>
<span style="color:#66d9ef">SELECT</span>
    s4.id <span style="color:#66d9ef">AS</span> id,
    s4.student
<span style="color:#66d9ef">FROM</span>
    seat s4
<span style="color:#66d9ef">WHERE</span>
    s4.id <span style="color:#66d9ef">MOD</span> <span style="color:#ae81ff">2</span> <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>
    <span style="color:#66d9ef">AND</span> s4.id <span style="color:#f92672">=</span> ( <span style="color:#66d9ef">SELECT</span> <span style="color:#66d9ef">max</span>( s5.id ) <span style="color:#66d9ef">FROM</span> seat s5 )
<span style="color:#66d9ef">ORDER</span> <span style="color:#66d9ef">BY</span>
    id;
</code></pre></div><h3 id="sql-schema-14">SQL Schema</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sql" data-lang="sql"><span style="color:#66d9ef">DROP</span> <span style="color:#66d9ef">TABLE</span>
<span style="color:#66d9ef">IF</span>
    <span style="color:#66d9ef">EXISTS</span> seat;
<span style="color:#66d9ef">CREATE</span> <span style="color:#66d9ef">TABLE</span> seat ( id INT, student VARCHAR ( <span style="color:#ae81ff">255</span> ) );
<span style="color:#66d9ef">INSERT</span> <span style="color:#66d9ef">INTO</span> seat ( id, student )
<span style="color:#66d9ef">VALUES</span>
    ( <span style="color:#e6db74">&#39;1&#39;</span>, <span style="color:#e6db74">&#39;Abbot&#39;</span> ),
    ( <span style="color:#e6db74">&#39;2&#39;</span>, <span style="color:#e6db74">&#39;Doris&#39;</span> ),
    ( <span style="color:#e6db74">&#39;3&#39;</span>, <span style="color:#e6db74">&#39;Emerson&#39;</span> ),
    ( <span style="color:#e6db74">&#39;4&#39;</span>, <span style="color:#e6db74">&#39;Green&#39;</span> ),
    ( <span style="color:#e6db74">&#39;5&#39;</span>, <span style="color:#e6db74">&#39;Jeames&#39;</span> );
</code></pre></div>
        
        ]]>
      </description>
    </item>
    
    
    
    <item>
      <title>【转载】Mysql</title>
      <link>/post/2021/12/22/%E8%BD%AC%E8%BD%BDmysql/</link>
      <pubDate>Wed, 22 Dec 2021 23:30:39 +0800</pubDate>
      <author>糸色生</author>
      <guid>/post/2021/12/22/%E8%BD%AC%E8%BD%BDmysql/</guid>
      <description>
        <![CDATA[
        <h1 id="mysql">MySQL</h1>
<!-- GFM-TOC -->
<ul>
<li><a href="#mysql">MySQL</a>
<ul>
<li><a href="#%E4%B8%80%E7%B4%A2%E5%BC%95">一、索引</a>
<ul>
<li><a href="#b-tree-%E5%8E%9F%E7%90%86">B+ Tree 原理</a></li>
<li><a href="#mysql-%E7%B4%A2%E5%BC%95">MySQL 索引</a></li>
<li><a href="#%E7%B4%A2%E5%BC%95%E4%BC%98%E5%8C%96">索引优化</a></li>
<li><a href="#%E7%B4%A2%E5%BC%95%E7%9A%84%E4%BC%98%E7%82%B9">索引的优点</a></li>
<li><a href="#%E7%B4%A2%E5%BC%95%E7%9A%84%E4%BD%BF%E7%94%A8%E6%9D%A1%E4%BB%B6">索引的使用条件</a></li>
</ul>
</li>
<li><a href="#%E4%BA%8C%E6%9F%A5%E8%AF%A2%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96">二、查询性能优化</a>
<ul>
<li><a href="#%E4%BD%BF%E7%94%A8-explain-%E8%BF%9B%E8%A1%8C%E5%88%86%E6%9E%90">使用 Explain 进行分析</a></li>
<li><a href="#%E4%BC%98%E5%8C%96%E6%95%B0%E6%8D%AE%E8%AE%BF%E9%97%AE">优化数据访问</a></li>
<li><a href="#%E9%87%8D%E6%9E%84%E6%9F%A5%E8%AF%A2%E6%96%B9%E5%BC%8F">重构查询方式</a></li>
</ul>
</li>
<li><a href="#%E4%B8%89%E5%AD%98%E5%82%A8%E5%BC%95%E6%93%8E">三、存储引擎</a>
<ul>
<li><a href="#innodb">InnoDB</a></li>
<li><a href="#myisam">MyISAM</a></li>
<li><a href="#%E6%AF%94%E8%BE%83">比较</a></li>
</ul>
</li>
<li><a href="#%E5%9B%9B%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B">四、数据类型</a>
<ul>
<li><a href="#%E6%95%B4%E5%9E%8B">整型</a></li>
<li><a href="#%E6%B5%AE%E7%82%B9%E6%95%B0">浮点数</a></li>
<li><a href="#%E5%AD%97%E7%AC%A6%E4%B8%B2">字符串</a></li>
<li><a href="#%E6%97%B6%E9%97%B4%E5%92%8C%E6%97%A5%E6%9C%9F">时间和日期</a></li>
</ul>
</li>
<li><a href="#%E4%BA%94%E5%88%87%E5%88%86">五、切分</a>
<ul>
<li><a href="#%E6%B0%B4%E5%B9%B3%E5%88%87%E5%88%86">水平切分</a></li>
<li><a href="#%E5%9E%82%E7%9B%B4%E5%88%87%E5%88%86">垂直切分</a></li>
<li><a href="#sharding-%E7%AD%96%E7%95%A5">Sharding 策略</a></li>
<li><a href="#sharding-%E5%AD%98%E5%9C%A8%E7%9A%84%E9%97%AE%E9%A2%98">Sharding 存在的问题</a></li>
</ul>
</li>
<li><a href="#%E5%85%AD%E5%A4%8D%E5%88%B6">六、复制</a>
<ul>
<li><a href="#%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6">主从复制</a></li>
<li><a href="#%E8%AF%BB%E5%86%99%E5%88%86%E7%A6%BB">读写分离</a></li>
</ul>
</li>
<li><a href="#%E5%8F%82%E8%80%83%E8%B5%84%E6%96%99">参考资料</a></li>
</ul>
</li>
</ul>
<!-- GFM-TOC -->
<h2 id="一索引">一、索引</h2>
<h3 id="b-tree-原理">B+ Tree 原理</h3>
<h4 id="1-数据结构">1. 数据结构</h4>
<p>B Tree 指的是 Balance Tree，也就是平衡树。平衡树是一颗查找树，并且所有叶子节点位于同一层。</p>
<p>B+ Tree 是基于 B Tree 和叶子节点顺序访问指针进行实现，它具有 B Tree 的平衡性，并且通过顺序访问指针来提高区间查询的性能。</p>
<p>在 B+ Tree 中，一个节点中的 key 从左到右非递减排列，如果某个指针的左右相邻 key 分别是 key<sub>i</sub> 和 key<sub>i+1</sub>，且不为 null，则该指针指向节点的所有 key 大于等于 key<sub>i</sub> 且小于等于 key<sub>i+1</sub>。</p>
<div align="center"> <img src="https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/33576849-9275-47bb-ada7-8ded5f5e7c73.png" width="350px"> </div><br>
<h4 id="2-操作">2. 操作</h4>
<p>进行查找操作时，首先在根节点进行二分查找，找到一个 key 所在的指针，然后递归地在指针所指向的节点进行查找。直到查找到叶子节点，然后在叶子节点上进行二分查找，找出 key 所对应的 data。</p>
<p>插入删除操作会破坏平衡树的平衡性，因此在进行插入删除操作之后，需要对树进行分裂、合并、旋转等操作来维护平衡性。</p>
<h4 id="3-与红黑树的比较">3. 与红黑树的比较</h4>
<p>红黑树等平衡树也可以用来实现索引，但是文件系统及数据库系统普遍采用 B+ Tree 作为索引结构，这是因为使用 B+ 树访问磁盘数据有更高的性能。</p>
<p>（一）B+ 树有更低的树高</p>
<p>平衡树的树高 O(h)=O(log<sub>d</sub>N)，其中 d 为每个节点的出度。红黑树的出度为 2，而 B+ Tree 的出度一般都非常大，所以红黑树的树高 h 很明显比 B+ Tree 大非常多。</p>
<p>（二）磁盘访问原理</p>
<p>操作系统一般将内存和磁盘分割成固定大小的块，每一块称为一页，内存与磁盘以页为单位交换数据。数据库系统将索引的一个节点的大小设置为页的大小，使得一次 I/O 就能完全载入一个节点。</p>
<p>如果数据不在同一个磁盘块上，那么通常需要移动制动手臂进行寻道，而制动手臂因为其物理结构导致了移动效率低下，从而增加磁盘数据读取时间。B+ 树相对于红黑树有更低的树高，进行寻道的次数与树高成正比，在同一个磁盘块上进行访问只需要很短的磁盘旋转时间，所以 B+ 树更适合磁盘数据的读取。</p>
<p>（三）磁盘预读特性</p>
<p>为了减少磁盘 I/O 操作，磁盘往往不是严格按需读取，而是每次都会预读。预读过程中，磁盘进行顺序读取，顺序读取不需要进行磁盘寻道，并且只需要很短的磁盘旋转时间，速度会非常快。并且可以利用预读特性，相邻的节点也能够被预先载入。</p>
<h3 id="mysql-索引">MySQL 索引</h3>
<p>索引是在存储引擎层实现的，而不是在服务器层实现的，所以不同存储引擎具有不同的索引类型和实现。</p>
<h4 id="1-btree-索引">1. B+Tree 索引</h4>
<p>是大多数 MySQL 存储引擎的默认索引类型。</p>
<p>因为不再需要进行全表扫描，只需要对树进行搜索即可，所以查找速度快很多。</p>
<p>因为 B+ Tree 的有序性，所以除了用于查找，还可以用于排序和分组。</p>
<p>可以指定多个列作为索引列，多个索引列共同组成键。</p>
<p>适用于全键值、键值范围和键前缀查找，其中键前缀查找只适用于最左前缀查找。如果不是按照索引列的顺序进行查找，则无法使用索引。</p>
<p>InnoDB 的 B+Tree 索引分为主索引和辅助索引。主索引的叶子节点 data 域记录着完整的数据记录，这种索引方式被称为聚簇索引。因为无法把数据行存放在两个不同的地方，所以一个表只能有一个聚簇索引。</p>
<div align="center"> <img src="https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/45016e98-6879-4709-8569-262b2d6d60b9.png" width="350px"> </div><br>
<p>辅助索引的叶子节点的 data 域记录着主键的值，因此在使用辅助索引进行查找时，需要先查找到主键值，然后再到主索引中进行查找。</p>
<div align="center"> <img src="https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/7c349b91-050b-4d72-a7f8-ec86320307ea.png" width="350px"> </div><br>
<h4 id="2-哈希索引">2. 哈希索引</h4>
<p>哈希索引能以 O(1) 时间进行查找，但是失去了有序性：</p>
<ul>
<li>无法用于排序与分组；</li>
<li>只支持精确查找，无法用于部分查找和范围查找。</li>
</ul>
<p>InnoDB 存储引擎有一个特殊的功能叫“自适应哈希索引”，当某个索引值被使用的非常频繁时，会在 B+Tree 索引之上再创建一个哈希索引，这样就让 B+Tree 索引具有哈希索引的一些优点，比如快速的哈希查找。</p>
<h4 id="3-全文索引">3. 全文索引</h4>
<p>MyISAM 存储引擎支持全文索引，用于查找文本中的关键词，而不是直接比较是否相等。</p>
<p>查找条件使用 MATCH AGAINST，而不是普通的 WHERE。</p>
<p>全文索引使用倒排索引实现，它记录着关键词到其所在文档的映射。</p>
<p>InnoDB 存储引擎在 MySQL 5.6.4 版本中也开始支持全文索引。</p>
<h4 id="4-空间数据索引">4. 空间数据索引</h4>
<p>MyISAM 存储引擎支持空间数据索引（R-Tree），可以用于地理数据存储。空间数据索引会从所有维度来索引数据，可以有效地使用任意维度来进行组合查询。</p>
<p>必须使用 GIS 相关的函数来维护数据。</p>
<h3 id="索引优化">索引优化</h3>
<h4 id="1-独立的列">1. 独立的列</h4>
<p>在进行查询时，索引列不能是表达式的一部分，也不能是函数的参数，否则无法使用索引。</p>
<p>例如下面的查询不能使用 actor_id 列的索引：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sql" data-lang="sql"><span style="color:#66d9ef">SELECT</span> actor_id <span style="color:#66d9ef">FROM</span> sakila.actor <span style="color:#66d9ef">WHERE</span> actor_id <span style="color:#f92672">+</span> <span style="color:#ae81ff">1</span> <span style="color:#f92672">=</span> <span style="color:#ae81ff">5</span>;
</code></pre></div><h4 id="2-多列索引">2. 多列索引</h4>
<p>在需要使用多个列作为条件进行查询时，使用多列索引比使用多个单列索引性能更好。例如下面的语句中，最好把 actor_id 和 film_id 设置为多列索引。</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sql" data-lang="sql"><span style="color:#66d9ef">SELECT</span> film_id, actor_ id <span style="color:#66d9ef">FROM</span> sakila.film_actor
<span style="color:#66d9ef">WHERE</span> actor_id <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span> <span style="color:#66d9ef">AND</span> film_id <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>;
</code></pre></div><h4 id="3-索引列的顺序">3. 索引列的顺序</h4>
<p>让选择性最强的索引列放在前面。</p>
<p>索引的选择性是指：不重复的索引值和记录总数的比值。最大值为 1，此时每个记录都有唯一的索引与其对应。选择性越高，每个记录的区分度越高，查询效率也越高。</p>
<p>例如下面显示的结果中 customer_id 的选择性比 staff_id 更高，因此最好把 customer_id 列放在多列索引的前面。</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sql" data-lang="sql"><span style="color:#66d9ef">SELECT</span> <span style="color:#66d9ef">COUNT</span>(<span style="color:#66d9ef">DISTINCT</span> staff_id)<span style="color:#f92672">/</span><span style="color:#66d9ef">COUNT</span>(<span style="color:#f92672">*</span>) <span style="color:#66d9ef">AS</span> staff_id_selectivity,
<span style="color:#66d9ef">COUNT</span>(<span style="color:#66d9ef">DISTINCT</span> customer_id)<span style="color:#f92672">/</span><span style="color:#66d9ef">COUNT</span>(<span style="color:#f92672">*</span>) <span style="color:#66d9ef">AS</span> customer_id_selectivity,
<span style="color:#66d9ef">COUNT</span>(<span style="color:#f92672">*</span>)
<span style="color:#66d9ef">FROM</span> payment;
</code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-html" data-lang="html">   staff_id_selectivity: 0.0001
customer_id_selectivity: 0.0373
               COUNT(*): 16049
</code></pre></div><h4 id="4-前缀索引">4. 前缀索引</h4>
<p>对于 BLOB、TEXT 和 VARCHAR 类型的列，必须使用前缀索引，只索引开始的部分字符。</p>
<p>前缀长度的选取需要根据索引选择性来确定。</p>
<h4 id="5-覆盖索引">5. 覆盖索引</h4>
<p>索引包含所有需要查询的字段的值。</p>
<p>具有以下优点：</p>
<ul>
<li>索引通常远小于数据行的大小，只读取索引能大大减少数据访问量。</li>
<li>一些存储引擎（例如 MyISAM）在内存中只缓存索引，而数据依赖于操作系统来缓存。因此，只访问索引可以不使用系统调用（通常比较费时）。</li>
<li>对于 InnoDB 引擎，若辅助索引能够覆盖查询，则无需访问主索引。</li>
</ul>
<h3 id="索引的优点">索引的优点</h3>
<ul>
<li>
<p>大大减少了服务器需要扫描的数据行数。</p>
</li>
<li>
<p>帮助服务器避免进行排序和分组，以及避免创建临时表（B+Tree 索引是有序的，可以用于 ORDER BY 和 GROUP BY 操作。临时表主要是在排序和分组过程中创建，不需要排序和分组，也就不需要创建临时表）。</p>
</li>
<li>
<p>将随机 I/O 变为顺序 I/O（B+Tree 索引是有序的，会将相邻的数据都存储在一起）。</p>
</li>
</ul>
<h3 id="索引的使用条件">索引的使用条件</h3>
<ul>
<li>
<p>对于非常小的表、大部分情况下简单的全表扫描比建立索引更高效；</p>
</li>
<li>
<p>对于中到大型的表，索引就非常有效；</p>
</li>
<li>
<p>但是对于特大型的表，建立和维护索引的代价将会随之增长。这种情况下，需要用到一种技术可以直接区分出需要查询的一组数据，而不是一条记录一条记录地匹配，例如可以使用分区技术。</p>
</li>
</ul>
<h2 id="二查询性能优化">二、查询性能优化</h2>
<h3 id="使用-explain-进行分析">使用 Explain 进行分析</h3>
<p>Explain 用来分析 SELECT 查询语句，开发人员可以通过分析 Explain 结果来优化查询语句。</p>
<p>比较重要的字段有：</p>
<ul>
<li>select_type : 查询类型，有简单查询、联合查询、子查询等</li>
<li>key : 使用的索引</li>
<li>rows : 扫描的行数</li>
</ul>
<h3 id="优化数据访问">优化数据访问</h3>
<h4 id="1-减少请求的数据量">1. 减少请求的数据量</h4>
<ul>
<li>只返回必要的列：最好不要使用 SELECT * 语句。</li>
<li>只返回必要的行：使用 LIMIT 语句来限制返回的数据。</li>
<li>缓存重复查询的数据：使用缓存可以避免在数据库中进行查询，特别在要查询的数据经常被重复查询时，缓存带来的查询性能提升将会是非常明显的。</li>
</ul>
<h4 id="2-减少服务器端扫描的行数">2. 减少服务器端扫描的行数</h4>
<p>最有效的方式是使用索引来覆盖查询。</p>
<h3 id="重构查询方式">重构查询方式</h3>
<h4 id="1-切分大查询">1. 切分大查询</h4>
<p>一个大查询如果一次性执行的话，可能一次锁住很多数据、占满整个事务日志、耗尽系统资源、阻塞很多小的但重要的查询。</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sql" data-lang="sql"><span style="color:#66d9ef">DELETE</span> <span style="color:#66d9ef">FROM</span> messages <span style="color:#66d9ef">WHERE</span> <span style="color:#66d9ef">create</span> <span style="color:#f92672">&lt;</span> DATE_SUB(NOW(), INTERVAL <span style="color:#ae81ff">3</span> <span style="color:#66d9ef">MONTH</span>);
</code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sql" data-lang="sql">rows_affected <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>
<span style="color:#66d9ef">do</span> <span style="color:#960050;background-color:#1e0010">{</span>
    rows_affected <span style="color:#f92672">=</span> do_query(
    <span style="color:#e6db74">&#34;DELETE FROM messages WHERE create  &lt; DATE_SUB(NOW(), INTERVAL 3 MONTH) LIMIT 10000&#34;</span>)
<span style="color:#960050;background-color:#1e0010">}</span> while rows_affected <span style="color:#f92672">&gt;</span> <span style="color:#ae81ff">0</span>
</code></pre></div><h4 id="2-分解大连接查询">2. 分解大连接查询</h4>
<p>将一个大连接查询分解成对每一个表进行一次单表查询，然后在应用程序中进行关联，这样做的好处有：</p>
<ul>
<li>让缓存更高效。对于连接查询，如果其中一个表发生变化，那么整个查询缓存就无法使用。而分解后的多个查询，即使其中一个表发生变化，对其它表的查询缓存依然可以使用。</li>
<li>分解成多个单表查询，这些单表查询的缓存结果更可能被其它查询使用到，从而减少冗余记录的查询。</li>
<li>减少锁竞争；</li>
<li>在应用层进行连接，可以更容易对数据库进行拆分，从而更容易做到高性能和可伸缩。</li>
<li>查询本身效率也可能会有所提升。例如下面的例子中，使用 IN() 代替连接查询，可以让 MySQL 按照 ID 顺序进行查询，这可能比随机的连接要更高效。</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sql" data-lang="sql"><span style="color:#66d9ef">SELECT</span> <span style="color:#f92672">*</span> <span style="color:#66d9ef">FROM</span> tag
<span style="color:#66d9ef">JOIN</span> tag_post <span style="color:#66d9ef">ON</span> tag_post.tag_id<span style="color:#f92672">=</span>tag.id
<span style="color:#66d9ef">JOIN</span> post <span style="color:#66d9ef">ON</span> tag_post.post_id<span style="color:#f92672">=</span>post.id
<span style="color:#66d9ef">WHERE</span> tag.tag<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;mysql&#39;</span>;
</code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sql" data-lang="sql"><span style="color:#66d9ef">SELECT</span> <span style="color:#f92672">*</span> <span style="color:#66d9ef">FROM</span> tag <span style="color:#66d9ef">WHERE</span> tag<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;mysql&#39;</span>;
<span style="color:#66d9ef">SELECT</span> <span style="color:#f92672">*</span> <span style="color:#66d9ef">FROM</span> tag_post <span style="color:#66d9ef">WHERE</span> tag_id<span style="color:#f92672">=</span><span style="color:#ae81ff">1234</span>;
<span style="color:#66d9ef">SELECT</span> <span style="color:#f92672">*</span> <span style="color:#66d9ef">FROM</span> post <span style="color:#66d9ef">WHERE</span> post.id <span style="color:#66d9ef">IN</span> (<span style="color:#ae81ff">123</span>,<span style="color:#ae81ff">456</span>,<span style="color:#ae81ff">567</span>,<span style="color:#ae81ff">9098</span>,<span style="color:#ae81ff">8904</span>);
</code></pre></div><h2 id="三存储引擎">三、存储引擎</h2>
<h3 id="innodb">InnoDB</h3>
<p>是 MySQL 默认的事务型存储引擎，只有在需要它不支持的特性时，才考虑使用其它存储引擎。</p>
<p>实现了四个标准的隔离级别，默认级别是可重复读（REPEATABLE READ）。在可重复读隔离级别下，通过多版本并发控制（MVCC）+ Next-Key Locking 防止幻影读。</p>
<p>主索引是聚簇索引，在索引中保存了数据，从而避免直接读取磁盘，因此对查询性能有很大的提升。</p>
<p>内部做了很多优化，包括从磁盘读取数据时采用的可预测性读、能够加快读操作并且自动创建的自适应哈希索引、能够加速插入操作的插入缓冲区等。</p>
<p>支持真正的在线热备份。其它存储引擎不支持在线热备份，要获取一致性视图需要停止对所有表的写入，而在读写混合场景中，停止写入可能也意味着停止读取。</p>
<h3 id="myisam">MyISAM</h3>
<p>设计简单，数据以紧密格式存储。对于只读数据，或者表比较小、可以容忍修复操作，则依然可以使用它。</p>
<p>提供了大量的特性，包括压缩表、空间数据索引等。</p>
<p>不支持事务。</p>
<p>不支持行级锁，只能对整张表加锁，读取时会对需要读到的所有表加共享锁，写入时则对表加排它锁。但在表有读取操作的同时，也可以往表中插入新的记录，这被称为并发插入（CONCURRENT INSERT）。</p>
<p>可以手工或者自动执行检查和修复操作，但是和事务恢复以及崩溃恢复不同，可能导致一些数据丢失，而且修复操作是非常慢的。</p>
<p>如果指定了 DELAY_KEY_WRITE 选项，在每次修改执行完成时，不会立即将修改的索引数据写入磁盘，而是会写到内存中的键缓冲区，只有在清理键缓冲区或者关闭表的时候才会将对应的索引块写入磁盘。这种方式可以极大的提升写入性能，但是在数据库或者主机崩溃时会造成索引损坏，需要执行修复操作。</p>
<h3 id="比较">比较</h3>
<ul>
<li>
<p>事务：InnoDB 是事务型的，可以使用 Commit 和 Rollback 语句。</p>
</li>
<li>
<p>并发：MyISAM 只支持表级锁，而 InnoDB 还支持行级锁。</p>
</li>
<li>
<p>外键：InnoDB 支持外键。</p>
</li>
<li>
<p>备份：InnoDB 支持在线热备份。</p>
</li>
<li>
<p>崩溃恢复：MyISAM 崩溃后发生损坏的概率比 InnoDB 高很多，而且恢复的速度也更慢。</p>
</li>
<li>
<p>其它特性：MyISAM 支持压缩表和空间数据索引。</p>
</li>
</ul>
<h2 id="四数据类型">四、数据类型</h2>
<h3 id="整型">整型</h3>
<p>TINYINT, SMALLINT, MEDIUMINT, INT, BIGINT 分别使用 8, 16, 24, 32, 64 位存储空间，一般情况下越小的列越好。</p>
<p>INT(11) 中的数字只是规定了交互工具显示字符的个数，对于存储和计算来说是没有意义的。</p>
<h3 id="浮点数">浮点数</h3>
<p>FLOAT 和 DOUBLE 为浮点类型，DECIMAL 为高精度小数类型。CPU 原生支持浮点运算，但是不支持 DECIMAl 类型的计算，因此 DECIMAL 的计算比浮点类型需要更高的代价。</p>
<p>FLOAT、DOUBLE 和 DECIMAL 都可以指定列宽，例如 DECIMAL(18, 9) 表示总共 18 位，取 9 位存储小数部分，剩下 9 位存储整数部分。</p>
<h3 id="字符串">字符串</h3>
<p>主要有 CHAR 和 VARCHAR 两种类型，一种是定长的，一种是变长的。</p>
<p>VARCHAR 这种变长类型能够节省空间，因为只需要存储必要的内容。但是在执行 UPDATE 时可能会使行变得比原来长，当超出一个页所能容纳的大小时，就要执行额外的操作。MyISAM 会将行拆成不同的片段存储，而 InnoDB 则需要分裂页来使行放进页内。</p>
<p>在进行存储和检索时，会保留 VARCHAR 末尾的空格，而会删除 CHAR 末尾的空格。</p>
<h3 id="时间和日期">时间和日期</h3>
<p>MySQL 提供了两种相似的日期时间类型：DATETIME 和 TIMESTAMP。</p>
<h4 id="1-datetime">1. DATETIME</h4>
<p>能够保存从 1000 年到 9999 年的日期和时间，精度为秒，使用 8 字节的存储空间。</p>
<p>它与时区无关。</p>
<p>默认情况下，MySQL 以一种可排序的、无歧义的格式显示 DATETIME 值，例如“2008-01-16 22:37:08”，这是 ANSI 标准定义的日期和时间表示方法。</p>
<h4 id="2-timestamp">2. TIMESTAMP</h4>
<p>和 UNIX 时间戳相同，保存从 1970 年 1 月 1 日午夜（格林威治时间）以来的秒数，使用 4 个字节，只能表示从 1970 年到 2038 年。</p>
<p>它和时区有关，也就是说一个时间戳在不同的时区所代表的具体时间是不同的。</p>
<p>MySQL 提供了 FROM_UNIXTIME() 函数把 UNIX 时间戳转换为日期，并提供了 UNIX_TIMESTAMP() 函数把日期转换为 UNIX 时间戳。</p>
<p>默认情况下，如果插入时没有指定 TIMESTAMP 列的值，会将这个值设置为当前时间。</p>
<p>应该尽量使用 TIMESTAMP，因为它比 DATETIME 空间效率更高。</p>
<h2 id="五切分">五、切分</h2>
<h3 id="水平切分">水平切分</h3>
<p>水平切分又称为 Sharding，它是将同一个表中的记录拆分到多个结构相同的表中。</p>
<p>当一个表的数据不断增多时，Sharding 是必然的选择，它可以将数据分布到集群的不同节点上，从而缓存单个数据库的压力。</p>
<div align="center"> <img src="https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/63c2909f-0c5f-496f-9fe5-ee9176b31aba.jpg" width=""> </div><br>
<h3 id="垂直切分">垂直切分</h3>
<p>垂直切分是将一张表按列切分成多个表，通常是按照列的关系密集程度进行切分，也可以利用垂直切分将经常被使用的列和不经常被使用的列切分到不同的表中。</p>
<p>在数据库的层面使用垂直切分将按数据库中表的密集程度部署到不同的库中，例如将原来的电商数据库垂直切分成商品数据库、用户数据库等。</p>
<div align="center"> <img src="https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/e130e5b8-b19a-4f1e-b860-223040525cf6.jpg" width=""> </div><br>
<h3 id="sharding-策略">Sharding 策略</h3>
<ul>
<li>哈希取模：hash(key) % N；</li>
<li>范围：可以是 ID 范围也可以是时间范围；</li>
<li>映射表：使用单独的一个数据库来存储映射关系。</li>
</ul>
<h3 id="sharding-存在的问题">Sharding 存在的问题</h3>
<h4 id="1-事务问题">1. 事务问题</h4>
<p>使用分布式事务来解决，比如 XA 接口。</p>
<h4 id="2-连接">2. 连接</h4>
<p>可以将原来的连接分解成多个单表查询，然后在用户程序中进行连接。</p>
<h4 id="3-id-唯一性">3. ID 唯一性</h4>
<ul>
<li>使用全局唯一 ID（GUID）</li>
<li>为每个分片指定一个 ID 范围</li>
<li>分布式 ID 生成器 (如 Twitter 的 Snowflake 算法)</li>
</ul>
<h2 id="六复制">六、复制</h2>
<h3 id="主从复制">主从复制</h3>
<p>主要涉及三个线程：binlog 线程、I/O 线程和 SQL 线程。</p>
<ul>
<li><strong>binlog 线程</strong>  ：负责将主服务器上的数据更改写入二进制日志（Binary log）中。</li>
<li><strong>I/O 线程</strong>  ：负责从主服务器上读取二进制日志，并写入从服务器的中继日志（Relay log）。</li>
<li><strong>SQL 线程</strong>  ：负责读取中继日志，解析出主服务器已经执行的数据更改并在从服务器中重放（Replay）。</li>
</ul>
<div align="center"> <img src="https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/master-slave.png" width=""> </div><br>
<h3 id="读写分离">读写分离</h3>
<p>主服务器处理写操作以及实时性要求比较高的读操作，而从服务器处理读操作。</p>
<p>读写分离能提高性能的原因在于：</p>
<ul>
<li>主从服务器负责各自的读和写，极大程度缓解了锁的争用；</li>
<li>从服务器可以使用 MyISAM，提升查询性能以及节约系统开销；</li>
<li>增加冗余，提高可用性。</li>
</ul>
<p>读写分离常用代理方式来实现，代理服务器接收应用层传来的读写请求，然后决定转发到哪个服务器。</p>
<div align="center"> <img src="https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/master-slave-proxy.png" width=""> </div><br>
<h2 id="参考资料">参考资料</h2>
<ul>
<li>BaronScbwartz, PeterZaitsev, VadimTkacbenko, 等. 高性能 MySQL[M]. 电子工业出版社, 2013.</li>
<li>姜承尧. MySQL 技术内幕: InnoDB 存储引擎 [M]. 机械工业出版社, 2011.</li>
<li><a href="https://www.jfox.info/20-tiao-mysql-xing-nen-you-hua-de-zui-jia-jing-yan.html">20+ 条 MySQL 性能优化的最佳经验</a></li>
<li><a href="http://blog.720ui.com/2017/mysql_core_09_multi_db_table2/" title="服务端指南 数据存储篇 | MySQL（09） 分库与分表带来的分布式困境与应对之策">服务端指南 数据存储篇 | MySQL（09） 分库与分表带来的分布式困境与应对之策</a></li>
<li><a href="https://stackoverflow.com/questions/788829/how-to-create-unique-row-id-in-sharded-databases">How to create unique row ID in sharded databases?</a></li>
<li><a href="http://geekswithblogs.net/shaunxu/archive/2012/01/07/sql-azure-federation-ndash-introduction.aspx" title="Title of this entry.">SQL Azure Federation – Introduction</a></li>
<li><a href="http://blog.codinglabs.org/articles/theory-of-mysql-index.html">MySQL 索引背后的数据结构及算法原理</a></li>
<li><a href="https://segmentfault.com/a/1190000008131735">MySQL 性能优化神器 Explain 使用分析</a></li>
<li><a href="https://medium.com/@jeeyoungk/how-sharding-works-b4dec46b3f6">How Sharding Works</a></li>
<li><a href="https://tech.meituan.com/dianping_order_db_sharding.html">大众点评订单系统分库分表实践</a></li>
<li><a href="https://zh.wikipedia.org/wiki/B%2B%E6%A0%91">B + 树</a></li>
</ul>

        
        ]]>
      </description>
    </item>
    
    
    
    <item>
      <title>【转载】数据库系统原理</title>
      <link>/post/2021/12/22/%E8%BD%AC%E8%BD%BD%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E5%8E%9F%E7%90%86/</link>
      <pubDate>Wed, 22 Dec 2021 23:28:00 +0800</pubDate>
      <author>糸色生</author>
      <guid>/post/2021/12/22/%E8%BD%AC%E8%BD%BD%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E5%8E%9F%E7%90%86/</guid>
      <description>
        <![CDATA[
        <h1 id="数据库系统原理">数据库系统原理</h1>
<!-- GFM-TOC -->
<ul>
<li><a href="#%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E5%8E%9F%E7%90%86">数据库系统原理</a>
<ul>
<li><a href="#%E4%B8%80%E4%BA%8B%E5%8A%A1">一、事务</a>
<ul>
<li><a href="#%E6%A6%82%E5%BF%B5">概念</a></li>
<li><a href="#acid">ACID</a></li>
<li><a href="#autocommit">AUTOCOMMIT</a></li>
</ul>
</li>
<li><a href="#%E4%BA%8C%E5%B9%B6%E5%8F%91%E4%B8%80%E8%87%B4%E6%80%A7%E9%97%AE%E9%A2%98">二、并发一致性问题</a>
<ul>
<li><a href="#%E4%B8%A2%E5%A4%B1%E4%BF%AE%E6%94%B9">丢失修改</a></li>
<li><a href="#%E8%AF%BB%E8%84%8F%E6%95%B0%E6%8D%AE">读脏数据</a></li>
<li><a href="#%E4%B8%8D%E5%8F%AF%E9%87%8D%E5%A4%8D%E8%AF%BB">不可重复读</a></li>
<li><a href="#%E5%B9%BB%E5%BD%B1%E8%AF%BB">幻影读</a></li>
</ul>
</li>
<li><a href="#%E4%B8%89%E5%B0%81%E9%94%81">三、封锁</a>
<ul>
<li><a href="#%E5%B0%81%E9%94%81%E7%B2%92%E5%BA%A6">封锁粒度</a></li>
<li><a href="#%E5%B0%81%E9%94%81%E7%B1%BB%E5%9E%8B">封锁类型</a></li>
<li><a href="#%E5%B0%81%E9%94%81%E5%8D%8F%E8%AE%AE">封锁协议</a></li>
<li><a href="#mysql-%E9%9A%90%E5%BC%8F%E4%B8%8E%E6%98%BE%E5%BC%8F%E9%94%81%E5%AE%9A">MySQL 隐式与显式锁定</a></li>
</ul>
</li>
<li><a href="#%E5%9B%9B%E9%9A%94%E7%A6%BB%E7%BA%A7%E5%88%AB">四、隔离级别</a>
<ul>
<li><a href="#%E6%9C%AA%E6%8F%90%E4%BA%A4%E8%AF%BBread-uncommitted">未提交读（READ UNCOMMITTED）</a></li>
<li><a href="#%E6%8F%90%E4%BA%A4%E8%AF%BBread-committed">提交读（READ COMMITTED）</a></li>
<li><a href="#%E5%8F%AF%E9%87%8D%E5%A4%8D%E8%AF%BBrepeatable-read">可重复读（REPEATABLE READ）</a></li>
<li><a href="#%E5%8F%AF%E4%B8%B2%E8%A1%8C%E5%8C%96serializable">可串行化（SERIALIZABLE）</a></li>
</ul>
</li>
<li><a href="#%E4%BA%94%E5%A4%9A%E7%89%88%E6%9C%AC%E5%B9%B6%E5%8F%91%E6%8E%A7%E5%88%B6">五、多版本并发控制</a>
<ul>
<li><a href="#%E5%9F%BA%E6%9C%AC%E6%80%9D%E6%83%B3">基本思想</a></li>
<li><a href="#%E7%89%88%E6%9C%AC%E5%8F%B7">版本号</a></li>
<li><a href="#undo-%E6%97%A5%E5%BF%97">Undo 日志</a></li>
<li><a href="#readview">ReadView</a></li>
<li><a href="#%E5%BF%AB%E7%85%A7%E8%AF%BB%E4%B8%8E%E5%BD%93%E5%89%8D%E8%AF%BB">快照读与当前读</a></li>
</ul>
</li>
<li><a href="#%E5%85%ADnext-key-locks">六、Next-Key Locks</a>
<ul>
<li><a href="#record-locks">Record Locks</a></li>
<li><a href="#gap-locks">Gap Locks</a></li>
<li><a href="#next-key-locks">Next-Key Locks</a></li>
</ul>
</li>
<li><a href="#%E4%B8%83%E5%85%B3%E7%B3%BB%E6%95%B0%E6%8D%AE%E5%BA%93%E8%AE%BE%E8%AE%A1%E7%90%86%E8%AE%BA">七、关系数据库设计理论</a>
<ul>
<li><a href="#%E5%87%BD%E6%95%B0%E4%BE%9D%E8%B5%96">函数依赖</a></li>
<li><a href="#%E5%BC%82%E5%B8%B8">异常</a></li>
<li><a href="#%E8%8C%83%E5%BC%8F">范式</a></li>
</ul>
</li>
<li><a href="#%E5%85%ABer-%E5%9B%BE">八、ER 图</a>
<ul>
<li><a href="#%E5%AE%9E%E4%BD%93%E7%9A%84%E4%B8%89%E7%A7%8D%E8%81%94%E7%B3%BB">实体的三种联系</a></li>
<li><a href="#%E8%A1%A8%E7%A4%BA%E5%87%BA%E7%8E%B0%E5%A4%9A%E6%AC%A1%E7%9A%84%E5%85%B3%E7%B3%BB">表示出现多次的关系</a></li>
<li><a href="#%E8%81%94%E7%B3%BB%E7%9A%84%E5%A4%9A%E5%90%91%E6%80%A7">联系的多向性</a></li>
<li><a href="#%E8%A1%A8%E7%A4%BA%E5%AD%90%E7%B1%BB">表示子类</a></li>
</ul>
</li>
<li><a href="#%E5%8F%82%E8%80%83%E8%B5%84%E6%96%99">参考资料</a></li>
</ul>
</li>
</ul>
<!-- GFM-TOC -->
<h2 id="一事务">一、事务</h2>
<h3 id="概念">概念</h3>
<p>事务指的是满足 ACID 特性的一组操作，可以通过 Commit 提交一个事务，也可以使用 Rollback 进行回滚。</p>
<div align="center"> <img src="https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/image-20191207222237925.png"/> </div><br>
<h3 id="acid">ACID</h3>
<h4 id="1-原子性atomicity">1. 原子性（Atomicity）</h4>
<p>事务被视为不可分割的最小单元，事务的所有操作要么全部提交成功，要么全部失败回滚。</p>
<p>回滚可以用回滚日志（Undo Log）来实现，回滚日志记录着事务所执行的修改操作，在回滚时反向执行这些修改操作即可。</p>
<h4 id="2-一致性consistency">2. 一致性（Consistency）</h4>
<p>数据库在事务执行前后都保持一致性状态。在一致性状态下，所有事务对同一个数据的读取结果都是相同的。</p>
<h4 id="3-隔离性isolation">3. 隔离性（Isolation）</h4>
<p>一个事务所做的修改在最终提交以前，对其它事务是不可见的。</p>
<h4 id="4-持久性durability">4. 持久性（Durability）</h4>
<p>一旦事务提交，则其所做的修改将会永远保存到数据库中。即使系统发生崩溃，事务执行的结果也不能丢失。</p>
<p>系统发生崩溃可以用重做日志（Redo Log）进行恢复，从而实现持久性。与回滚日志记录数据的逻辑修改不同，重做日志记录的是数据页的物理修改。</p>
<hr>
<p>事务的 ACID 特性概念简单，但不是很好理解，主要是因为这几个特性不是一种平级关系：</p>
<ul>
<li>只有满足一致性，事务的执行结果才是正确的。</li>
<li>在无并发的情况下，事务串行执行，隔离性一定能够满足。此时只要能满足原子性，就一定能满足一致性。</li>
<li>在并发的情况下，多个事务并行执行，事务不仅要满足原子性，还需要满足隔离性，才能满足一致性。</li>
<li>事务满足持久化是为了能应对系统崩溃的情况。</li>
</ul>
<div align="center"> <img src="https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/image-20191207210437023.png"/> </div><br>
<h3 id="autocommit">AUTOCOMMIT</h3>
<p>MySQL 默认采用自动提交模式。也就是说，如果不显式使用<code>START TRANSACTION</code>语句来开始一个事务，那么每个查询操作都会被当做一个事务并自动提交。</p>
<h2 id="二并发一致性问题">二、并发一致性问题</h2>
<p>在并发环境下，事务的隔离性很难保证，因此会出现很多并发一致性问题。</p>
<h3 id="丢失修改">丢失修改</h3>
<p>丢失修改指一个事务的更新操作被另外一个事务的更新操作替换。一般在现实生活中常会遇到，例如：T<sub>1</sub> 和 T<sub>2</sub> 两个事务都对一个数据进行修改，T<sub>1</sub> 先修改并提交生效，T<sub>2</sub> 随后修改，T<sub>2</sub> 的修改覆盖了 T<sub>1</sub> 的修改。</p>
<div align="center"> <img src="https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/image-20191207221744244.png"/> </div><br>
<h3 id="读脏数据">读脏数据</h3>
<p>读脏数据指在不同的事务下，当前事务可以读到另外事务未提交的数据。例如：T<sub>1</sub> 修改一个数据但未提交，T<sub>2</sub> 随后读取这个数据。如果 T<sub>1</sub> 撤销了这次修改，那么 T<sub>2</sub> 读取的数据是脏数据。</p>
<div align="center"> <img src="https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/image-20191207221920368.png"/> </div><br>
<h3 id="不可重复读">不可重复读</h3>
<p>不可重复读指在一个事务内多次读取同一数据集合。在这一事务还未结束前，另一事务也访问了该同一数据集合并做了修改，由于第二个事务的修改，第一次事务的两次读取的数据可能不一致。例如：T<sub>2</sub> 读取一个数据，T<sub>1</sub> 对该数据做了修改。如果 T<sub>2</sub> 再次读取这个数据，此时读取的结果和第一次读取的结果不同。</p>
<div align="center"> <img src="https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/image-20191207222102010.png"/> </div><br>
<h3 id="幻影读">幻影读</h3>
<p>幻读本质上也属于不可重复读的情况，T<sub>1</sub> 读取某个范围的数据，T<sub>2</sub> 在这个范围内插入新的数据，T<sub>1</sub> 再次读取这个范围的数据，此时读取的结果和和第一次读取的结果不同。</p>
<div align="center"> <img src="https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/image-20191207222134306.png"/> </div><br>
<hr>
<p>产生并发不一致性问题的主要原因是破坏了事务的隔离性，解决方法是通过并发控制来保证隔离性。并发控制可以通过封锁来实现，但是封锁操作需要用户自己控制，相当复杂。数据库管理系统提供了事务的隔离级别，让用户以一种更轻松的方式处理并发一致性问题。</p>
<h2 id="三封锁">三、封锁</h2>
<h3 id="封锁粒度">封锁粒度</h3>
<p>MySQL 中提供了两种封锁粒度：行级锁以及表级锁。</p>
<p>应该尽量只锁定需要修改的那部分数据，而不是所有的资源。锁定的数据量越少，发生锁争用的可能就越小，系统的并发程度就越高。</p>
<p>但是加锁需要消耗资源，锁的各种操作（包括获取锁、释放锁、以及检查锁状态）都会增加系统开销。因此封锁粒度越小，系统开销就越大。</p>
<p>在选择封锁粒度时，需要在锁开销和并发程度之间做一个权衡。</p>
<h3 id="封锁类型">封锁类型</h3>
<h4 id="1-读写锁">1. 读写锁</h4>
<ul>
<li>互斥锁（Exclusive），简写为 X 锁，又称写锁。</li>
<li>共享锁（Shared），简写为 S 锁，又称读锁。</li>
</ul>
<p>有以下两个规定：</p>
<ul>
<li>一个事务对数据对象 A 加了 X 锁，就可以对 A 进行读取和更新。加锁期间其它事务不能对 A 加任何锁。</li>
<li>一个事务对数据对象 A 加了 S 锁，可以对 A 进行读取操作，但是不能进行更新操作。加锁期间其它事务能对 A 加 S 锁，但是不能加 X 锁。</li>
</ul>
<p>锁的兼容关系如下：</p>
<div align="center"> <img src="https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/image-20191207213523777.png"/> </div><br>
<h4 id="2-意向锁">2. 意向锁</h4>
<p>使用意向锁（Intention Locks）可以更容易地支持多粒度封锁。</p>
<p>在存在行级锁和表级锁的情况下，事务 T 想要对表 A 加 X 锁，就需要先检测是否有其它事务对表 A 或者表 A 中的任意一行加了锁，那么就需要对表 A 的每一行都检测一次，这是非常耗时的。</p>
<p>意向锁在原来的 X/S 锁之上引入了 IX/IS，IX/IS 都是表锁，用来表示一个事务想要在表中的某个数据行上加 X 锁或 S 锁。有以下两个规定：</p>
<ul>
<li>一个事务在获得某个数据行对象的 S 锁之前，必须先获得表的 IS 锁或者更强的锁；</li>
<li>一个事务在获得某个数据行对象的 X 锁之前，必须先获得表的 IX 锁。</li>
</ul>
<p>通过引入意向锁，事务 T 想要对表 A 加 X 锁，只需要先检测是否有其它事务对表 A 加了 X/IX/S/IS 锁，如果加了就表示有其它事务正在使用这个表或者表中某一行的锁，因此事务 T 加 X 锁失败。</p>
<p>各种锁的兼容关系如下：</p>
<div align="center"> <img src="https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/image-20191207214442687.png"/> </div><br>
<p>解释如下：</p>
<ul>
<li>任意 IS/IX 锁之间都是兼容的，因为它们只表示想要对表加锁，而不是真正加锁；</li>
<li>这里兼容关系针对的是表级锁，而表级的 IX 锁和行级的 X 锁兼容，两个事务可以对两个数据行加 X 锁。（事务 T<sub>1</sub> 想要对数据行 R<sub>1</sub> 加 X 锁，事务 T<sub>2</sub> 想要对同一个表的数据行 R<sub>2</sub> 加 X 锁，两个事务都需要对该表加 IX 锁，但是 IX 锁是兼容的，并且 IX 锁与行级的 X 锁也是兼容的，因此两个事务都能加锁成功，对同一个表中的两个数据行做修改。）</li>
</ul>
<h3 id="封锁协议">封锁协议</h3>
<h4 id="1-三级封锁协议">1. 三级封锁协议</h4>
<p><strong>一级封锁协议</strong></p>
<p>事务 T 要修改数据 A 时必须加 X 锁，直到 T 结束才释放锁。</p>
<p>可以解决丢失修改问题，因为不能同时有两个事务对同一个数据进行修改，那么事务的修改就不会被覆盖。</p>
<div align="center"> <img src="https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/image-20191207220440451.png"/> </div><br>
<p><strong>二级封锁协议</strong></p>
<p>在一级的基础上，要求读取数据 A 时必须加 S 锁，读取完马上释放 S 锁。</p>
<p>可以解决读脏数据问题，因为如果一个事务在对数据 A 进行修改，根据 1 级封锁协议，会加 X 锁，那么就不能再加 S 锁了，也就是不会读入数据。</p>
<div align="center"> <img src="https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/image-20191207220831843.png"/> </div><br>
<p><strong>三级封锁协议</strong></p>
<p>在二级的基础上，要求读取数据 A 时必须加 S 锁，直到事务结束了才能释放 S 锁。</p>
<p>可以解决不可重复读的问题，因为读 A 时，其它事务不能对 A 加 X 锁，从而避免了在读的期间数据发生改变。</p>
<div align="center"> <img src="https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/image-20191207221313819.png"/> </div><br>
<h4 id="2-两段锁协议">2. 两段锁协议</h4>
<p>加锁和解锁分为两个阶段进行。</p>
<p>可串行化调度是指，通过并发控制，使得并发执行的事务结果与某个串行执行的事务结果相同。串行执行的事务互不干扰，不会出现并发一致性问题。</p>
<p>事务遵循两段锁协议是保证可串行化调度的充分条件。例如以下操作满足两段锁协议，它是可串行化调度。</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-html" data-lang="html">lock-x(A)...lock-s(B)...lock-s(C)...unlock(A)...unlock(C)...unlock(B)
</code></pre></div><p>但不是必要条件，例如以下操作不满足两段锁协议，但它还是可串行化调度。</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-html" data-lang="html">lock-x(A)...unlock(A)...lock-s(B)...unlock(B)...lock-s(C)...unlock(C)
</code></pre></div><h3 id="mysql-隐式与显式锁定">MySQL 隐式与显式锁定</h3>
<p>MySQL 的 InnoDB 存储引擎采用两段锁协议，会根据隔离级别在需要的时候自动加锁，并且所有的锁都是在同一时刻被释放，这被称为隐式锁定。</p>
<p>InnoDB 也可以使用特定的语句进行显示锁定：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sql" data-lang="sql"><span style="color:#66d9ef">SELECT</span> ... <span style="color:#66d9ef">LOCK</span> <span style="color:#66d9ef">In</span> <span style="color:#66d9ef">SHARE</span> <span style="color:#66d9ef">MODE</span>;
<span style="color:#66d9ef">SELECT</span> ... <span style="color:#66d9ef">FOR</span> <span style="color:#66d9ef">UPDATE</span>;
</code></pre></div><h2 id="四隔离级别">四、隔离级别</h2>
<h3 id="未提交读read-uncommitted">未提交读（READ UNCOMMITTED）</h3>
<p>事务中的修改，即使没有提交，对其它事务也是可见的。</p>
<h3 id="提交读read-committed">提交读（READ COMMITTED）</h3>
<p>一个事务只能读取已经提交的事务所做的修改。换句话说，一个事务所做的修改在提交之前对其它事务是不可见的。</p>
<h3 id="可重复读repeatable-read">可重复读（REPEATABLE READ）</h3>
<p>保证在同一个事务中多次读取同一数据的结果是一样的。</p>
<h3 id="可串行化serializable">可串行化（SERIALIZABLE）</h3>
<p>强制事务串行执行，这样多个事务互不干扰，不会出现并发一致性问题。</p>
<p>该隔离级别需要加锁实现，因为要使用加锁机制保证同一时间只有一个事务执行，也就是保证事务串行执行。</p>
<hr>
<div align="center"> <img src="https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/image-20191207223400787.png"/> </div><br>
<h2 id="五多版本并发控制">五、多版本并发控制</h2>
<p>多版本并发控制（Multi-Version Concurrency Control, MVCC）是 MySQL 的 InnoDB 存储引擎实现隔离级别的一种具体方式，用于实现提交读和可重复读这两种隔离级别。而未提交读隔离级别总是读取最新的数据行，要求很低，无需使用 MVCC。可串行化隔离级别需要对所有读取的行都加锁，单纯使用 MVCC 无法实现。</p>
<h3 id="基本思想">基本思想</h3>
<p>在封锁一节中提到，加锁能解决多个事务同时执行时出现的并发一致性问题。在实际场景中读操作往往多于写操作，因此又引入了读写锁来避免不必要的加锁操作，例如读和读没有互斥关系。读写锁中读和写操作仍然是互斥的，而 MVCC 利用了多版本的思想，写操作更新最新的版本快照，而读操作去读旧版本快照，没有互斥关系，这一点和 CopyOnWrite 类似。</p>
<p>在 MVCC 中事务的修改操作（DELETE、INSERT、UPDATE）会为数据行新增一个版本快照。</p>
<p>脏读和不可重复读最根本的原因是事务读取到其它事务未提交的修改。在事务进行读取操作时，为了解决脏读和不可重复读问题，MVCC 规定只能读取已经提交的快照。当然一个事务可以读取自身未提交的快照，这不算是脏读。</p>
<h3 id="版本号">版本号</h3>
<ul>
<li>系统版本号 SYS_ID：是一个递增的数字，每开始一个新的事务，系统版本号就会自动递增。</li>
<li>事务版本号 TRX_ID ：事务开始时的系统版本号。</li>
</ul>
<h3 id="undo-日志">Undo 日志</h3>
<p>MVCC 的多版本指的是多个版本的快照，快照存储在 Undo 日志中，该日志通过回滚指针 ROLL_PTR 把一个数据行的所有快照连接起来。</p>
<p>例如在 MySQL 创建一个表 t，包含主键 id 和一个字段 x。我们先插入一个数据行，然后对该数据行执行两次更新操作。</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sql" data-lang="sql"><span style="color:#66d9ef">INSERT</span> <span style="color:#66d9ef">INTO</span> t(id, x) <span style="color:#66d9ef">VALUES</span>(<span style="color:#ae81ff">1</span>, <span style="color:#e6db74">&#34;a&#34;</span>);
<span style="color:#66d9ef">UPDATE</span> t <span style="color:#66d9ef">SET</span> x<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;b&#34;</span> <span style="color:#66d9ef">WHERE</span> id<span style="color:#f92672">=</span><span style="color:#ae81ff">1</span>;
<span style="color:#66d9ef">UPDATE</span> t <span style="color:#66d9ef">SET</span> x<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;c&#34;</span> <span style="color:#66d9ef">WHERE</span> id<span style="color:#f92672">=</span><span style="color:#ae81ff">1</span>;
</code></pre></div><p>因为没有使用 <code>START TRANSACTION</code> 将上面的操作当成一个事务来执行，根据 MySQL 的 AUTOCOMMIT 机制，每个操作都会被当成一个事务来执行，所以上面的操作总共涉及到三个事务。快照中除了记录事务版本号 TRX_ID 和操作之外，还记录了一个 bit 的 DEL 字段，用于标记是否被删除。</p>
<div align="center"> <img src="https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/image-20191208164808217.png"/> </div><br>
<p>INSERT、UPDATE、DELETE 操作会创建一个日志，并将事务版本号 TRX_ID  写入。DELETE 可以看成是一个特殊的 UPDATE，还会额外将 DEL 字段设置为 1。</p>
<h3 id="readview">ReadView</h3>
<p>MVCC 维护了一个 ReadView 结构，主要包含了当前系统未提交的事务列表 TRX_IDs {TRX_ID_1, TRX_ID_2, &hellip;}，还有该列表的最小值 TRX_ID_MIN 和 TRX_ID_MAX。</p>
<div align="center"> <img src="https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/image-20191208171445674.png"/> </div><br>
<p>在进行 SELECT 操作时，根据数据行快照的 TRX_ID 与 TRX_ID_MIN 和 TRX_ID_MAX 之间的关系，从而判断数据行快照是否可以使用：</p>
<ul>
<li>
<p>TRX_ID &lt; TRX_ID_MIN，表示该数据行快照时在当前所有未提交事务之前进行更改的，因此可以使用。</p>
</li>
<li>
<p>TRX_ID &gt; TRX_ID_MAX，表示该数据行快照是在事务启动之后被更改的，因此不可使用。</p>
</li>
<li>
<p>TRX_ID_MIN &lt;= TRX_ID &lt;= TRX_ID_MAX，需要根据隔离级别再进行判断：</p>
<ul>
<li>提交读：如果 TRX_ID  在 TRX_IDs  列表中，表示该数据行快照对应的事务还未提交，则该快照不可使用。否则表示已经提交，可以使用。</li>
<li>可重复读：都不可以使用。因为如果可以使用的话，那么其它事务也可以读到这个数据行快照并进行修改，那么当前事务再去读这个数据行得到的值就会发生改变，也就是出现了不可重复读问题。</li>
</ul>
</li>
</ul>
<p>在数据行快照不可使用的情况下，需要沿着 Undo Log 的回滚指针 ROLL_PTR  找到下一个快照，再进行上面的判断。</p>
<h3 id="快照读与当前读">快照读与当前读</h3>
<h4 id="1-快照读">1. 快照读</h4>
<p>MVCC 的 SELECT 操作是快照中的数据，不需要进行加锁操作。</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sql" data-lang="sql"><span style="color:#66d9ef">SELECT</span> <span style="color:#f92672">*</span> <span style="color:#66d9ef">FROM</span> <span style="color:#66d9ef">table</span> ...;
</code></pre></div><h4 id="2-当前读">2. 当前读</h4>
<p>MVCC 其它会对数据库进行修改的操作（INSERT、UPDATE、DELETE）需要进行加锁操作，从而读取最新的数据。可以看到 MVCC 并不是完全不用加锁，而只是避免了 SELECT 的加锁操作。</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sql" data-lang="sql"><span style="color:#66d9ef">INSERT</span>;
<span style="color:#66d9ef">UPDATE</span>;
<span style="color:#66d9ef">DELETE</span>;
</code></pre></div><p>在进行 SELECT 操作时，可以强制指定进行加锁操作。以下第一个语句需要加 S 锁，第二个需要加 X 锁。</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sql" data-lang="sql"><span style="color:#66d9ef">SELECT</span> <span style="color:#f92672">*</span> <span style="color:#66d9ef">FROM</span> <span style="color:#66d9ef">table</span> <span style="color:#66d9ef">WHERE</span> <span style="color:#f92672">?</span> <span style="color:#66d9ef">lock</span> <span style="color:#66d9ef">in</span> <span style="color:#66d9ef">share</span> <span style="color:#66d9ef">mode</span>;
<span style="color:#66d9ef">SELECT</span> <span style="color:#f92672">*</span> <span style="color:#66d9ef">FROM</span> <span style="color:#66d9ef">table</span> <span style="color:#66d9ef">WHERE</span> <span style="color:#f92672">?</span> <span style="color:#66d9ef">for</span> <span style="color:#66d9ef">update</span>;
</code></pre></div><h2 id="六next-key-locks">六、Next-Key Locks</h2>
<p>Next-Key Locks 是 MySQL 的 InnoDB 存储引擎的一种锁实现。</p>
<p>MVCC 不能解决幻影读问题，Next-Key Locks 就是为了解决这个问题而存在的。在可重复读（REPEATABLE READ）隔离级别下，使用 MVCC + Next-Key Locks 可以解决幻读问题。</p>
<h3 id="record-locks">Record Locks</h3>
<p>锁定一个记录上的索引，而不是记录本身。</p>
<p>如果表没有设置索引，InnoDB 会自动在主键上创建隐藏的聚簇索引，因此 Record Locks 依然可以使用。</p>
<h3 id="gap-locks">Gap Locks</h3>
<p>锁定索引之间的间隙，但是不包含索引本身。例如当一个事务执行以下语句，其它事务就不能在 t.c 中插入 15。</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sql" data-lang="sql"><span style="color:#66d9ef">SELECT</span> <span style="color:#66d9ef">c</span> <span style="color:#66d9ef">FROM</span> t <span style="color:#66d9ef">WHERE</span> <span style="color:#66d9ef">c</span> <span style="color:#66d9ef">BETWEEN</span> <span style="color:#ae81ff">10</span> <span style="color:#66d9ef">and</span> <span style="color:#ae81ff">20</span> <span style="color:#66d9ef">FOR</span> <span style="color:#66d9ef">UPDATE</span>;
</code></pre></div><h3 id="next-key-locks">Next-Key Locks</h3>
<p>它是 Record Locks 和 Gap Locks 的结合，不仅锁定一个记录上的索引，也锁定索引之间的间隙。它锁定一个前开后闭区间，例如一个索引包含以下值：10, 11, 13, and 20，那么就需要锁定以下区间：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sql" data-lang="sql">(<span style="color:#f92672">-</span><span style="color:#960050;background-color:#1e0010">∞</span>, <span style="color:#ae81ff">10</span>]
(<span style="color:#ae81ff">10</span>, <span style="color:#ae81ff">11</span>]
(<span style="color:#ae81ff">11</span>, <span style="color:#ae81ff">13</span>]
(<span style="color:#ae81ff">13</span>, <span style="color:#ae81ff">20</span>]
(<span style="color:#ae81ff">20</span>, <span style="color:#f92672">+</span><span style="color:#960050;background-color:#1e0010">∞</span>)
</code></pre></div><h2 id="七关系数据库设计理论">七、关系数据库设计理论</h2>
<h3 id="函数依赖">函数依赖</h3>
<p>记 A-&gt;B 表示 A 函数决定 B，也可以说 B 函数依赖于 A。</p>
<p>如果 {A1，A2，&hellip; ，An} 是关系的一个或多个属性的集合，该集合函数决定了关系的其它所有属性并且是最小的，那么该集合就称为键码。</p>
<p>对于 A-&gt;B，如果能找到 A 的真子集 A'，使得 A'-&gt; B，那么 A-&gt;B 就是部分函数依赖，否则就是完全函数依赖。</p>
<p>对于 A-&gt;B，B-&gt;C，则 A-&gt;C 是一个传递函数依赖。</p>
<h3 id="异常">异常</h3>
<p>以下的学生课程关系的函数依赖为 {Sno, Cname} -&gt; {Sname, Sdept, Mname, Grade}，键码为 {Sno, Cname}。也就是说，确定学生和课程之后，就能确定其它信息。</p>
<table>
<thead>
<tr>
<th style="text-align:center">Sno</th>
<th style="text-align:center">Sname</th>
<th style="text-align:center">Sdept</th>
<th style="text-align:center">Mname</th>
<th style="text-align:center">Cname</th>
<th style="text-align:center">Grade</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">1</td>
<td style="text-align:center">学生-1</td>
<td style="text-align:center">学院-1</td>
<td style="text-align:center">院长-1</td>
<td style="text-align:center">课程-1</td>
<td style="text-align:center">90</td>
</tr>
<tr>
<td style="text-align:center">2</td>
<td style="text-align:center">学生-2</td>
<td style="text-align:center">学院-2</td>
<td style="text-align:center">院长-2</td>
<td style="text-align:center">课程-2</td>
<td style="text-align:center">80</td>
</tr>
<tr>
<td style="text-align:center">2</td>
<td style="text-align:center">学生-2</td>
<td style="text-align:center">学院-2</td>
<td style="text-align:center">院长-2</td>
<td style="text-align:center">课程-1</td>
<td style="text-align:center">100</td>
</tr>
<tr>
<td style="text-align:center">3</td>
<td style="text-align:center">学生-3</td>
<td style="text-align:center">学院-2</td>
<td style="text-align:center">院长-2</td>
<td style="text-align:center">课程-2</td>
<td style="text-align:center">95</td>
</tr>
</tbody>
</table>
<p>不符合范式的关系，会产生很多异常，主要有以下四种异常：</p>
<ul>
<li>冗余数据：例如 <code>学生-2</code> 出现了两次。</li>
<li>修改异常：修改了一个记录中的信息，但是另一个记录中相同的信息却没有被修改。</li>
<li>删除异常：删除一个信息，那么也会丢失其它信息。例如删除了 <code>课程-1</code> 需要删除第一行和第三行，那么 <code>学生-1</code> 的信息就会丢失。</li>
<li>插入异常：例如想要插入一个学生的信息，如果这个学生还没选课，那么就无法插入。</li>
</ul>
<h3 id="范式">范式</h3>
<p>范式理论是为了解决以上提到四种异常。</p>
<p>高级别范式的依赖于低级别的范式，1NF 是最低级别的范式。</p>
<h4 id="1-第一范式-1nf">1. 第一范式 (1NF)</h4>
<p>属性不可分。</p>
<h4 id="2-第二范式-2nf">2. 第二范式 (2NF)</h4>
<p>每个非主属性完全函数依赖于键码。</p>
<p>可以通过分解来满足。</p>
<p><font size=4>  <strong>分解前</strong>  </font><br></p>
<table>
<thead>
<tr>
<th style="text-align:center">Sno</th>
<th style="text-align:center">Sname</th>
<th style="text-align:center">Sdept</th>
<th style="text-align:center">Mname</th>
<th style="text-align:center">Cname</th>
<th style="text-align:center">Grade</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">1</td>
<td style="text-align:center">学生-1</td>
<td style="text-align:center">学院-1</td>
<td style="text-align:center">院长-1</td>
<td style="text-align:center">课程-1</td>
<td style="text-align:center">90</td>
</tr>
<tr>
<td style="text-align:center">2</td>
<td style="text-align:center">学生-2</td>
<td style="text-align:center">学院-2</td>
<td style="text-align:center">院长-2</td>
<td style="text-align:center">课程-2</td>
<td style="text-align:center">80</td>
</tr>
<tr>
<td style="text-align:center">2</td>
<td style="text-align:center">学生-2</td>
<td style="text-align:center">学院-2</td>
<td style="text-align:center">院长-2</td>
<td style="text-align:center">课程-1</td>
<td style="text-align:center">100</td>
</tr>
<tr>
<td style="text-align:center">3</td>
<td style="text-align:center">学生-3</td>
<td style="text-align:center">学院-2</td>
<td style="text-align:center">院长-2</td>
<td style="text-align:center">课程-2</td>
<td style="text-align:center">95</td>
</tr>
</tbody>
</table>
<p>以上学生课程关系中，{Sno, Cname} 为键码，有如下函数依赖：</p>
<ul>
<li>Sno -&gt; Sname, Sdept</li>
<li>Sdept -&gt; Mname</li>
<li>Sno, Cname-&gt; Grade</li>
</ul>
<p>Grade 完全函数依赖于键码，它没有任何冗余数据，每个学生的每门课都有特定的成绩。</p>
<p>Sname, Sdept 和 Mname 都部分依赖于键码，当一个学生选修了多门课时，这些数据就会出现多次，造成大量冗余数据。</p>
<p><font size=4>  <strong>分解后</strong>  </font><br></p>
<p>关系-1</p>
<table>
<thead>
<tr>
<th style="text-align:center">Sno</th>
<th style="text-align:center">Sname</th>
<th style="text-align:center">Sdept</th>
<th style="text-align:center">Mname</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">1</td>
<td style="text-align:center">学生-1</td>
<td style="text-align:center">学院-1</td>
<td style="text-align:center">院长-1</td>
</tr>
<tr>
<td style="text-align:center">2</td>
<td style="text-align:center">学生-2</td>
<td style="text-align:center">学院-2</td>
<td style="text-align:center">院长-2</td>
</tr>
<tr>
<td style="text-align:center">3</td>
<td style="text-align:center">学生-3</td>
<td style="text-align:center">学院-2</td>
<td style="text-align:center">院长-2</td>
</tr>
</tbody>
</table>
<p>有以下函数依赖：</p>
<ul>
<li>Sno -&gt; Sname, Sdept</li>
<li>Sdept -&gt; Mname</li>
</ul>
<p>关系-2</p>
<table>
<thead>
<tr>
<th style="text-align:center">Sno</th>
<th style="text-align:center">Cname</th>
<th style="text-align:center">Grade</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">1</td>
<td style="text-align:center">课程-1</td>
<td style="text-align:center">90</td>
</tr>
<tr>
<td style="text-align:center">2</td>
<td style="text-align:center">课程-2</td>
<td style="text-align:center">80</td>
</tr>
<tr>
<td style="text-align:center">2</td>
<td style="text-align:center">课程-1</td>
<td style="text-align:center">100</td>
</tr>
<tr>
<td style="text-align:center">3</td>
<td style="text-align:center">课程-2</td>
<td style="text-align:center">95</td>
</tr>
</tbody>
</table>
<p>有以下函数依赖：</p>
<ul>
<li>Sno, Cname -&gt;  Grade</li>
</ul>
<h4 id="3-第三范式-3nf">3. 第三范式 (3NF)</h4>
<p>非主属性不传递函数依赖于键码。</p>
<p>上面的 关系-1 中存在以下传递函数依赖：</p>
<ul>
<li>Sno -&gt; Sdept -&gt; Mname</li>
</ul>
<p>可以进行以下分解：</p>
<p>关系-11</p>
<table>
<thead>
<tr>
<th style="text-align:center">Sno</th>
<th style="text-align:center">Sname</th>
<th style="text-align:center">Sdept</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">1</td>
<td style="text-align:center">学生-1</td>
<td style="text-align:center">学院-1</td>
</tr>
<tr>
<td style="text-align:center">2</td>
<td style="text-align:center">学生-2</td>
<td style="text-align:center">学院-2</td>
</tr>
<tr>
<td style="text-align:center">3</td>
<td style="text-align:center">学生-3</td>
<td style="text-align:center">学院-2</td>
</tr>
</tbody>
</table>
<p>关系-12</p>
<table>
<thead>
<tr>
<th style="text-align:center">Sdept</th>
<th style="text-align:center">Mname</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">学院-1</td>
<td style="text-align:center">院长-1</td>
</tr>
<tr>
<td style="text-align:center">学院-2</td>
<td style="text-align:center">院长-2</td>
</tr>
</tbody>
</table>
<h2 id="八er-图">八、ER 图</h2>
<p>Entity-Relationship，有三个组成部分：实体、属性、联系。</p>
<p>用来进行关系型数据库系统的概念设计。</p>
<h3 id="实体的三种联系">实体的三种联系</h3>
<p>包含一对一，一对多，多对多三种。</p>
<ul>
<li>如果 A 到 B 是一对多关系，那么画个带箭头的线段指向 B；</li>
<li>如果是一对一，画两个带箭头的线段；</li>
<li>如果是多对多，画两个不带箭头的线段。</li>
</ul>
<p>下图的 Course 和 Student 是一对多的关系。</p>
<div align="center"> <img src="https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/1d28ad05-39e5-49a2-a6a1-a6f496adba6a.png" width="380px"/> </div><br>
<h3 id="表示出现多次的关系">表示出现多次的关系</h3>
<p>一个实体在联系出现几次，就要用几条线连接。</p>
<p>下图表示一个课程的先修关系，先修关系出现两个 Course 实体，第一个是先修课程，后一个是后修课程，因此需要用两条线来表示这种关系。</p>
<div align="center"> <img src="https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/ac929ea3-daca-40ec-9e95-4b2fa6678243.png" width="250px"/> </div><br>
<h3 id="联系的多向性">联系的多向性</h3>
<p>虽然老师可以开设多门课，并且可以教授多名学生，但是对于特定的学生和课程，只有一个老师教授，这就构成了一个三元联系。</p>
<div align="center"> <img src="https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/5bb1b38a-527e-4802-a385-267dadbd30ba.png" width="350px"/> </div><br>
<h3 id="表示子类">表示子类</h3>
<p>用一个三角形和两条线来连接类和子类，与子类有关的属性和联系都连到子类上，而与父类和子类都有关的连到父类上。</p>
<div align="center"> <img src="https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/14389ea4-8d96-4e96-9f76-564ca3324c1e.png" width="450px"/> </div><br>
<h2 id="参考资料">参考资料</h2>
<ul>
<li>AbrahamSilberschatz, HenryF.Korth, S.Sudarshan, 等. 数据库系统概念 [M]. 机械工业出版社, 2006.</li>
<li>施瓦茨. 高性能 MYSQL(第3版)[M]. 电子工业出版社, 2013.</li>
<li>史嘉权. 数据库系统概论[M]. 清华大学出版社有限公司, 2006.</li>
<li><a href="https://dev.mysql.com/doc/refman/5.7/en/innodb-storage-engine.html">The InnoDB Storage Engine</a></li>
<li><a href="https://www.slideshare.net/ErnestoHernandezRodriguez/transaction-isolation-levels">Transaction isolation levels</a></li>
<li><a href="http://scanftree.com/dbms/2-phase-locking-protocol">Concurrency Control</a></li>
<li><a href="https://www.slideshare.net/brshristov/the-nightmare-of-locking-blocking-and-isolation-levels-46391666">The Nightmare of Locking, Blocking and Isolation Levels!</a></li>
<li><a href="https://aksakalli.github.io/2012/03/12/database-normalization-and-normal-forms-with-an-example.html">Database Normalization and Normal Forms with an Example</a></li>
<li><a href="https://blog.jcole.us/2014/04/16/the-basics-of-the-innodb-undo-logging-and-history-system/">The basics of the InnoDB undo logging and history system</a></li>
<li><a href="https://www.brightbox.com/blog/2013/10/31/on-mysql-locks/">MySQL locking for the busy web developer</a></li>
<li><a href="https://draveness.me/mysql-innodb">浅入浅出 MySQL 和 InnoDB</a></li>
<li><a href="https://tech.meituan.com/2014/08/20/innodb-lock.html">Innodb 中的事务隔离级别和锁的关系</a></li>
</ul>

        
        ]]>
      </description>
    </item>
    
    
    
    <item>
      <title>SQL 语法</title>
      <link>/post/2020/12/31/sql-%E8%AF%AD%E6%B3%95/</link>
      <pubDate>Thu, 31 Dec 2020 10:12:40 +0800</pubDate>
      <author>糸色生</author>
      <guid>/post/2020/12/31/sql-%E8%AF%AD%E6%B3%95/</guid>
      <description>
        <![CDATA[
        <ul>
<li><a href="#1">一、基础</a></li>
<li><a href="#2">二、创建表</a></li>
<li><a href="#3">三、修改表</a></li>
<li><a href="#4">四、插入</a></li>
<li><a href="#5">五、更新</a></li>
<li><a href="#6">六、删除</a></li>
<li><a href="#7">七、查询</a>
<ul>
<li><a href="#7.1">DISTINCT</a></li>
<li><a href="#7.2">LIMIT</a></li>
</ul>
</li>
<li><a href="#8">八、排序</a></li>
<li><a href="#9">九、过滤</a></li>
<li><a href="#10">十、通配符</a></li>
<li><a href="#11">十一、计算字段</a></li>
<li><a href="#12">十二、函数</a>
<ul>
<li><a href="#12.1">汇总</a></li>
<li><a href="#12.2">文本处理</a></li>
<li><a href="#12.3">日期和时间处理</a></li>
<li><a href="#12.4">数值处理</a></li>
</ul>
</li>
<li><a href="#13">十三、分组</a></li>
<li><a href="#14">十四、子查询</a></li>
<li><a href="#15">十五、连接</a>
<ul>
<li><a href="#15.1">内连接</a></li>
<li><a href="#15.2">自连接</a></li>
<li><a href="#15.3">自然连接</a></li>
<li><a href="#15.4">外连接</a></li>
</ul>
</li>
<li><a href="#16">十六、组合查询</a></li>
<li><a href="#17">十七、视图</a></li>
<li><a href="#18">十八、存储过程</a></li>
<li><a href="#19">十九、游标</a></li>
<li><a href="#20">二十、触发器</a></li>
<li><a href="#21">二十一、事务管理</a></li>
<li><a href="#22">二十二、字符集</a></li>
<li><a href="#23">二十三、权限管理</a></li>
</ul>
<h3 id="一基础a-name1a">一、基础<a name="1"></a></h3>
<p>模式定义了数据如何存储、存储怎么样的数据以及数据如何分解等信息，数据库和表都有模式。</p>
<p>主键的值不允许修改，也不允许复用（不能将已经删除的主键值赋给新数据行的主键）。</p>
<p>SQL，（Structred Query Language)，标准 SQL 由 ANSI 标准委员会管理，从而被称为 ANSI SQL。各个 DBMS 都有自己的实现，如 PL/SQL、Transact-SQL 等。</p>
<p>SQL 语句不区分大小写，但是数据库表名、列名和值是否区分依赖于具体的 DBMS 以及配置。</p>
<p>SQL 支持以下三种注释：</p>
<pre tabindex="0"><code>### 注释
SELECT * FROM mytable; -- 注释
/* 注释1
   注释2 */

</code></pre><p>数据库创建与使用：</p>
<pre tabindex="0"><code>CREATE DATABASE test;
USE test;
</code></pre><h3 id="二创建表a-name2a">二、创建表<a name="2"></a></h3>
<pre tabindex="0"><code>CREATE TABLE mytable (
    # int 类型，不为空，自增
    id INT NOT NULL AUTO_INCREMENT,
    # int 类型，不可为空，默认值为1，不为空
    col1 INT NOT NULL DEFAULT 1,
    # 变长字符串类型，最常为 45 个字符，可以为空
    col2 VARCHAR(45) NULL,
    # 日期类型，可为空
    col3 DATE NULL,
    # 设置主健为 id
    PRIMARY KEY (`id`)
);
</code></pre><h3 id="三修改表">三、修改表</h3>
<p>添加列</p>
<pre tabindex="0"><code>ALTER TABLE mytable
ADD col CHAR(20);
</code></pre><p>删除列</p>
<pre tabindex="0"><code>ALTER TABLE mytable
DROP COLUMN col;
</code></pre><p>删除表</p>
<pre tabindex="0"><code>DROP TABLE mytable;
</code></pre><h3 id="四插入">四、插入</h3>
<p>普通插入</p>
<pre tabindex="0"><code>INSERT INTO mytable(col1, col2)
VALUES(val1,val2);
</code></pre><p>插入检索出来的数据</p>
<pre tabindex="0"><code>INSERT INTO mytable1(col1, col2)
SELECT col1, col2
FROM mytable2;
</code></pre><p>将一个表的内容插入到一个新表</p>
<pre tabindex="0"><code>CREATE TABLE newtable AS 
SELECT * FROM mytable;
</code></pre><h3 id="五更新">五、更新</h3>
<pre tabindex="0"><code>UPDATE mytable
SET col = val 
WHERE id = 1;
</code></pre><h3 id="六删除">六、删除</h3>
<pre tabindex="0"><code>DELETE FROM mytable
WHERE id = 1;
</code></pre><p>TRUNCATE TABLE table 可以清空表，也就是删除所有行。</p>
<pre tabindex="0"><code>TRUNCATE TABLE mytable;
</code></pre><p>使用更新和删除操作时一定要用 WHERE 字句，不然会把整张表的数据都损坏。用 SELECT 语句进行测试，防止错误删除。</p>
<h3 id="七查询">七、查询</h3>
<p>DISTINCT
相同值只会出现一次。它作用与所有列，也就是说所有列的值都想同时才算相同。</p>
<pre tabindex="0"><code>SELECT DISTINCT col1, col2
FROM mytable;
</code></pre><p>LIMIT
限制返回的行数。可以有两个参数，第一个参数为起始行，从 0 开始；第二个参数为返回的总行数。<br>
返回前五行：</p>
<pre tabindex="0"><code>SELECT * 
FROM mytable
LIMIT 5;
</code></pre><pre tabindex="0"><code>SELECT *
FROM mytable
LIMIT 0, 5;
</code></pre><p>返回第3～5行：</p>
<pre tabindex="0"><code>SELECT *
FROM mytable
LIMIT 2, 3;
</code></pre><h3 id="八排序">八、排序</h3>
<ul>
<li>ASC：升序（默认）</li>
<li>DESC：降序
可以按多个列进行排序，并且为每个列指定不同的排序方式：</li>
</ul>
<pre tabindex="0"><code>SELECT *
FROM mytable
ORDER BY col1 DESC, col2 ASC;
</code></pre><h3 id="九过滤">九、过滤</h3>
<p>不进行过滤的数据非常大，导致通过网络传输了多余的数据，从而浪费了网络带宽。因此尽量使用 SQL 语句来过滤不必要的数据，而不是传输所有的数据到客户端中然后由客户端进行过滤。</p>
<pre tabindex="0"><code>SELECT * 
FROM mytable
WHERE col IS NULL;
</code></pre><p>下表显示了 WHERE 字句可用的操作符。</p>
<table>
<thead>
<tr>
<th>操作符</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>=</td>
<td>等于</td>
</tr>
<tr>
<td>&lt;</td>
<td>小于</td>
</tr>
<tr>
<td>&gt;</td>
<td>大于</td>
</tr>
<tr>
<td>&lt;&gt;!=</td>
<td>不等于</td>
</tr>
<tr>
<td>&lt;=!&gt;</td>
<td>小于等于</td>
</tr>
<tr>
<td>&gt;=!=</td>
<td>大于等于</td>
</tr>
<tr>
<td>BETWEEN</td>
<td>在两个值之间</td>
</tr>
<tr>
<td>IS NULL</td>
<td>为 NULL 值</td>
</tr>
</tbody>
</table>
<p>应该注意到，NULL 和 0、空字符串都不同。</p>
<p>AND 和 OR 用于连接多个过滤条件。优先处理 AND，当一个过滤表达式涉及到多个 AND 和 OR 时，可以使用（）来决定优先级，时的优先级关系更清晰。</p>
<p>IN 操作符用于匹配一组值，其后也可以接一个 SELECT 子句，从而匹配子查询得到的一组值。</p>
<p>NOT 操作符用于否定一个条件。</p>
<h3 id="十通配符">十、通配符</h3>
<p>通配符也是用在过滤语句中，但它只能用于文本字段。</p>
<ul>
<li>% 匹配 &gt;=0 个任意字符；</li>
<li>_ 匹配 ==1 个任意字符；</li>
<li>[] 可以匹配集合内的字符，例如 [ab]将匹配字符 a 或者 b。用脱字符 ^ 可以对其进行否定，也就是不匹配集合内的字符。<br>
使用 LIKE 来进行通配符匹配。</li>
</ul>
<pre tabindex="0"><code>SELECT *
FROM mytable
WHERE col LIKE '[^AB]%'; -- 不以 A 和 B 开头的任意文本
</code></pre><p>不要滥用通配符，通配符位于开头处匹配会非常慢。</p>
<h3 id="十一计算字段">十一、计算字段</h3>
<p>在数据库服务器上完成数据的转换和格式化的工作往往比客户端上快得多，并且转换和格式化后的数据量更少的话可以减少网络通信量。</p>
<p>计算字段通常需要使用 AS 来取别名，否则输出的时候字段名为计算表达式。</p>
<pre tabindex="0"><code>SELECT col1 * col2 AS alias
FROM mytable;
</code></pre><p>CONCAT() 用于连接两个字段。许多数据库会使用空格把一个值填充为列宽，因此连接的结果会出现一些不必要的空格，使用 TRIM() 可以去除首尾空格。</p>
<pre tabindex="0"><code>SELECT CONCAT(TRIM(col1), '(', TRIM(col2), ')') AS concat_col
FROM mytable;
</code></pre><h3 id="十二函数">十二、函数</h3>
<p>各个 DBMS 的函数都是不相同的，因此不可移植，以下主要是 MySQL 的函数。</p>
<h4 id="汇总">汇总</h4>
<p>AVG()	返回某列的平均值<br>
COUNT()	返回某列的行数<br>
MAX()	返回某列的最大值<br>
MIN()	返回某列的最小值<br>
SUM()	返回某列值之和</p>
<p>AVG() 会忽略 NULL 行。</p>
<p>使用 DISTINCT 可以汇总不同的值。</p>
<pre tabindex="0"><code>SELECT AVG(DISTINCT col1) AS avg_col
FROM mytable;
</code></pre><h4 id="文本处理">文本处理</h4>
<p>LEFT()	左边的字符<br>
RIGHT()	右边的字符<br>
LOWER()	转换为小写字符<br>
UPPER()	转换为大写字符<br>
LTRIM()	去除左边的空格<br>
RTRIM()	去除右边的空格<br>
LENGTH()	长度<br>
SOUNDEX()	转换为语音值</p>
<p>其中， SOUNDEX() 可以将一个字符串转换为描述其语音表示的字母数字模式。</p>
<pre tabindex="0"><code>SELECT *
FROM mytable
WHERE SOUNDEX(col1) = SOUNDEX('apple')
</code></pre><h4 id="日期和时间处理">日期和时间处理</h4>
<ul>
<li>日期格式：YYYY-MM-DD</li>
<li>时间格式：HH:<zero-width space>MM:SS</li>
</ul>
<p>ADDDATE()	增加一个日期（天、周等）<br>
ADDTIME()	增加一个时间（时、分等）<br>
CURDATE()	返回当前日期<br>
CURTIME()	返回当前时间<br>
DATE()	返回日期时间的日期部分<br>
DATEDIFF()	计算两个日期之差<br>
DATE_ADD()	高度灵活的日期运算函数<br>
DATE_FORMAT()	返回一个格式化的日期或时间串<br>
DAY()	返回一个日期的天数部分<br>
DAYOFWEEK()	对于一个日期，返回对应的星期几<br>
HOUR()	返回一个时间的小时部分<br>
MINUTE()	返回一个时间的分钟部分<br>
MONTH()	返回一个日期的月份部分<br>
NOW()	返回当前日期和时间<br>
SECOND()	返回一个时间的秒部分<br>
TIME()	返回一个日期时间的时间部分<br>
YEAR()	返回一个日期的年份部分</p>
<pre tabindex="0"><code>mysql&gt; SELECT NOW();
2018-4-14 20:25:11
</code></pre><h4 id="数值处理">数值处理</h4>
<p>SIN()	正弦
COS()	余弦
TAN()	正切
ABS()	绝对值
SQRT()	平方根
MOD()	余数
EXP()	指数
PI()	圆周率
RAND()	随机数</p>
<h3 id="十三分组">十三、分组</h3>
<p>把具有相同的数据值的行放在同一组中。</p>
<p>可以对同一分组数据使用汇总函数进行处理，例如求分组数据的平均值等。</p>
<p>指定的分组字段除了能按该字段进行分组，也会自动按该字段进行排序。</p>
<pre tabindex="0"><code>SELECT col, COUNT(*) AS num
FROM mytable
GROUP BY col;
</code></pre><p>GROUP BY 自动按分组字段进行排序，ORDER BY 也可以按汇总字段来进行排序。</p>
<pre tabindex="0"><code>SELECT col, COUNT(*) AS num
FROM mytable
GROUP BY col
ORDER BY num;
</code></pre><p>分组规定：</p>
<ul>
<li>GROUP BY 子句出现在 WHERE 子句之后，ORDER BY 子句之前；</li>
<li>除了汇总字段外，SELECT 语句中的每一字段都必须在 GROUP BY 子句中给出；</li>
<li>NULL 的行会单独分为一组；</li>
<li>大多数 SQL 实现不支持 GROUP BY 列具有可变长度的数据类型。</li>
</ul>
<h3 id="十四子查询">十四、子查询</h3>
<p>子查询中只能返回一个字段的数据。</p>
<p>可以将子查询的结果作为 WHRER 语句的过滤条件：</p>
<pre tabindex="0"><code>SELECT *
FROM mytable1
WHERE col1 IN (SELECT col2 FROM mytable2);
</code></pre><p>下面的语句可以检索出客户的订单数量，子查询语句会对第一个查询检索出的每个客户执行一次：</p>
<pre tabindex="0"><code>SELECT cust_name, (SELECT COUNT(*)
                   FROM Orders
                   WHERE Orders.cust_id = Customers.cust_id)
                   AS orders_num
FROM Customers
ORDER BY cust_name;
</code></pre><h3 id="十五连接">十五、连接</h3>
<p>连接用于连接多个表，使用 JOIN 关键字，并且条件语句使用 ON 而不是 WHERE。</p>
<p>连接可以替换子查询，并且比子查询的效率一般会更快。</p>
<p>可以用 AS 给列名、计算字段和表名取别名，给表名取别名是为了简化 SQL 语句以及连接相同表。</p>
<h4 id="内连接">内连接</h4>
<p>内连接又称等值连接，使用 INNER JOIN 关键字。</p>
<pre tabindex="0"><code>SELECT A.value, B.value
FROM tablea AS A INNER JOIN tableb AS B
ON A.key = B.key;
</code></pre><p>可以不明确使用 INNER JOIN，而使用普通查询并在 WHERE 中将两个表中要连接的列用等值方法连接起来。</p>
<pre tabindex="0"><code>SELECT A.value, B.value
FROM tablea AS A, tableb AS B
WHERE A.key = B.key;
</code></pre><h3 id="自连接">自连接</h3>
<p>自连接可以看成内连接的一种，只是连接的表是自身而已。</p>
<p>一张员工表，包含员工姓名和员工所属部门，要找出与 Jim 处在同一部门的所有员工姓名。</p>
<p>子查询版本</p>
<pre tabindex="0"><code>SELECT name
FROM employee
WHERE department = (
      SELECT department
      FROM employee
      WHERE name = &quot;Jim&quot;);
</code></pre><p>自连接版本</p>
<pre tabindex="0"><code>SELECT e1.name
FROM employee AS e1 INNER JOIN employee AS e2
ON e1.department = e2.department
      AND e2.name = &quot;Jim&quot;;
</code></pre><h4 id="自然连接">自然连接</h4>
<p>自然连接是把同名列通过等值测试连接起来的，同名列可以有多个。</p>
<p>内连接和自然连接的区别：内连接提供连接的列，而自然连接自动连接所有同名列。</p>
<pre tabindex="0"><code>SELECT A.value, B.value
FROM tablea AS A NATURAL JOIN tableb AS B;
</code></pre><h4 id="外连接">外连接</h4>
<p>外连接保留了没有关联的那些行。分为左外连接，右外连接以及全外连接，左外连接就是保留左表没有关联的行。</p>
<h3 id="十六组合查询">十六、组合查询</h3>
<p>使用 UNION 来组合两个查询，如果第一个查询返回 M 行，第二个查询返回 N 行，那么组合查询的结果一般为 M+N 行。</p>
<p>每个查询必须包含相同的列、表达式和聚集函数。</p>
<p>默认会去除相同行，如果需要保留相同行，使用 UNION ALL。</p>
<p>只能包含一个 ORDER BY 子句，并且必须位于语句的最后。</p>
<pre tabindex="0"><code>SELECT col
FROM mytable
WHERE col = 1
UNION
SELECT col
FROM mytable
WHERE col =2;
</code></pre><h3 id="十七视图">十七、视图</h3>
<p>视图是虚拟的表，本身不包含数据，也就不能对其进行索引操作。</p>
<p>对视图的操作和对普通表的操作一样。</p>
<p>视图具有如下好处：</p>
<ul>
<li>简化复杂的 SQL 操作，比如复杂的连接；</li>
<li>只使用实际表的一部分数据；</li>
<li>通过只给用户访问视图的权限，保证数据的安全性；</li>
<li>更改数据格式和表示。</li>
</ul>
<pre tabindex="0"><code>CREATE VIEW myview AS
SELECT Concat(col1, col2) AS concat_col, col3*col4 AS compute_col
FROM mytable
WHERE col5 = val;
</code></pre><h3 id="十八存储过程">十八、存储过程</h3>
<p>存储过程可以看成是对一系列 SQL 操作的批处理。</p>
<p>使用存储过程的好处：</p>
<ul>
<li>代码封装，保证了一定的安全性；</li>
<li>代码复用；</li>
<li>由于是预先编译，因此具有很高的性能。
命令行中创建存储过程需要自定义分隔符，因为命令行是以 ; 为结束符，而存储过程中也包含了分号，因此会错误把这部分分号当成是结束符，造成语法错误。</li>
</ul>
<p>包含 in、out 和 inout 三种参数。</p>
<p>给变量赋值都需要用 select into 语句。</p>
<p>每次只能给一个变量赋值，不支持集合的操作。</p>
<pre tabindex="0"><code>delimiter //

create procedure myprocedure( out ret int )
    begin
        declare y int;
        select sum(col1)
        from mytable
        into y;
        select y*y into ret;
    end //

delimiter ;
</code></pre><pre tabindex="0"><code>call myprocedure(@ret);
select @ret;
</code></pre><h3 id="十九游标">十九、游标</h3>
<p>在存储过程中使用游标可以对一个结果集进行移动遍历。</p>
<p>游标主要用于交互式应用，其中用户需要对数据集中的任意行进行浏览和修改。</p>
<p>使用游标的四个步骤：</p>
<ul>
<li>声明游标，这个过程没有实际检索出数据；</li>
<li>打开游标；</li>
<li>取出数据；</li>
<li>关闭游标；</li>
</ul>
<pre tabindex="0"><code>delimiter //
create procedure myprocedure(out ret int)
    begin
        declare done boolean default 0;

        declare mycursor cursor for
        select col1 from mytable;
        # 定义了一个 continue handler，当 sqlstate '02000' 这个条件出现时，会执行 set done = 1
        declare continue handler for sqlstate '02000' set done = 1;

        open mycursor;

        repeat
            fetch mycursor into ret;
            select ret;
        until done end repeat;

        close mycursor;
    end //
 delimiter ;
</code></pre><h3 id="二十触发器">二十、触发器</h3>
<p>触发器会在某个表执行以下语句时而自动执行：DELETE、INSERT、UPDATE。</p>
<p>触发器必须指定在语句执行之前还是之后自动执行，之前执行使用 BEFORE 关键字，之后执行使用 AFTER 关键字。BEFORE 用于数据验证和净化，AFTER 用于审计跟踪，将修改记录到另外一张表中。</p>
<p>INSERT 触发器包含一个名为 NEW 的虚拟表。</p>
<pre tabindex="0"><code>CREATE TRIGGER mytrigger AFTER INSERT ON mytable
FOR EACH ROW SELECT NEW.col into @result;

SELECT @result; -- 获取结果
</code></pre><p>DELETE 触发器包含一个名为 OLD 的虚拟表，并且是只读的。</p>
<p>UPDATE 触发器包含一个名为 NEW 和一个名为 OLD 的虚拟表，其中 NEW 是可以被修改的，而 OLD 是只读的。</p>
<p>MySQL 不允许在触发器中使用 CALL 语句，也就是不能调用存储过程。</p>
<h3 id="二十一事务管理">二十一、事务管理</h3>
<p>基本术语：</p>
<ul>
<li>事务（transaction）指一组 SQL 语句；</li>
<li>回退（rollback）指撤销指定 SQL 语句的过程；</li>
<li>提交（commit）指将未存储的 SQL 语句结果写入数据库表；</li>
<li>保留点（savepoint）指事务处理中设置的临时占位符（placeholder），你可* 以对它发布回退（与回退整个事务处理不同）。</li>
</ul>
<p>不能回退 SELECT 语句，回退 SELECT 语句也没意义；也不能回退 CREATE 和 DROP 语句。</p>
<p>MySQL 的事务提交默认是隐式提交，每执行一条语句就把这条语句当成一个事务然后进行提交。当出现 START TRANSACTION 语句时，会关闭隐式提交；当 COMMIT 或 ROLLBACK 语句执行后，事务会自动关闭，重新恢复隐式提交。</p>
<p>设置 autocommit 为 0 可以取消自动提交；autocommit 标记是针对每个连接而不是针对服务器的。</p>
<p>如果没有设置保留点，ROLLBACK 会回退到 START TRANSACTION 语句处；如果设置了保留点，并且在 ROLLBACK 中指定该保留点，则会回退到该保留点。</p>
<pre tabindex="0"><code>START TRANSACTION
// ...
SAVEPOINT delete1
// ...
ROLLBACK TO delete1
// ...
COMMIT
</code></pre><h3 id="二十二字符集">二十二、字符集</h3>
<p>基本术语：</p>
<ul>
<li>字符集为字母和符号的集合；</li>
<li>编码为某个字符集成员的内部表示；</li>
<li>校对字符指定如何比较，主要用于排序和分组。</li>
</ul>
<p>除了给表指定字符集和校对外，也可以给列指定：</p>
<pre tabindex="0"><code>CREATE TABLE mytable
(col VARCHAR(10) CHARACTER SET latin COLLATE latin1_general_ci )
DEFAULT CHARACTER SET hebrew COLLATE hebrew_general_ci;
</code></pre><p>可以在排序、分组时指定校对：</p>
<pre tabindex="0"><code>SELECT *
FROM mytable
ORDER BY col COLLATE latin1_general_ci;
</code></pre><h3 id="二十三权限管理">二十三、权限管理</h3>
<p>MySQL 的账户信息保存在 mysql 这个数据库中。</p>
<pre tabindex="0"><code>USE mysql;
SELECT user FROM user;
</code></pre><p>创建账户</p>
<p>新创建的账户没有任何权限。</p>
<pre tabindex="0"><code>CREATE USER myuser IDENTIFIED BY 'mypassword';
</code></pre><p>修改账户名</p>
<pre tabindex="0"><code>RENAME USER myuser TO newuser;
</code></pre><p>删除账户</p>
<pre tabindex="0"><code>DROP USER myuser;
</code></pre><p>查看权限</p>
<pre tabindex="0"><code>SHOW GRANTS FOR myuser;
</code></pre><p>授予权限</p>
<p>账户用 username@host 的形式定义，username@% 使用的是默认主机名。</p>
<pre tabindex="0"><code>GRANT SELECT, INSERT ON mydatabase.* TO myuser;
</code></pre><p>删除权限</p>
<p>GRANT 和 REVOKE 可在几个层次上控制访问权限：</p>
<ul>
<li>整个服务器，使用 GRANT ALL 和 REVOKE ALL；</li>
<li>整个数据库，使用 ON database.*；</li>
<li>特定的表，使用 ON database.table；</li>
<li>特定的列；</li>
<li>特定的存储过程。</li>
</ul>
<pre tabindex="0"><code>REVOKE SELECT, INSERT ON mydatabase.* FROM myuser;
</code></pre><p>更改密码</p>
<p>必须使用 Password() 函数进行加密。</p>
<pre tabindex="0"><code>SET PASSWROD FOR myuser = Password('new_password');
</code></pre>
        
        ]]>
      </description>
    </item>
    
    
  </channel>
</rss>
