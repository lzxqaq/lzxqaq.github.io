<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>收录文章 on 罗泽勋</title>
    <link>/collection/</link>
    <description>Recent content in 收录文章 on 罗泽勋</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Mon, 07 Mar 2022 18:43:02 +0800</lastBuildDate><atom:link href="/collection/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>【转载】Linux Socket 编程（不限 Linux）</title>
      <link>/collection/linuxsocket/</link>
      <pubDate>Mon, 07 Mar 2022 18:43:02 +0800</pubDate>
      
      <guid>/collection/linuxsocket/</guid>
      <description>作者：吴秦 出处：(http://www.cnblogs.com/skynet/) 1、网络中进程之间如何通信？ 本地的进程间通信（IPC）有很多</description>
    </item>
    
    <item>
      <title>【转载】C&#43;&#43; 开发必备之网络编程</title>
      <link>/collection/networkpg/</link>
      <pubDate>Mon, 07 Mar 2022 18:38:17 +0800</pubDate>
      
      <guid>/collection/networkpg/</guid>
      <description>转载自https://github.com/huihut/interview Socket Linux Socket 编程（不限 Linux） Socket 中的 read()、write() 函</description>
    </item>
    
    <item>
      <title>【转载】C&#43;&#43; 开发必备之设计模式</title>
      <link>/collection/design-pattern/</link>
      <pubDate>Sat, 15 Jan 2022 08:14:07 +0800</pubDate>
      
      <guid>/collection/design-pattern/</guid>
      <description>转载自https://github.com/huihut/interview 各大设计模式例子参考：CSDN专栏 . C++ 设计模式 系列博文 设计模式工</description>
    </item>
    
    <item>
      <title>【转载】C&#43;&#43; 开发必备之链接装载库</title>
      <link>/collection/library/</link>
      <pubDate>Sat, 15 Jan 2022 08:10:50 +0800</pubDate>
      
      <guid>/collection/library/</guid>
      <description>转载自https://github.com/huihut/interview 本节部分知识点来自《程序员的自我修养——链接装载库》 内存、栈、堆</description>
    </item>
    
    <item>
      <title>【转载】C&#43;&#43; 开发必备之数据库</title>
      <link>/collection/database/</link>
      <pubDate>Sat, 15 Jan 2022 08:08:34 +0800</pubDate>
      
      <guid>/collection/database/</guid>
      <description>转载自https://github.com/huihut/interview 本节部分知识点来自《数据库系统概论（第 5 版）》 基本概念 数据（da</description>
    </item>
    
    <item>
      <title>【转载】C&#43;&#43; 开发必备之计算机网络</title>
      <link>/collection/network/</link>
      <pubDate>Sat, 15 Jan 2022 08:06:35 +0800</pubDate>
      
      <guid>/collection/network/</guid>
      <description>转载自https://github.com/huihut/interview 本节部分知识点来自《计算机网络（第 7 版）》 计算机网络体系结构： 各</description>
    </item>
    
    <item>
      <title>【转载】C&#43;&#43; 开发必备之操作系统</title>
      <link>/collection/os/</link>
      <pubDate>Fri, 14 Jan 2022 21:02:05 +0800</pubDate>
      
      <guid>/collection/os/</guid>
      <description>转载自https://github.com/huihut/interview 进程与线程 对于有线程系统： 进程是资源分配的独立单位 线程是资源调度</description>
    </item>
    
    <item>
      <title>【转载】C&#43;&#43; 开发必备之算法</title>
      <link>/collection/algorithm/</link>
      <pubDate>Fri, 14 Jan 2022 20:42:19 +0800</pubDate>
      
      <guid>/collection/algorithm/</guid>
      <description>转载自https://github.com/huihut/interview 排序 排序算法 平均时间复杂度 最差时间复杂度 空间复杂度 数据对象稳定性</description>
    </item>
    
    <item>
      <title>【转载】C&#43;&#43; 开发必备之数据结构</title>
      <link>/collection/data-structure/</link>
      <pubDate>Fri, 14 Jan 2022 20:28:54 +0800</pubDate>
      
      <guid>/collection/data-structure/</guid>
      <description>转载自https://github.com/huihut/interview 顺序结构 顺序栈（Sequence Stack） SqStack.cpp 顺序栈数据结构和图</description>
    </item>
    
    <item>
      <title>【转载】C&#43;&#43; 开发必备之 STL</title>
      <link>/collection/c&#43;&#43;stl/</link>
      <pubDate>Fri, 14 Jan 2022 20:23:31 +0800</pubDate>
      
      <guid>/collection/c&#43;&#43;stl/</guid>
      <description>转载自https://github.com/huihut/interview STL 索引 STL 方法含义索引 STL 容器 容器 底层数据结构 时间复杂度 有无序 可不可</description>
    </item>
    
    <item>
      <title>【转载】C&#43;&#43; 开发必备之 Effective C&#43;&#43;</title>
      <link>/collection/effectivec&#43;&#43;/</link>
      <pubDate>Fri, 14 Jan 2022 20:16:02 +0800</pubDate>
      
      <guid>/collection/effectivec&#43;&#43;/</guid>
      <description>转载自https://github.com/huihut/interview Effective C++ 视 C++ 为一个语言联邦（C、Object-Oriented C++</description>
    </item>
    
    <item>
      <title>【转载】C&#43;&#43; 开发必备之 C/C&#43;&#43;基础</title>
      <link>/collection/cc&#43;&#43;base/</link>
      <pubDate>Tue, 11 Jan 2022 23:20:27 +0800</pubDate>
      
      <guid>/collection/cc&#43;&#43;base/</guid>
      <description>转载自https://github.com/huihut/interview const 作用 修饰变量，说明该变量不可以被改变； 修饰指针，分为指向常量的</description>
    </item>
    
    <item>
      <title>【转载】C Primer 之 new, delete</title>
      <link>/collection/cprimer04/</link>
      <pubDate>Thu, 30 Dec 2021 07:13:11 +0800</pubDate>
      
      <guid>/collection/cprimer04/</guid>
      <description>转载自https://github.com/andycai/cprimer new和delete运算符用于动态分配和撤销内存的运算符 (1) new用</description>
    </item>
    
    <item>
      <title>【转载】C Primer 之 char*, char[], string</title>
      <link>/collection/cprimer03/</link>
      <pubDate>Thu, 30 Dec 2021 07:12:45 +0800</pubDate>
      
      <guid>/collection/cprimer03/</guid>
      <description>转载自https://github.com/andycai/cprimer 3.1 char*, char[], string 在C中，并没有字符串这个数据类型，而是使用字符数组来保存字</description>
    </item>
    
    <item>
      <title>【转载】C Primer 之 指针和引用</title>
      <link>/collection/cprimer02/</link>
      <pubDate>Thu, 30 Dec 2021 07:12:43 +0800</pubDate>
      
      <guid>/collection/cprimer02/</guid>
      <description>转载自https://github.com/andycai/cprimer 2.1 refrence 引用 引用是C++中的概念，初学者容易把引用和指针混淆一起。以下</description>
    </item>
    
    <item>
      <title>【转载】C Primer 之 const, inline, static, this</title>
      <link>/collection/cprimer01/</link>
      <pubDate>Thu, 30 Dec 2021 07:12:38 +0800</pubDate>
      
      <guid>/collection/cprimer01/</guid>
      <description>转载自https://github.com/andycai/cprimer 1.1 const (1) const 基础 如果const关键字不涉及到指针，我们很好理解，下面是</description>
    </item>
    
    <item>
      <title>【转载】面向对象设计原则之开闭原则</title>
      <link>/collection/oop/</link>
      <pubDate>Tue, 28 Dec 2021 08:07:08 +0800</pubDate>
      
      <guid>/collection/oop/</guid>
      <description>转载自https://blog.csdn.net/lovelion/article/details/17517213 开闭原则是面向对象的可复</description>
    </item>
    
    <item>
      <title>【转载】面向对象设计原则之单一职责原则</title>
      <link>/collection/singleresponsibility/</link>
      <pubDate>Tue, 28 Dec 2021 07:40:16 +0800</pubDate>
      
      <guid>/collection/singleresponsibility/</guid>
      <description>转载自https://blog.csdn.net/lovelion/article/details/17517213 单一职责原则是最简单的面</description>
    </item>
    
    <item>
      <title>【转载】面向对象设计原则概述</title>
      <link>/collection/oop/</link>
      <pubDate>Tue, 28 Dec 2021 06:59:01 +0800</pubDate>
      
      <guid>/collection/oop/</guid>
      <description>转载自https://blog.csdn.net/lovelion/article/details/17517213 对于面向对象软件系统的设</description>
    </item>
    
    <item>
      <title>【转载】简单工厂模式</title>
      <link>/collection/singlefactory/</link>
      <pubDate>Tue, 28 Dec 2021 06:50:56 +0800</pubDate>
      
      <guid>/collection/singlefactory/</guid>
      <description>转载自https://blog.csdn.net/lovelion/article/details/17517213 工厂模式是最常用的一类创</description>
    </item>
    
    <item>
      <title>【转载】面向对象思想</title>
      <link>/collection/2021-12-22-oop/</link>
      <pubDate>Wed, 22 Dec 2021 23:41:54 +0800</pubDate>
      
      <guid>/collection/2021-12-22-oop/</guid>
      <description>面向对象思想 面向对象思想 一、三大特性 封装 继承 多态 二、类图 泛化关系 (Generalization) 实现关系 (Realization) 聚合关系 (Aggregation) 组合关系 (Composition) 关联关系 (Association) 依赖关系 (Dependency) 三、设计原则 S.O.L.I.D 其他常见原</description>
    </item>
    
    <item>
      <title>【转载】缓存</title>
      <link>/collection/2021-12-22-cache/</link>
      <pubDate>Wed, 22 Dec 2021 23:37:55 +0800</pubDate>
      
      <guid>/collection/2021-12-22-cache/</guid>
      <description>缓存 缓存 一、缓存特征 二、缓存位置 三、CDN 四、缓存问题 五、数据分布 六、一致性哈希 七、LRU 参考资料 一、缓存特征 命中率 当某个请求能够通过访问缓</description>
    </item>
    
    <item>
      <title>【转载】Redis</title>
      <link>/collection/2021-12-22-redis/</link>
      <pubDate>Wed, 22 Dec 2021 23:34:10 +0800</pubDate>
      
      <guid>/collection/2021-12-22-redis/</guid>
      <description>Redis Redis 一、概述 二、数据类型 STRING LIST SET HASH ZSET 三、数据结构 字典 跳跃表 四、使用场景 计数器 缓存 查找表 消息队列 会话缓存 分布式锁实现 其它 五、Redis 与 Memcached 数据类</description>
    </item>
    
    <item>
      <title>【转载】SQL 练习</title>
      <link>/collection/2021-12-22-sqldemo/</link>
      <pubDate>Wed, 22 Dec 2021 23:32:38 +0800</pubDate>
      
      <guid>/collection/2021-12-22-sqldemo/</guid>
      <description>SQL 练习 SQL 练习 595. Big Countries 627. Swap Salary 620. Not Boring Movies 596. Classes More Than 5 Students 182. Duplicate Emails 196. Delete Duplicate Emails 175. Combine Two Tables 181. Employees Earning More Than Their Managers 183. Customers Who Never Order 184. Department Highest Salary 176. Second Highest Salary 177. Nth Highest Salary 178. Rank Scores 180. Consecutive Numbers 626. Exchange Seats 595. Big Countries https://leetcode.com/problems/big-countries/description/</description>
    </item>
    
    <item>
      <title>【转载】Mysql</title>
      <link>/collection/2021-12-22-mysql/</link>
      <pubDate>Wed, 22 Dec 2021 23:30:39 +0800</pubDate>
      
      <guid>/collection/2021-12-22-mysql/</guid>
      <description>MySQL MySQL 一、索引 B+ Tree 原理 MySQL 索引 索引优化 索引的优点 索引的使用条件 二、查询性能优化 使用 Explain 进行分析 优化数据访问 重构查询方式 三、存储引擎 InnoDB MyISAM 比较 四、数据</description>
    </item>
    
    <item>
      <title>【转载】数据库系统原理</title>
      <link>/collection/2021-12-22-database/</link>
      <pubDate>Wed, 22 Dec 2021 23:28:00 +0800</pubDate>
      
      <guid>/collection/2021-12-22-database/</guid>
      <description>数据库系统原理 数据库系统原理 一、事务 概念 ACID AUTOCOMMIT 二、并发一致性问题 丢失修改 读脏数据 不可重复读 幻影读 三、封锁 封锁粒度 封锁类型 封锁协议 MySQL 隐式与显式锁</description>
    </item>
    
    <item>
      <title>【转载】Qt6 绘制基础</title>
      <link>/collection/paintsystem/</link>
      <pubDate>Mon, 13 Dec 2021 21:28:59 +0800</pubDate>
      
      <guid>/collection/paintsystem/</guid>
      <description>绘制系统 Qt 的绘制系统可以使用相同的 API 在屏幕和打印设备上进行绘制，并且主要基于 QPainter 、 QPaintDevice 和 QPaintEngine 类。 QPainter 用于执行绘图操作， QPaintDevice 是二维空间的抽象，可以使用 进</description>
    </item>
    
    <item>
      <title>【转载】Qt6 对象模型</title>
      <link>/collection/object/</link>
      <pubDate>Mon, 13 Dec 2021 08:08:17 +0800</pubDate>
      
      <guid>/collection/object/</guid>
      <description>对象模型 标准的 C++ 对象模型为对象范例提供了非常有效的运行时支持。 但是它的静态特性在某些问题领域是不灵活的。 图形用户界面编程是一个需要运行时效率</description>
    </item>
    
    <item>
      <title>【转载】Qt 6 核心内部结构</title>
      <link>/collection/qt-core/</link>
      <pubDate>Mon, 13 Dec 2021 08:00:25 +0800</pubDate>
      
      <guid>/collection/qt-core/</guid>
      <description>Qt 包含一组丰富的基础使能器，主要来自 Qt Core 模块。 Qt 使用这些促成因素来提供更高级别的 UI 和应用程序开发组件。 以下主题解释了最重要的促成因素，并展示</description>
    </item>
    
    <item>
      <title>【转载】Qt6 Qvariant 与自定义 Qt 类型</title>
      <link>/collection/qvariant/</link>
      <pubDate>Mon, 13 Dec 2021 07:29:55 +0800</pubDate>
      
      <guid>/collection/qvariant/</guid>
      <description>概述 在本文档中，我们采用自定义类型并描述如何将其集成到 Qt 的对象模型中，以便可以像标准 Qt 类型一样存储它。 然后我们展示如何注册自定义类型以允许它</description>
    </item>
    
    <item>
      <title>【转载】Qt6 顺序容器 QList</title>
      <link>/collection/qlist/</link>
      <pubDate>Thu, 02 Dec 2021 12:41:29 +0800</pubDate>
      
      <guid>/collection/qlist/</guid>
      <description>介绍 QList 类是提供动态数组的模板类。该类中的所有函数都是可重入的。另外两个常用的顺序容器 QStack 和 QQueue 继承自 Qlist。 详细说明 QList 是 Qt 的通用容器类之一。</description>
    </item>
    
    <item>
      <title>【转载】Qt6 隐式共享</title>
      <link>/collection/implicit-sharing/</link>
      <pubDate>Wed, 01 Dec 2021 22:48:45 +0800</pubDate>
      
      <guid>/collection/implicit-sharing/</guid>
      <description>Qt 中的许多 C++ 类使用隐式数据共享来最大化资源使用并最小化复制。当作为参数传递时，隐式共享类既安全又高效，因为只有一个指向数据的指针被传递，并且</description>
    </item>
    
    <item>
      <title>【转载】Qt6 容器类-概述</title>
      <link>/collection/qt-containers/</link>
      <pubDate>Wed, 01 Dec 2021 22:05:26 +0800</pubDate>
      
      <guid>/collection/qt-containers/</guid>
      <description>介绍 Qt 库提供了一组通用的基于模板的容器类。这些类可用于存储制定类型的项。例如，您需要一个可调整大小的 QString 数组，请使用 QList。 这些容器类被设</description>
    </item>
    
    <item>
      <title>【转载】Qt测试最佳实践</title>
      <link>/collection/2021-10-13-2/</link>
      <pubDate>Wed, 13 Oct 2021 07:01:19 +0800</pubDate>
      
      <guid>/collection/2021-10-13-2/</guid>
      <description>Qt 测试最佳实践 我们建议您为错误修复和新功能添加 Qt 测试。在您尝试修复错误之前，添加一个回归测试（理想情况下是自动的），该测试在修复之前失败，表</description>
    </item>
    
    <item>
      <title>【转载】SQL 语法</title>
      <link>/collection/2020-12-31-sql/</link>
      <pubDate>Thu, 31 Dec 2020 10:12:40 +0800</pubDate>
      
      <guid>/collection/2020-12-31-sql/</guid>
      <description>一、基础 二、创建表 三、修改表 四、插入 五、更新 六、删除 七、查询 DISTINCT LIMIT 八、排序 九、过滤 十、通配符 十一、计算字段 十二、函数 汇总 文本处理 日期和时间处理</description>
    </item>
    
    <item>
      <title>【转载】Java 虚拟机</title>
      <link>/collection/2020-12-25jvm/</link>
      <pubDate>Fri, 25 Dec 2020 15:06:19 +0800</pubDate>
      
      <guid>/collection/2020-12-25jvm/</guid>
      <description>参考自 CyC2018/CS-Notes 一、运行时数据区域 程序计数器 Java 虚拟机栈 本地方法栈 堆 方法区 运行时常量池 直接内存 二、垃圾收集 判断一个对象是否可被回收 引用类型 垃圾收集算法</description>
    </item>
    
    <item>
      <title>【转载】Java 容器</title>
      <link>/collection/2020-12-24-collection/</link>
      <pubDate>Thu, 24 Dec 2020 16:47:24 +0800</pubDate>
      
      <guid>/collection/2020-12-24-collection/</guid>
      <description>参考自 CyC2018/CS-Notes 一、概览 Collection Map 一、概览 容器主要包括 Collection 和 Map 两种，Collection 存储着对象的集合，而 Map存储着键值对（两个对象）的映射表。 Collection 1.Set TreeSet: 基</description>
    </item>
    
    <item>
      <title>【转载】Java 基础</title>
      <link>/collection/2020-12-15-base/</link>
      <pubDate>Tue, 15 Dec 2020 08:32:26 +0800</pubDate>
      
      <guid>/collection/2020-12-15-base/</guid>
      <description>参考自 CyC2018/CS-Notes 一、数据类型 基本类型 包装类型 缓存池 二、String 概述 不可变的好处 String,StringBuffer and StringBuilder StringPoll new String(&amp;ldquo;abc&amp;rdquo;) 三、运算 参数传递 float与double 隐式类型转换 switch</description>
    </item>
    
  </channel>
</rss>
