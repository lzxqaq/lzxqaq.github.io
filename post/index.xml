<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>技术文章 on 罗泽勋</title>
    <link>/post/</link>
    <description>Recent content in 技术文章 on 罗泽勋</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Wed, 01 Dec 2021 22:48:45 +0800</lastBuildDate>
    <atom:link href="/post/" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Qt6 隐式共享</title>
      <link>/post/2021/12/01/implicit-sharing/</link>
      <pubDate>Wed, 01 Dec 2021 22:48:45 +0800</pubDate>
      <author>罗泽勋</author>
      <guid>/post/2021/12/01/implicit-sharing/</guid>
      <description>
        <![CDATA[
        <p>Qt 中的许多 C++ 类使用隐式数据共享来最大化资源使用并最小化复制。当作为参数传递时，隐式共享类既安全又高效，因为只有一个指向数据的指针被传递，并且只有当函数写入数据时才会复制数据，即copy-on-write。</p>
<h3 id="概述">概述</h3>
<p>共享类由指向共享数据块的指针组成，该共享数据块包含引用计数和数据。</p>
<p>创建共享对象时，它将引用计数设置为 1。只要新对象引用共享数据，引用计数就会增加，而当对象取消引用共享数据时，引用计数会减少。当引用计数变为零时，共享数据将被删除。</p>
<p>在处理共享对象时，有两种方法可以复制对象。我们通常谈论深拷贝和浅拷贝。深拷贝意味着复制一个对象。浅拷贝是引用拷贝，即只是指向共享数据块的指针。就内存和 CPU 而言，进行深度复制的成本可能很高。制作浅拷贝非常快，因为它只涉及设置一个指针和增加引用计数。</p>
<p>隐式共享对象的对象分配（使用 operator=()）是使用浅拷贝实现的。</p>
<p>共享的好处是程序不需要不必要地复制数据，从而减少内存使用和数据复制。对象可以很容易地被赋值，作为函数参数发送，并从函数中返回。</p>
<p>隐式共享大多发生在幕后；程序员很少需要担心它。但是，Qt 的容器迭代器与 STL 的容器迭代器具有不同的行为。阅读隐式共享迭代器问题。</p>
<p>在多线程应用程序中，会发生隐式共享，如线程和隐式共享类中所述。</p>
<p>在实现您自己的隐式共享类时，请使用QSharedData和QSharedDataPointer类。</p>
<h3 id="详细的隐式共享">详细的隐式共享</h3>
<p>如果对象即将更改并且引用计数大于 1，则隐式共享会自动将对象从共享块中分离。（这通常称为 copy-on-write 或者 value semantics。）</p>
<p>隐式共享类可以控制其内部数据。在任何修改其数据的成员函数中，它会在修改数据之前自动分离。但是，请注意容器迭代器的特殊情况；请参阅隐式共享迭代器问题。</p>
<blockquote>
<p>警告：在使用STL 样式的迭代器时，请小心复制隐式共享容器（QMap、QList等）。请参阅隐式共享迭代器问题。</p>
</blockquote>
<h3 id="示例">示例</h3>
<pre><code>QPixmap p1, p2;
p1.load(&quot;image.bmp&quot;);
p2 = p1;                        // p1 and p2 share data

QPainter paint;
paint.begin(&amp;p2);               // cuts p2 loose from p1
paint.drawText(0,50, &quot;Hi&quot;);
paint.end();
</code></pre>
<p>在这个例子中，p1 和 p2 共享数据，直到了 p2 被 QPainter::begin() 调用，因为画像素图将修改它。</p>
<h3 id="所有隐式共享的类">所有隐式共享的类</h3>
<p>参见 <a href="https://doc.qt.io/qt-6/implicit-sharing.html">Qt 文档</a>。</p>

        
        ]]>
      </description>
    </item>
    
    
    
    <item>
      <title>Qt6 容器类-概述</title>
      <link>/post/2021/12/01/qt-containers/</link>
      <pubDate>Wed, 01 Dec 2021 22:05:26 +0800</pubDate>
      
      <guid>/post/2021/12/01/qt-containers/</guid>
      <description>
        <![CDATA[
        <h3 id="介绍">介绍</h3>
<p>Qt 库提供了一组通用的基于模板的容器类。这些类可用于存储制定类型的项。例如，您需要一个可调整大小的 QString 数组，请使用 QList<QString>。</p>
<p>这些容器类被设计为比 STL 容器更轻、更安全且更易于使用。如果您不熟悉 STL，或者更喜欢“Qt 方式”实现，您可以使用这些类而不是 STL 类。</p>
<p>容器类是 <a href="/post/2021/12/01/implicit-sharing/">隐式共享的</a>，它们是可重入的，并且它们针对速度、低内存消耗和最小的内联代码扩展进行了优化，从而产生更小的可执行文件。此外，在所有用于访问它们的线程将它们用作只读容器的情况下，它们是线程安全的。</p>
<p>容器提供了遍历的迭代器。STL 样式的迭代器是最有效的迭代器，可以与 Qt 和 STL 的通用算法一起使用。提供 Java 风格的迭代器是为了向后兼容。</p>
<h3 id="容器类">容器类</h3>
<p>Qt 提供以下顺序容器：QList、QStack 和 QQueue。对于大多数应用程序，QList 是最好的类型。它提供了非常快速的追加。如果您确实需要链表，请使用 std::list。QStack 和 QQueue 是提供 LIFO 和 FIFO 语义的便利类。QList和QVector在 Qt 6 中被统一。两者都使用来自QVector的数据模型。QVector现在是QList的别名。</p>
<p>Qt 还提供了这些关联容器：QMap、QMultiMap、QHash、QMultiHash和QSet。“Multi”容器方便地支持与单个键关联的多个值。“散列”容器通过使用散列函数而不是对排序集的二分搜索来提供更快的查找。</p>
<p>作为特殊情况，QCache 和 QContiguousCache 类在有限的缓存存储中提供了有效的对象散列查找。</p>
<table>
<thead>
<tr>
<th>类</th>
<th>简述</th>
</tr>
</thead>
<tbody>
<tr>
<td>QList <T></td>
<td>这是迄今为止最常用的容器类。它存储可以通过索引访问的给定类型 (T) 的值列表。在内部，它在内存中的相邻位置存储一组给定类型的值。在列表的前面或中间插入可能会很慢，因为它可能导致大量项目必须在内存中移动一个位置。</td>
</tr>
<tr>
<td>QVarLengthArray &lt;T, Prealloc &gt;</td>
<td>这提供了一个低级的可变长度数组。在速度特别重要的地方，它可以代替QList使用。</td>
</tr>
<tr>
<td>QStack <T></td>
<td>这是QList 的一个便利子类，提供“后进先出”(LIFO) 语义。它向QList 中已有的函数添加了以下函数：push ()、pop () 和top ()。</td>
</tr>
<tr>
<td>QQueue <T></td>
<td>这是QList的便利子类，提供“先进先出”(FIFO) 语义。它将以下函数添加到QList 中已经存在的函数中：enqueue ()、dequeue () 和head ()。</td>
</tr>
<tr>
<td>QSet <T></td>
<td>这提供了具有快速查找功能的单值数学集。</td>
</tr>
<tr>
<td>QMap &lt;Key, T&gt;</td>
<td>这提供了一个字典（关联数组），将 Key 类型的键映射到 T 类型的值。通常每个键都与单个值相关联。QMap以 Key 顺序存储其数据；如果顺序无关紧要QHash是一个更快的选择。</td>
</tr>
<tr>
<td>QMultiMap &lt;Key, T&gt;</td>
<td>这是QMap 的一个方便的子类，它为多值映射提供了一个很好的接口，即一个键可以与多个值相关联的映射。</td>
</tr>
<tr>
<td>QHash &lt;Key, T&gt;</td>
<td>这与QMap具有几乎相同的 API ，但提供了明显更快的查找。QHash以任意顺序存储其数据。</td>
</tr>
<tr>
<td>QMultiHash &lt;Key, T&gt;</td>
<td>这是QHash 的一个便利子类，它为多值散列提供了一个很好的接口。</td>
</tr>
</tbody>
</table>
<h3 id="算法复杂性">算法复杂性</h3>
<p>下表总结了顺序容器 QList 的算法复杂度。</p>
<table>
<thead>
<tr>
<th></th>
<th>索引查找</th>
<th>插入</th>
<th>前置</th>
<th>附加</th>
</tr>
</thead>
<tbody>
<tr>
<td>QList <T></td>
<td>O(1)</td>
<td>O(n)</td>
<td>O(n)</td>
<td>Amort.O(1)</td>
</tr>
</tbody>
</table>
<blockquote>
<p>在表中，“Amort.”代表“摊销行为”。例如，“Amort.O(1)”意味着如果你只调用一次函数，你可能会得到 O(n) 的行为，但如果你多次调用它（例如，n 次），平均行为将是 O(1)。</p>
</blockquote>
<p>下表总结了 Qt 的关联容器和集合的算法复杂度：</p>
<table>
<thead>
<tr>
<th></th>
<th>键查找-平均数</th>
<th>键查找-最差的情况</th>
<th>插入-平均数</th>
<th>插入-最差的情况</th>
</tr>
</thead>
<tbody>
<tr>
<td>QMap&lt;Key, T&gt;</td>
<td>O(log n )</td>
<td>O(log n )</td>
<td>O(log n )</td>
<td>O(log n )</td>
</tr>
<tr>
<td>QMultiMap&lt;Key, T&gt;</td>
<td>O(log n )</td>
<td>O(log n )</td>
<td>O(log n )</td>
<td>O(log n )</td>
</tr>
<tr>
<td>QHash&lt;Key, T&gt;</td>
<td>Amort.O(1)</td>
<td>O( n )</td>
<td>Amort.O(1)</td>
<td>O( n )</td>
</tr>
<tr>
<td>QSet<Key></td>
<td>Amort.O(1)</td>
<td>O( n )</td>
<td>Amort.O(1)</td>
<td>O( n )</td>
</tr>
</tbody>
</table>

        
        ]]>
      </description>
    </item>
    
    
    
    <item>
      <title>修改菜单栏和文章创作</title>
      <link>/post/2021/11/18/%E4%BF%AE%E6%94%B9%E8%8F%9C%E5%8D%95%E6%A0%8F%E5%92%8C%E6%96%87%E7%AB%A0%E5%88%9B%E4%BD%9C/</link>
      <pubDate>Thu, 18 Nov 2021 18:36:33 +0800</pubDate>
      <author>罗泽勋</author>
      <guid>/post/2021/11/18/%E4%BF%AE%E6%94%B9%E8%8F%9C%E5%8D%95%E6%A0%8F%E5%92%8C%E6%96%87%E7%AB%A0%E5%88%9B%E4%BD%9C/</guid>
      <description>
        <![CDATA[
        <h3 id="前情提要">前情提要</h3>
<p>完成前面的工作后，我们的网站是下图这样的，非常符合极简之美。不过空荡荡的网站不是我们想要的，接下来我们就开始最核心的部分：修改网站内容。</p>
<p><img src="https://cdn.jsdelivr.net/gh/lzxqaq/jsdelivr@master/image/2021-11-18/0.png" alt="img"></p>
<h3 id="一准备文本编辑工具">一、准备文本编辑工具</h3>
<p>（1）下载文本编辑工具。创作当然离不开文本的编辑，那么一款高效好用的文本编辑工具就非常重要了。这里我强烈推荐一个常用的工具 Visual Studio Code，它可以多文件管理。点击 <a href="https://code.visualstudio.com/Download">https://code.visualstudio.com/Download</a> 可以直达官网下载。接下来的讲述会使用到 VSCode，如果你选择其他文本编辑器，也无妨，找到对应的文件修改即可。</p>
<p>（2）用 VSCode 打开 blog 文件夹。打开 VSCode 后，点击左上角文件菜单，然后点击打开文件夹，选择 D:/hugo/site/blog 文件夹。</p>
<p><img src="https://cdn.jsdelivr.net/gh/lzxqaq/jsdelivr@master/image/2021-11-18/1.png" alt="img"></p>
<p>（3）我们需要关注 content 文件夹、public 文件夹和 config.yaml 文件即可。content 存放网站的所有内容，我们平时写文章会在里面创建；public 存放网站的源代码，我们使用 hugo 命令时它会自动生成，我们需要将它上传到 Github ；config.yaml 是网站的配置文件，我们网站的基本信息都会在里面配置。</p>
<h3 id="二网站预览">二、网站预览</h3>
<p>用命令窗口进入网站 blog 根目录，执行 <code>hugo server</code>。打开浏览器，访问 localhost:1313。</p>
<p><img src="https://cdn.jsdelivr.net/gh/lzxqaq/jsdelivr@master/image/2021-11-17/11.png" alt="img"></p>
<p><img src="https://cdn.jsdelivr.net/gh/lzxqaq/jsdelivr@master/image/2021-11-17/12.png" alt="img"></p>
<p><img src="https://cdn.jsdelivr.net/gh/lzxqaq/jsdelivr@master/image/2021-11-17/10.png" alt="img"></p>
<h3 id="三创建菜单栏">三、创建菜单栏</h3>
<p>可以看到我们的网站现在有五个菜单，如果你前面在网站配置把菜单改成中文的话，那么将是[主页]、[关于]、[分类]、[标签]、[订阅]。[主页]不用多说了，[分类]、[标签]、[订阅]是自动管理的，如果不需要的话可以在网站目录的 config.yaml 里删掉，[关于]现在点击的话，是访问不了的，因为我们还没有创建对应的文件夹或文件。</p>
<p>（1）打开 themes/hugo-ivy/exampleSite 文件夹，这是 hugo-ivy 主题作者提供的示例网站。复制其中的 content 文件夹下的所有文件和文件夹，放到我们网站根目录下的 content文件夹下面。</p>
<p><img src="https://cdn.jsdelivr.net/gh/lzxqaq/jsdelivr@master/image/2021-11-18/2.png" alt="img"></p>
<p>（2）修改 config.yaml 文件，添加文章和记录两个菜单。对应的文件夹是 post 和 note。</p>
<p><img src="https://cdn.jsdelivr.net/gh/lzxqaq/jsdelivr@master/image/2021-11-18/3.png" alt="img"></p>
<p>（3）这样，再回到浏览器上看。因为我们把示例的文章也复制过来了，所以网站已经有文章显示了。而我们添加的[文章]和[记录]文章也完成了。如果你需要添加其他菜单，可以参考现有的：在 content 文件夹下新建文件夹，然后在 config.yaml 文件中添加修改。</p>
<p><img src="https://cdn.jsdelivr.net/gh/lzxqaq/jsdelivr@master/image/2021-11-18/4.png" alt="img"></p>
<h3 id="四新建文章">四、新建文章</h3>
<p>我们可以复制 content/post 或者 content/note 下的文件，然后修改里面的标题、作者、日期、分类、标签等等，因为我们使用 hugo server 预览网站，所以可以在浏览器上 localhost:1313 实时查看修改后的效果。不过更常见的做法是通过命令的方式来创建，下面演示在[文章]菜单下创建一篇文章。</p>
<p>（1）同样，在重新打开一个 cmd 命令窗口，进入网站根目录（blog)。和之前的做法一样这里就不贴图片了。</p>
<p>(2)执行 <code>hugo new post/2021-11-18.md</code> 命令，post 是存放的目标文件夹，2021-11-18.md 是将要生成的文件，文件名可以随意，注意不要使用中文。</p>
<p><img src="https://cdn.jsdelivr.net/gh/lzxqaq/jsdelivr@master/image/2021-11-18/5.png" alt="img"></p>
<p>(3)在 VSCode 里面修改文件内容。</p>
<p><img src="https://cdn.jsdelivr.net/gh/lzxqaq/jsdelivr@master/image/2021-11-18/6.png" alt="img"></p>
<h3 id="五推送到-github-平台">五、推送到 Github 平台</h3>
<p>（1）在 cmd 窗口，在网站根目录（blog）下先执行 <code>hugo</code> 生成网站源代码到 public 目录，然后执行 <code>cd pulic</code> 进入 public 目录。</p>
<p><img src="https://cdn.jsdelivr.net/gh/lzxqaq/jsdelivr@master/image/2021-11-18/7.png" alt="img"></p>
<p>（2）分别执行 <code>git add .</code> 和 <code>git commit -m &quot;update&quot;</code> 和 <code>git push</code>完成上传。</p>
<h3 id="六完成">六、完成</h3>
<p>上传成功后，等一小会就可以通过 “你的 github 用户名.github.io” 域名访问你的网站啦。到这里，最基本的流程已经走完了，现在可以开始自行探索了！当然，还有很多内容会在后续补充，本系列教程仍存在不足的地方，如果你遇到问题可以联系我。祝愉快~</p>

        
        ]]>
      </description>
    </item>
    
    
    
    <item>
      <title>搭建</title>
      <link>/post/2021/11/17/%E6%90%AD%E5%BB%BA/</link>
      <pubDate>Wed, 17 Nov 2021 19:38:06 +0800</pubDate>
      <author>罗泽勋</author>
      <guid>/post/2021/11/17/%E6%90%AD%E5%BB%BA/</guid>
      <description>
        <![CDATA[
        <h3 id="一在本地创建网站">一、在本地创建网站</h3>
<p>（1）使用 Hugo 建立网站。打开命令窗口，进入 D:\hugo\site 目录（便捷方法：在文件资源管理器中进入相应目录，单击地址栏右边空白地方，在最左边输入 <code>cmd </code> 加空格，回车。这样打开命令窗口的同时，进入了相应的目录），执行命令 <code>hugo new site blog</code> ，如出现 Congratulations! 提示则成功。（此时可在文件资源管理器中查看生成的文件，blog 是任意取的一个文件夹名字，但为了方便教程工作，请统一）</p>
<p><img src="https://cdn.jsdelivr.net/gh/lzxqaq/jsdelivr@master/image/2021-11-17/1.png" alt="img"></p>
<p><img src="https://cdn.jsdelivr.net/gh/lzxqaq/jsdelivr@master/image/2021-11-17/2.png" alt="img"></p>
<p><img src="https://cdn.jsdelivr.net/gh/lzxqaq/jsdelivr@master/image/2021-11-17/3.png" alt="img"></p>
<h3 id="二下载主题模板以-hugo-ivy-为例">二、下载主题模板（以 hugo-ivy ）为例</h3>
<p>（1）接着回到刚刚的命令窗口，输入执行 <code>cd blog\themes</code> 进入 themes 目录。</p>
<p><img src="https://cdn.jsdelivr.net/gh/lzxqaq/jsdelivr@master/image/2021-11-17/4.png" alt="img"></p>
<p>（2）下载主题模板（ hugo-ivy ）。接上述步骤，在命令窗口中 执行 <code>git clone https://github.com/yihui/hugo-ivy.git</code> 来下载 hugo.386 主题。下载完成后，blog/themes 文件夹里面就可以看到下载好的主题了。</p>
<p><img src="https://cdn.jsdelivr.net/gh/lzxqaq/jsdelivr@master/image/2021-11-17/6.png" alt="img"></p>
<h3 id="三修改网站配置">三、修改网站配置</h3>
<p>将 themes/hugo-ivy/exampleSite 文件夹中的 config.yaml 文件复制到文件夹 blog 下，并删除原有的 config.toml 。用记事本或者其他文本编辑工具，根据需要修改相应的内容。</p>
<p><img src="https://cdn.jsdelivr.net/gh/lzxqaq/jsdelivr@master/image/2021-11-17/7.png" alt="img"></p>
<p><img src="https://cdn.jsdelivr.net/gh/lzxqaq/jsdelivr@master/image/2021-11-17/8.png" alt="img"></p>
<p><img src="https://cdn.jsdelivr.net/gh/lzxqaq/jsdelivr@master/image/2021-11-17/9.png" alt="img"></p>
<h3 id="四网站本地预览">四、网站本地预览</h3>
<p>用命令窗口进入 blog 目录，先执行 <code>hugo</code> 生成网页文件，再执行 <code>hugo server</code> 开启预览。打开浏览器，访问 localhost:1313 。（注意，这个命令窗口需要保持到你不需要预览网站的时候，届时可以用两次 Ctrl + c 停止，或者直接关闭窗口）</p>
<p><img src="https://cdn.jsdelivr.net/gh/lzxqaq/jsdelivr@master/image/2021-11-17/11.png" alt="img"></p>
<p><img src="https://cdn.jsdelivr.net/gh/lzxqaq/jsdelivr@master/image/2021-11-17/12.png" alt="img"></p>
<p><img src="https://cdn.jsdelivr.net/gh/lzxqaq/jsdelivr@master/image/2021-11-17/10.png" alt="img"></p>
<h3 id="五将网站推送到-github-平台">五、将网站推送到 Github 平台</h3>
<p>（2）打开命令窗口，进入 blog\public 目录，分别执行</p>
<pre><code>git init 
git add .
git commit -m &quot;first commit&quot;
git remote add origin https://github.com/你的Github名字/你的Github名字.github.io.git
git push --set-upstream origin master
</code></pre>
<p>输入 Github 账号名，密码，完成上传。</p>
<p><img src="https://cdn.jsdelivr.net/gh/lzxqaq/jsdelivr@master/image/2021-11-17/13.png" alt="img"></p>
<p><img src="https://cdn.jsdelivr.net/gh/lzxqaq/jsdelivr@master/image/2021-11-17/14.png" alt="img"></p>
<p>（3）测试。访问 github.com 网站，在你之前创建的仓库可以看到刚刚上传的文件。访问提供的 <code>https://你的Github账户名.github.io</code> 访问你的网站，如果没有之前预览的网页，可以等待一会再刷新。</p>

        
        ]]>
      </description>
    </item>
    
    
    
    <item>
      <title>准备工作</title>
      <link>/post/2021/11/15/%E5%87%86%E5%A4%87%E5%B7%A5%E4%BD%9C/</link>
      <pubDate>Mon, 15 Nov 2021 12:26:45 +0800</pubDate>
      <author>罗泽勋</author>
      <guid>/post/2021/11/15/%E5%87%86%E5%A4%87%E5%B7%A5%E4%BD%9C/</guid>
      <description>
        <![CDATA[
        <h3 id="一注册-github-帐号">一、注册 Github 帐号</h3>
<p>（1）.前往 <a href="https://github.com/">github.com</a> 注册一个帐号。（注意：慎重考虑注册的用户名，如果你不购买别的域名，这个用户名将是你网站域名的一部分）</p>
<p>（2）在 Github 中创建一个名为 你的仓库名字.github.io 的仓库。</p>
<p><img src="https://cdn.jsdelivr.net/gh/lzxqaq/jsdelivr@master/image/2021-11-15/-2.png" alt="img"></p>
<p><img src="https://cdn.jsdelivr.net/gh/lzxqaq/jsdelivr@master/image/2021-11-15/-1.png" alt="img"></p>
<h3 id="二安装-git">二、安装 Git</h3>
<p>（1）下载安装。前往 <a href="https://git-scm.com/download/win" target="_blank">这里</a> ，点击下载 Git-**-64-bit.exe。然后安装，不懂的话一直 next 。</p>
<p><img src="https://cdn.jsdelivr.net/gh/lzxqaq/jsdelivr@master/image/2021-11-15/0.png" alt="img"></p>
<p>（2）配置。在 win10 搜索 cmd ，打开命令提示符，输入 <code>git config --global user.email &quot;你注册Github所用的邮箱&quot;</code> 回车执行，再输入 <code>git config --global user.name &quot;你的昵称&quot;</code> 回车执行。</p>
<p><img src="https://cdn.jsdelivr.net/gh/lzxqaq/jsdelivr@master/image/2021-11-15/1.png" alt="img"></p>
<p><img src="https://cdn.jsdelivr.net/gh/lzxqaq/jsdelivr@master/image/2021-11-15/2.png" alt="img"></p>
<p>注意：这种方式打开命令窗口会默认进入 C 盘的用户目录。如果需要切换到其他目录，比如我们后面所用的 <code>D:/hugo/site/blog</code> 目录，则需要先执行 <code>D:</code> 切换盘符，然后执行 <code>cd hugo/site/blog</code>，其中 <code>cd</code> 就是进入目录的命令，后面是需要进入的文件夹，有时候我们需要返回上一层目录，则可以执行 <code>cd ..</code> 来完成。后面会有相关操作。</p>
<h3 id="三安装-hugo">三、安装 Hugo</h3>
<p>（1）首先在 D 盘创建一个新文件夹 hugo，然后在里面创建 bin 和 site 两个文件夹。bin 将用来放 Hugo 的可执行文件，site 将用来放你的网站的源代码。</p>
<p>（2）前往<a href="https://github.com/spf13/hugo/releases">https://github.com/spf13/hugo/releases</a>，找到并下载 hugo_<em><em>Windows-64bit.zip。解压，如果是一个 hugo</em></em>_windows_amd64.exe 文件，将它改名为 hugo.exe。</p>
<p><img src="https://cdn.jsdelivr.net/gh/lzxqaq/jsdelivr@master/image/2021-11-15/3.png" alt="img"></p>
<p>（3）将这个 hugo.exe 文件移动到刚刚创建的 bin 文件夹里。</p>
<p>（4）配置环境变量。在 win10 搜索环境变量，进去找到系统变量中的 Path，双击编辑，在弹出的界面点新建，然后将 <code>D:\hugo\bin</code> 复制进去，最后连续确定。</p>
<p><img src="https://cdn.jsdelivr.net/gh/lzxqaq/jsdelivr@master/image/2021-11-15/4.png" alt="img"></p>
<p><img src="https://cdn.jsdelivr.net/gh/lzxqaq/jsdelivr@master/image/2021-11-15/5.png" alt="img"></p>
<p>（5）验证。重新打开命令窗口（关闭上一步骤使用的），输入执行 <code>hugo help</code>，如果你能看到下图所示的 Hugo 帮助文档，就证明配置成功，否则重新执行上一步骤。</p>
<p><img src="https://cdn.jsdelivr.net/gh/lzxqaq/jsdelivr@master/image/2021-11-15/6.png" alt="img"></p>

        
        ]]>
      </description>
    </item>
    
    
    
    <item>
      <title>基础概念</title>
      <link>/post/2021/11/14/%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5/</link>
      <pubDate>Sun, 14 Nov 2021 20:57:13 +0800</pubDate>
      <author>罗泽勋</author>
      <guid>/post/2021/11/14/%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5/</guid>
      <description>
        <![CDATA[
        <p>教程开始前，先来介绍一下最终的成果，以便确认是否符合你的需求。本篇教程以 Hugo 和 Github Pages 为基础，创建一个静态的网站。这个过程仅需要一台联网的电脑，不需要其他花费（注意：如果你想自定义域名，则需要自行购买域名，后面会有相关介绍）。下文提到的概念理论只需要有一个模糊的认识就足够了，不需要理解透彻，因为在后续文章中会具体介绍其用法，届时就会有更直观的认识了。</p>
<p>Hugo 和 Github Pages 稍后会介绍，我们先来了解什么是静态网站。静态网站是由静态网页文件（也就是HTML文件)组成，它不需要服务器运行，也不需要数据库。我们将组成网站的这些网页文件上传到服务器上，别人就可以在互联网上通过这台服务器的地址或域名（例如 <a href="http://www.lzxqaq.com">www.lzxqaq.com</a>)访问这些网页文件，这就是静态网站的大致原理。</p>
<p>不过，这里所说的服务器并非我们日常所用的电脑，因为我们日常所用的电脑都是在局域网里，是不能让整个互联网的人都能访问到的。所以一般都要用所谓的云服务器，例如阿里云服务器、华为云服务器等等。不过现在有一些平台提供了免费的站点服务，我们就不需要购买昂贵的服务器了。例如本教程中使用的 Github Pages 服务，我们可以将网站托管到 Github 平台上，让平台帮我们把网站跑起来并在互联网上可以访问。</p>
<p>这里提到的 Github 是一个代码托管平台，也是全世界最大的开源社区。在本教程中，我们只需要知道，它是帮我们帮网站跑起来的就行了。我们在自己的电脑上创建网站，然后将这些网页文件上传到 Github 平台，而 Github 会帮我们运行网站，这样网站就可以访问了。另外，我们还需要在 Github 下载网站主题（这会在后续介绍）。如何将我们的网站文件上传到 Github 或者从 Github 下载东西呢？这里我们会用到 Git 这个工具。</p>
<p>那么如何建立网站呢？需要去学习网页技术吗？答案是不需要，我们将使用静态网站生成器来完成这项繁琐的工作。在本教程里，我们会使用 Hugo 这款出色的静态网站生成器。我们只需要挑选别人制作好的博客模板，根据某种规则去生成网站就好了（这里说的规则可以简单理解成约定好的文本格式，我们在约定好的文本格式下写文字，网站生成器会将这些文字翻译成网页文件）。所以我们只需要关注网站的文本，也就是展示的文章那些。（理想状态下，就类似我们写微博、发说说，编辑好文本发送出去就可以了）</p>
<p>简单来说，我们的工作流程是：在自己的电脑上，用一个静态网站生成器工具生成网页文件，然后将网站文件上传到某个平台上，这样别人就可以访问我们的网站了。如果修改网站（比如添加文章），也是重复上述步骤：重新生成网页文件，重新上传。</p>
<p>后续文章我会细述搭建网站的具体步骤，尽可能考虑新手建站的情况。如果你在这过程中遇到问题，欢迎在评论中指出或着与我联系。</p>

        
        ]]>
      </description>
    </item>
    
    
    
    <item>
      <title>开篇</title>
      <link>/post/2021/11/14/%E5%BC%80%E7%AF%87/</link>
      <pubDate>Sun, 14 Nov 2021 20:57:13 +0800</pubDate>
      <author>罗泽勋</author>
      <guid>/post/2021/11/14/%E5%BC%80%E7%AF%87/</guid>
      <description>
        <![CDATA[
        <p><img src="https://cdn.jsdelivr.net/gh/lzxqaq/jsdelivr@master/image/2021-11-14/0.jpg" alt="img"></p>
<p>回顾过去，我刚接触互联网时，还是 2G 时代，那时各类论坛博客和聊天室正蓬勃发展。这种跨越时空的交流方式让我感到非常新奇，看着屏幕吐出文字的时候，就感觉打开了一个新世界的大门。通过一根根网线，就可以将世界连起来，人们可以在其中感知世界并畅所欲言。有趣的是，当时还是小学生的我，已经在一款网页文字游戏中建立队伍，和几十位素不相识的伙伴一起在游戏江湖里打拼了……</p>
<p>不过随着QQ、微信和微博等便捷交流平台的发展，传统博客和论坛逐渐淡出人们的视线。然而人们在选择这些便捷的平台时，也被其束缚着。特别是在内容分发推荐和主流媒体导流的当下，人们获取信息的的渠道看似变多了，但是这过程已经从主动变成了被动，我不认为这是什么好事。</p>
<p>“I web, therefore I am a spiderman.”，这是 hugo-ivy 主题作者谢益辉在他 <a href="https://bookdown.org/yihui/blogdown/">blogdown</a>一书提到的个人网站的作用，我深以为然。在当下，个人网站用来交流分享、内容创造或者记录人生仍是一个非常棒的选择。</p>
<p>值得高兴的是，个人网站搭建技术从未停下发展的脚步，现在搭建一个个人网站已经是一件很容易的事了～如果你拥有了它，那么你便在这嘈杂的网络世界有了一方净土。这需要感谢开源，感谢前人的努力。因为他们的努力，让搭建网站这类技术活变得更简单，让这世界充满自由与奉献的星光。</p>
<p>但即便如此，为了更自由、更多元化的需求，搭建和管理网站仍需要足够的耐心，特别是对于不了解这方面的人。为了前人的付出让更多的人知晓，让自由的表达有更多选择，我在这里开启系列教程，将搭建个人网站的步骤一一讲述。虽然有很多人做过类似的工作，但我还是希望我能做得更详细、更简单，为有需要的朋友省下一番功夫。注意，本系列教程默认读者为零基础的读者，所以会涉及很多基础概念，有一定基础的读者建议去查找其他教程。同时，因为技术会不停地发展，本教程的一些信息可能已经过时，如果你发现任何问题或者有改进建议，请在评论（需要注册 Github 帐号）指出或者联系我，我会及时更新。在此，感谢支持。</p>
<blockquote>
<p>当你面对一个陌生领域的挑战时，最困难的往往是开始动手这个决定。</p>
</blockquote>

        
        ]]>
      </description>
    </item>
    
    
    
    <item>
      <title>Qt单元测试基础笔记</title>
      <link>/post/2021/10/13/qt%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95%E5%9F%BA%E7%A1%80%E7%AC%94%E8%AE%B0/</link>
      <pubDate>Wed, 13 Oct 2021 07:01:19 +0800</pubDate>
      <author>罗泽勋</author>
      <guid>/post/2021/10/13/qt%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95%E5%9F%BA%E7%A1%80%E7%AC%94%E8%AE%B0/</guid>
      <description>
        <![CDATA[
        <h3 id="一构建">一、构建</h3>
<p>构建时添加 <code>QT += testlib</code> 。</p>
<h3 id="二测试类">二、测试类</h3>
<p>测试类必须从 QObject 继承，头文件 <code>include &lt;QTest&gt;</code> ，并将测试函数声明 <code>private slot</code></p>
<h3 id="三qverifycondition-宏">三、QVERIFY(condition) 宏</h3>
<p>检查 condition（条件）是否为真。如果为真，则继续执行。如果没有，则测试日志中会记录失败，并且不会进一步执行测试。</p>
<p>如果需要在测试失败报告中加入附加信息，可以使用 QVERIFY2(condition, message)。</p>
<p>如果需要测试日志有更详细的输出，可以使用 QCOMPARE(actual, expected)。</p>
<h3 id="四qcompareactual-expected宏">四、QCOMPARE(actual, expected)宏</h3>
<p>使用相等运算符将 actual （实际值）与 expected （预期值）进行比较。如果实际和预期匹配，则继续执行。如果不是，则在测试日志中记录失败，并且测试函数返回而不尝试任何后续检查。</p>
<p>如果比较失败，QCOMPARE() 会尝试输出值的内容，因此可以从测试日志中看到比较失败的原因。</p>
<p>对于你自己的类，你可以使用 <code>QTest::toString ()</code> 来格式化输出到测试日志中的值。具体可参考 <a href="https://doc.qt.io/qt-6/qtest.html#QCOMPARE">Qt 文档</a>;</p>
<h3 id="五可执行文件">五、可执行文件</h3>
<p>如果需要将测试用例成为独立的可执行文件，需要添加以下两行：</p>
<pre><code>QTEST_MAIN(YourClassName)
#include &quot;yourfilename.moc&quot;
</code></pre>

        
        ]]>
      </description>
    </item>
    
    
    
    <item>
      <title>Qt测试最佳实践（Qt文档）</title>
      <link>/post/2021/10/13/qt%E6%B5%8B%E8%AF%95%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5qt%E6%96%87%E6%A1%A3/</link>
      <pubDate>Wed, 13 Oct 2021 07:01:19 +0800</pubDate>
      <author>罗泽勋</author>
      <guid>/post/2021/10/13/qt%E6%B5%8B%E8%AF%95%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5qt%E6%96%87%E6%A1%A3/</guid>
      <description>
        <![CDATA[
        <h2 id="qt-测试最佳实践">Qt 测试最佳实践</h2>
<p>我们建议您为错误修复和新功能添加 Qt 测试。在您尝试修复错误之前，添加一个回归测试（理想情况下是自动的），该测试在修复之前失败，表现出错误，并在修复之后通过。在开发新功能时，添加测试以验证它们是否按预期工作。</p>
<p>符合一组编码标准将使 Qt 自动测试更有可能在所有环境中可靠地工作。例如，有些测试需要从磁盘读取数据。如果没有为如何完成设置标准，则某些测试将无法移植。例如，假设其测试数据文件位于当前工作目录中的测试仅适用于源代码构建。在影子构建中（在源目录之外），测试将无法找到其数据。</p>
<p>以下章节包含了编写Qt测试的指南。</p>
<ul>
<li><a href="#%E4%B8%80%E8%88%AC%E5%8E%9F%E5%88%99">一般原则</a></li>
<li><a href="#%E7%BC%96%E5%86%99%E5%8F%AF%E9%9D%A0%E7%9A%84%E6%B5%8B%E8%AF%95">编写可靠的测试</a></li>
<li><a href="#%E6%94%B9%E8%BF%9B%E6%B5%8B%E8%AF%95%E8%BE%93%E5%87%BA">改进测试输出</a></li>
<li><a href="#%E7%BC%96%E5%86%99%E5%8F%AF%E6%B5%8B%E8%AF%95%E7%9A%84%E4%BB%A3%E7%A0%81">编写可测试的代码</a></li>
<li><a href="#%E8%AE%BE%E7%BD%AE%E6%B5%8B%E8%AF%95%E6%9C%BA">设置测试机</a></li>
</ul>
<h2 id="一般原则">一般原则</h2>
<p>下面的章节提供了编写单元测试的一般指南。</p>
<ul>
<li><a href="#%E9%AA%8C%E8%AF%81%E6%B5%8B%E8%AF%95">验证测试</a></li>
<li><a href="#%E8%B5%8B%E4%BA%88%E6%B5%8B%E8%AF%95%E5%87%BD%E6%95%B0%E6%8F%8F%E8%BF%B0%E6%80%A7%E7%9A%84%E5%90%8D%E7%A7%B0">赋予测试函数描述性的名称</a></li>
<li><a href="#%E7%BC%96%E5%86%99%E8%87%AA%E5%B8%A6%E7%9A%84%E6%B5%8B%E8%AF%95%E5%87%BD%E6%95%B0">编写自带的测试函数</a></li>
<li><a href="#%E6%B5%8B%E8%AF%95%E5%85%A8%E6%A0%88">测试全栈</a></li>
<li><a href="#%E8%AE%A9%E6%B5%8B%E8%AF%95%E5%BF%AB%E9%80%9F%E5%AE%8C%E6%88%90">让测试快速完成</a></li>
<li><a href="#%E4%BD%BF%E7%94%A8%E6%95%B0%E6%8D%AE%E9%A9%B1%E5%8A%A8%E7%9A%84%E6%B5%8B%E8%AF%95">使用数据驱动的测试</a></li>
<li><a href="#%E4%BD%BF%E7%94%A8%E8%A6%86%E7%9B%96%E5%B7%A5%E5%85%B7">使用覆盖工具</a></li>
<li><a href="#%E9%80%89%E6%8B%A9%E9%80%82%E5%BD%93%E7%9A%84%E6%9C%BA%E5%88%B6%E6%9D%A5%E6%8E%92%E9%99%A4%E6%B5%8B%E8%AF%95">选择适当的机制来排除测试</a></li>
<li><a href="#%E9%81%BF%E5%85%8DQ_ASSERT">避免Q_ASSERT</a></li>
</ul>
<h3 id="验证测试">验证测试</h3>
<p>编写并提交你的测试以及你的修复或新功能到一个新的分支上。一旦你完成了,你可以检查出你的工作所基于的分支,然后把你的新测试的测试文件检查到这个分支。这可以让你验证测试是否在前一个分支上失败了,因此确实抓住了一个错误或测试了一个新功能。</p>
<p>例如，如果使用Git版本控制系统，则修复 QDateTime 类中的错误的工作流程可能如下所示：</p>
<blockquote>
<p>1.为您的修订和测试创建一个分支： git checkout -b fix-branch 5.14<br>
2.编写一个测试并修复错误。<br>
3.用修复版和新的测试版进行构建和测试,以验证新的测试版是否能通过修复版。<br>
4.将修复程序和测试添加到您的分支： git add tests/auto/corelib/time/qdatetime/tst_qdatetime.cpp src/corelib/time/qdatetime.cpp<br>
5.提交修复程序并测试您的分支机构： git commit -m &lsquo;Fix bug in QDateTime&rsquo;<br>
6.要验证测试是否确实捕获了需要您修复的内容，请检出您自己的分支所基于的分支： git checkout 5.14<br>
7.仅将测试文件检出到5.14分支： git checkout fix-branch &ndash; tests/auto/corelib/time/qdatetime/tst_qdatetime.cpp<br>
现在只有测试在fix-branch上。其余的源代码树仍在5.14上。<br>
8.构建并运行测试,以验证它在5.14上失败,因此确实抓住了一个错误。<br>
9.您现在可以返回到fix分支： git checkout fix-branch<br>
10.或者，您可以在5.14上将工作树恢复到干净状态： git checkout HEAD &ndash; tests/auto/corelib/time/qdatetime/tst_qdatetime.cpp</p>
</blockquote>
<p>当你在审查一个变更时,你可以调整这个工作流程,以检查该变更是否确实带有测试它确实修复的问题。</p>
<h3 id="为测试函数提供描述性名称">为测试函数提供描述性名称</h3>
<p>命名测试用例很重要。测试名称出现在测试运行的失败报告中。对于数据驱动的测试，数据行的名称也会出现在失败报告中。这些名字让阅读报告的人初步了解出了什么问题。</p>
<p>测试函数名称应该让函数试图测试的内容一目了然。不要简单地使用错误跟踪标识符，因为如果替换错误跟踪器，标识符就会过时。此外，并非所有用户都可以访问某些错误跟踪器。当测试代码的后续读者可能对错误报告感兴趣时，您可以在测试的相关部分旁边的评论中提及它。</p>
<p>同样，在编写数据驱动的测试时，为测试用例提供描述性名称，表明每个测试用例关注功能的哪个方面。不要简单地给测试用例编号，也不要使用错误跟踪标识符。阅读测试输出的人将不知道数字或标识符的含义。如果相关，您可以在提及错误跟踪标识符的测试行上添加注释。</p>
<h3 id="编写自包含的测试函数">编写自包含的测试函数</h3>
<p>在一个测试程序中，测试功能应该相互独立，并且它们不应该依赖于之前已经运行过的测试功能。您可以通过使用tst_foo testname.</p>
<p>不要在多个测试中重复使用被测类的实例。测试实例（例如小部件）不应该是测试的成员变量，但最好在堆栈上实例化，以确保即使测试失败也能进行适当的清理，这样测试不会相互干扰。</p>
<h3 id="测试全栈">测试全栈</h3>
<p>如果 API 是根据可插拔或特定于平台的后端来实现的，这些后端执行繁重的工作，请确保编写涵盖代码路径一直到后端的测试。使用模拟后端测试上层 API 部分是将 API 层中的错误与后端隔离的好方法，但它是对使用真实世界数据运行实际实现的测试的补充。</p>
<h3 id="使测试快速完成">使测试快速完成</h3>
<p>测试不应因不必要的重复、使用不当的大量测试数据或引入不必要的空闲时间而浪费时间。</p>
<p>对于单元测试尤其如此，其中每一秒额外的单元测试执行时间都会使跨多个目标的分支的 CI 测试花费更长的时间。请记住，单元测试与负载和可靠性测试是分开的，其中需要大量的测试数据和更长的测试运行时间。</p>
<p>基准测试通常会多次执行相同的测试，应位于单独的tests/benchmarks目录中，并且不应与功能单元测试混合使用。</p>
<h3 id="使用数据驱动测试">使用数据驱动测试</h3>
<p>数据驱动的测试可以更轻松地为后期错误报告中发现的边界条件添加新测试。</p>
<p>使用数据驱动的测试而不是在测试中按顺序测试多个项目可以节省非常相似的代码的重复，并确保即使较早的案例失败也能测试后续案例。它还鼓励系统和统一的测试，因为对每个数据样本应用相同的测试。</p>
<h3 id="使用覆盖工具">使用覆盖工具</h3>
<p>使用诸如Froglogic Coco Code Coverage或gcov 之类的覆盖工具来帮助编写测试，以覆盖被测试函数或类中尽可能多的语句、分支和条件。在新功能的开发周期中越早完成此操作，稍后在重构代码时就越容易捕获回归。</p>
<h3 id="选择适当的机制来排除测试">选择适当的机制来排除测试</h3>
<p>选择适当的机制来排除不适用的测试很重要：QSKIP ()，使用条件语句排除部分测试功能，或不为特定平台构建测试。</p>
<p>使用QSKIP () 来处理在运行时发现整个测试函数在当前测试环境中不适用的情况。当只跳过测试函数的一部分时，可以使用条件语句，可选择qDebug()调用以报告跳过不适用部分的原因。</p>
<p>数据驱动测试的测试功能或数据行可以限于特定平台，或使用#if. 但是，在使用跳过测试功能时要注意moc限制#if。该moc预处理器不具备访问所有builtin被经常用于编译器的特征检测编译器的宏。因此，moc预处理器条件的结果可能与其余代码看到的结果不同。这可能会导致moc为实际编译器跳过的测试槽生成元数据，或省略实际编译到类中的测试槽的元数据。在第一种情况下，测试将尝试运行未实现的插槽。在第二种情况下，即使应该尝试运行测试槽，测试也不会尝试。</p>
<p>如果整个测试程序不适用于特定平台或除非启用了特定功能，最好的方法是使用父目录的.pro文件来避免构建测试。例如，如果tests/auto/gui/someclass测试对 macOS 无效，请将以下行添加到tests/auto/gui.pro：</p>
<pre><code>mac*: SUBDIRS -= someclass
</code></pre>
<h3 id="避免q_assert">避免Q_ASSERT</h3>
<p>该Q_ASSERT宏将导致程序中止时断言的情况false，但前提是软件始建于调试模式。在 release 和 debug-and-release 版本中，Q_ASSERT什么都不做。</p>
<p>Q_ASSERT 应该避免，因为它使测试的行为取决于是否正在测试调试版本，并且因为它会导致测试立即中止，跳过所有剩余的测试函数并返回不完整或格式错误的测试结果。</p>
<p>它还会跳过本应在测试结束时进行的任何拆卸或整理，因此可能会使工作区处于不整洁状态，这可能会导致进一步测试的复杂化。</p>
<p>应Q_ASSERT使用QCOMPARE () 或QVERIFY () 宏变体而不是 。它们使当前测试报告失败并终止，但允许执行剩余的测试功能和整个测试程序正常终止。QVERIFY2 () 甚至允许在测试日志中记录描述性错误消息。</p>
<h2 id="编写可靠的测试">编写可靠的测试</h2>
<p>以下部分提供了编写可靠测试的指南：</p>
<ul>
<li><a href="#%E9%81%BF%E5%85%8D%E9%AA%8C%E8%AF%81%E6%AD%A5%E9%AA%A4%E4%B8%AD%E7%9A%84%E5%89%AF%E4%BD%9C%E7%94%A8">避免验证步骤中的副作用</a></li>
<li><a href="#%E9%81%BF%E5%85%8D%E5%9B%BA%E5%AE%9A%E8%B6%85%E6%97%B6">避免固定超时</a></li>
<li><a href="#%E8%B0%A8%E9%98%B2%E4%BE%9D%E8%B5%96%E4%BA%8E%E6%97%B6%E9%97%B4%E7%9A%84%E8%A1%8C%E4%B8%BA">谨防依赖于时间的行为</a></li>
<li><a href="#%E9%81%BF%E5%85%8D%E4%BD%8D%E5%9B%BE%E6%8D%95%E8%8E%B7%E5%92%8C%E6%AF%94%E8%BE%83">避免位图捕获和比较</a></li>
</ul>
<h3 id="避免验证步骤中的副作用">避免验证步骤中的副作用</h3>
<p>在使用QCOMPARE ()、QVERIFY () 等执行自动测试中的验证步骤时，应避免副作用。验证步骤中的副作用会使测试难以理解。此外，当测试更改为使用QTRY_VERIFY ()、QTRY_COMPARE () 或QBENCHMARK ()时，他们可以很容易地以难以诊断的方式破坏测试。这些可以多次执行传递的表达式，从而重复任何副作用。</p>
<p>当副作用不可避免时，确保在测试函数结束时恢复先前的状态，即使测试失败。这通常需要使用在函数返回时恢复状态的 RAII（资源获取即初始化）类或cleanup()方法。不要简单地将恢复代码放在测试结束时。如果部分测试失败，此类代码将被跳过并且不会恢复之前的状态。</p>
<h3 id="避免固定超时">避免固定超时</h3>
<p>避免使用硬编码超时，例如QTest::qWait () 来等待某些条件变为真。考虑使用QSignalSpy类、QTRY_VERIFY () 或QTRY_COMPARE () 宏，或将QSignalSpy类与QTRY_宏变体结合使用。</p>
<p>该qWait()函数可用于在执行某些操作和等待该操作触发的某些异步行为完成之间设置一段固定时间的延迟。例如，更改小部件的状态，然后等待小部件重新绘制。但是，当在工作站上编写的测试在设备上执行时，此类超时通常会导致失败，在这种情况下，预期行为可能需要更长时间才能完成。在最慢的测试平台上将固定超时增加到比所需值大几倍的值并不是一个好的解决方案，因为它会减慢所有平台上的测试运行速度，特别是对于表驱动测试。</p>
<p>如果被测代码在异步行为完成时发出 Qt 信号，更好的方法是使用QSignalSpy类通知测试函数现在可以执行验证步骤。</p>
<p>如果没有 Qt 信号，请使用QTRY_COMPARE()和QTRY_VERIFY()宏，它会定期测试指定的条件，直到它变为真或达到某个最大超时。这些宏可防止测试花费比必要时间更长的时间，同时避免在工作站上编写测试并随后在嵌入式平台上执行时出现中断。</p>
<p>如果没有 Qt 信号，并且您正在编写测试作为开发新 API 的一部分，请考虑 API 是否可以从添加报告异步行为完成的信号中受益。</p>
<h3 id="谨防依赖于时间的行为">谨防依赖于时间的行为</h3>
<p>一些测试策略容易受到某些类的时间相关行为的影响，这可能导致测试仅在某些平台上失败或不返回一致的结果。</p>
<p>这方面的一个例子是文本输入小部件，它通常有一个闪烁的光标，可以根据捕获位图时光标的状态使捕获的位图的比较成功或失败。这又可能取决于执行测试的机器的速度。</p>
<p>在测试根据计时器事件更改其状态的类时，在执行验证步骤时需要考虑基于计时器的行为。由于依赖于时序的行为多种多样，因此没有针对此测试问题的单一通用解决方案。</p>
<p>对于文本输入小部件，潜在的解决方案包括禁用光标闪烁行为（如果 API 提供该功能），在捕获位图之前等待光标处于已知状态（例如，如果 API提供一个)，或者从位图比较中排除包含光标的区域。</p>
<h3 id="避免位图捕获和比较">避免位图捕获和比较</h3>
<p>虽然有时需要通过捕获和比较位图来验证测试结果，但它可能非常脆弱且需要大量劳动。</p>
<p>例如，特定小部件在不同平台上可能有不同的外观或具有不同的小部件样式，因此可能需要多次创建参考位图，然后在未来随着 Qt 支持的平台集的发展进行维护。因此，进行影响位图的更改意味着必须在每个支持的平台上重新创建预期的位图，这将需要访问每个平台。</p>
<p>位图比较也会受到测试机器的屏幕分辨率、位深度、活动主题、配色方案、小部件样式、活动区域设置（货币符号、文本方向等）、字体大小、透明度效果和选择等因素的影响的窗口管理器。</p>
<p>在可能的情况下，使用编程方式，例如验证对象和变量的属性，而不是捕获和比较位图。</p>
<h2 id="改进测试输出">改进测试输出</h2>
<p>以下部分提供了生成可读且有用的测试输出的指南：</p>
<ul>
<li><a href="#%E6%98%BE%E5%BC%8F%E5%BF%BD%E7%95%A5%E9%A2%84%E6%9C%9F%E8%AD%A6%E5%91%8A">显式忽略预期警告</a></li>
<li><a href="#%E6%98%BE%E5%BC%8F%E5%BF%BD%E7%95%A5%E9%A2%84%E6%9C%9F%E8%AD%A6%E5%91%8A">显式忽略预期警告</a></li>
<li><a href="#%E7%BC%96%E5%86%99%E7%BB%93%E6%9E%84%E8%89%AF%E5%A5%BD%E7%9A%84%E8%AF%8A%E6%96%AD%E4%BB%A3%E7%A0%81">编写结构良好的诊断代码</a></li>
</ul>
<h3 id="显式忽略预期警告">显式忽略预期警告</h3>
<p>如果预期测试会导致 Qt 在控制台上输出警告或调试消息，则应调用QTest::ignoreMessage () 将该消息从测试输出中过滤掉，如果没有输出消息，则测试失败。</p>
<p>如果只有在调试模式下构建 Qt 时才会输出这样的消息，请使用QLibraryInfo::isDebugBuild () 来确定 Qt 库是否是在调试模式下构建的。使用#ifdef QT_DEBUG是不够的，因为它只会告诉您测试是否是在调试模式下构建的，并且不能保证 Qt 库也是在调试模式下构建的。</p>
<h3 id="避免打印来自自动测试的调试消息">避免打印来自自动测试的调试消息</h3>
<p>自动测试不应产生任何未处理的警告或调试消息。这将允许 CI Gate 将新警告或调试消息视为测试失败。</p>
<p>在开发过程中添加调试消息很好，但是在签入测试之前应该禁用或删除这些消息。</p>
<h3 id="编写结构良好的诊断代码">编写结构良好的诊断代码</h3>
<p>如果测试失败，任何有用的诊断输出都应该是常规测试输出的一部分，而不是被注释掉、被预处理器指令禁用或仅在调试版本中启用。如果在持续集成期间测试失败，与启用诊断代码和再次测试相比，在 CI 日志中包含所有相关的诊断输出可以为您节省大量时间。特别是，如果故障发生在您的桌面上没有的平台上。</p>
<p>测试中的诊断消息应该使用 Qt 的输出机制，例如qDebug()and qWarning()，而不是stdio.horiostream.h输出机制。后者绕过 Qt 的消息处理并阻止-silent命令行选项抑制诊断消息。这可能会导致在大量调试输出中隐藏重要的失败消息。</p>
<h2 id="编写可测试的代码">编写可测试的代码</h2>
<p>以下部分提供了编写易于测试的代码的指南：</p>
<ul>
<li><a href="#%E6%89%93%E7%A0%B4%E4%BE%9D%E8%B5%96">打破依赖</a></li>
<li><a href="#%E5%B0%86%E6%89%80%E6%9C%89%E7%B1%BB%E7%BC%96%E8%AF%91%E5%88%B0%E5%BA%93%E4%B8%AD">将所有类编译到库中</a></li>
</ul>
<h3 id="打破依赖">打破依赖</h3>
<p>单元测试的想法是单独使用每个类。由于许多类实例化了其他类，因此不可能单独实例化一个类。因此，您应该使用一种称为依赖注入的技术，它将对象创建与对象使用分开。工厂负责构建对象树。其他对象通过抽象接口操作这些对象。</p>
<p>这种技术适用于数据驱动的应用程序。对于 GUI 应用程序，这种方法可能很困难，因为对象经常被创建和销毁。为了验证依赖于抽象接口的类的正确行为，可以使用模拟。例如，请参阅Googletest Mocking (gMock) 框架。</p>
<h3 id="将所有类编译到库中">将所有类编译到库中</h3>
<p>在中小型项目中，构建脚本通常会列出所有源文件，然后一次性编译可执行文件。这意味着测试的构建脚本必须再次列出所需的源文件。</p>
<p>在脚本中只列出一次源文件和头文件来构建静态库会更容易。然后该main()函数将链接到静态库以构建可执行文件，并且测试将链接到静态库。</p>
<p>对于在构建多个程序时使用相同源文件的项目，将共享类构建到每个程序（包括测试程序）可以在运行时加载的动态链接（或共享对象）库中可能更合适. 同样，将编译后的代码放在库中有助于避免重复描述组合哪些组件来制作各种程序。</p>
<h2 id="设置测试机">设置测试机</h2>
<p>以下部分讨论由测试机设置引起的常见问题：</p>
<ul>
<li><a href="#%E5%B1%8F%E5%B9%95%E4%BF%9D%E6%8A%A4%E7%A8%8B%E5%BA%8F">屏幕保护程序</a></li>
<li><a href="#%E7%B3%BB%E7%BB%9F%E5%AF%B9%E8%AF%9D%E6%A1%86">系统对话框</a></li>
<li><a href="#%E6%98%BE%E7%A4%BA%E4%BD%BF%E7%94%A8">显示使用</a></li>
<li><a href="#%E7%AA%97%E5%8F%A3%E7%AE%A1%E7%90%86%E5%99%A8">窗口管理器</a></li>
</ul>
<p>所有这些问题通常都可以通过明智地使用虚拟化来解决。</p>
<h3 id="屏幕保护程序">屏幕保护程序</h3>
<p>屏幕保护程序可能会干扰 GUI 类的某些测试，从而导致测试结果不可靠。应禁用屏幕保护程序以确保测试结果一致和可靠。</p>
<h3 id="系统对话框">系统对话框</h3>
<p>操作系统或其他正在运行的应用程序意外显示的对话框可能会从自动测试中涉及的小部件中窃取输入焦点，从而导致不可重现的故障。</p>
<p>典型问题的示例包括 macOS 上的在线更新通知对话框、病毒扫描程序的误报、病毒签名更新等计划任务、推送到工作站的软件更新以及在堆栈顶部弹出窗口的聊天程序。</p>
<h3 id="显示使用">显示使用</h3>
<p>某些测试使用测试机器的显示器、鼠标和键盘，因此如果机器同时用于其他用途或并行运行多个测试，则可能会失败。</p>
<p>CI 系统使用专用测试机来避免此问题，但如果您没有专用测试机，则可以通过在第二台显示器上运行测试来解决此问题。</p>
<p>在 Unix 上，还可以在嵌套或虚拟 X 服务器上运行测试，例如 Xephyr。例如，要在 Xephyr 上运行整套测试，请执行以下命令：</p>
<pre><code>Xephyr :1 -ac -screen 1920x1200 &gt;/dev/null 2&gt;&amp;1 &amp;
sleep 5
DISPLAY=:1 icewm &gt;/dev/null 2&gt;&amp;1 &amp;
cd tests/auto
make
DISPLAY=:1 make -k -j1 check
</code></pre>
<p>NVIDIA 二进制驱动程序的用户应该注意 Xephyr 可能无法提供 GLX 扩展。强制 Mesa libGL 可能会有所帮助：</p>
<pre><code>export LD_PRELOAD=/usr/lib/mesa-diverted/x86_64-linux-gnu/libGL.so.1
</code></pre>
<p>但是，当在 Xephyr 和具有不同 libGL 版本的真实 X 服务器上运行测试时，QML 磁盘缓存可能会使测试崩溃。为避免这种情况，请使用QML_DISABLE_DISK_CACHE=1.</p>
<p>或者，使用屏幕外插件：</p>
<pre><code>TESTARGS=&quot;-platform offscreen&quot; make check -k -j1
</code></pre>
<h3 id="窗口管理器">窗口管理器</h3>
<p>在 Unix 上，至少有两个自动测试（tst_examples和tst_gestures）需要运行窗口管理器。因此，如果在嵌套的 X-server 下运行这些测试，您还必须在该 X-server 中运行窗口管理器。</p>
<p>您的窗口管理器必须配置为自动定位显示器上的所有窗口。一些窗口管理器，例如 Tab Window Manager (twm)，具有手动定位新窗口的模式，这会阻止测试套件在没有用户交互的情况下运行。</p>
<p>注意： Tab Window Manager 不适合运行完整的 Qt 自动测试套件，因为tst_gestures自动测试会导致它忘记其配置并恢复到手动窗口放置。</p>

        
        ]]>
      </description>
    </item>
    
    
    
    <item>
      <title>开发指南-未完待续</title>
      <link>/post/2021/07/16/%E5%BC%80%E5%8F%91%E6%8C%87%E5%8D%97-%E6%9C%AA%E5%AE%8C%E5%BE%85%E7%BB%AD/</link>
      <pubDate>Fri, 16 Jul 2021 14:24:34 +0800</pubDate>
      <author>罗泽勋</author>
      <guid>/post/2021/07/16/%E5%BC%80%E5%8F%91%E6%8C%87%E5%8D%97-%E6%9C%AA%E5%AE%8C%E5%BE%85%E7%BB%AD/</guid>
      <description>
        <![CDATA[
        <p>提高质量和生产率是软件工程要解决的核心问题。</p>
<p>软件开发：正确性、健壮性、可靠性、效率、易用性、可读性（可理解性）、可扩展性、可复用性、兼容性、可移植性等。</p>
<p>只记录实际目前为止比较困惑的。</p>
<h3 id="头文件的结构">头文件的结构</h3>
<p>1.为了防止头文件被重复引用，应当用 ifndef/define/endif 结构产生预处理块。</p>
<p>2.用 #include&lt;filename.h&gt;格式来引用非标准库的头文件（编译器将会从标准库目录开始搜索；用 #include&lt;Îy &ldquo;filename.h&rdquo; 格式来引用非标准库的头文件（编译器将从用户的工作目录开始搜索）。（注：一般将 &lt;&gt; 格式的放在前， &ldquo;&ldquo;格式的放在后，为了统一风格）</p>
<p>3.头文件只存放“声明”而不存放“定义”。（C++中，类的成员函数可以在声明的同时被定义，并且自动成为内联函数。但这样做会造成风格不一致，弊大于利！</p>
<p>4.不提倡使用全局变量，尽量不要在头文件中出现 extern int value 这类声明。</p>
<h3 id="头文件作用">头文件作用：</h3>
<ul>
<li>
<p>（1）通过头文件来调用库功能。在很多场合，源代码不便（或不准）向用户公布，只要向用户提供头文件和二进制的库即可。用户只需要按照头文件中的借口声明来调用库的功能，而不必关心接口怎么实现的。编译器会从库中提取相应的代码。</p>
</li>
<li>
<p>（2）头文件能加强类型安全检查。如果某个接口被实现或被使用时，其方式与头文件中的声明不一致，编译器就会指出错误，这一简单的规则能大大减轻程序员调试、改错的负担。</p>
</li>
</ul>
<h3 id="目录结构">目录结构</h3>
<p>如果一个软件的头文件数目比较多（如超过十个），通常应将头文件和定义文件分别保存于不同的目录，以便于维护。</p>
<p>例如可将头文件保存于 include 目录，将定义文件保存于 source 目录（可以是多级目录）。</p>
<p>如果某些头文件是私有的，它不会被用户的程序直接饮用，则没有必要公开其“声明”，可以把这些私有的头文件和定义文件存放于同一个目录。</p>
<h3 id="空行">空行</h3>
<p>1.类声明之后、函数定义结束之后要加空行。</p>
<p>2.在一个函数体内，逻辑上密切相关的语句之间不加空行，其他地方应加空行分割。</p>
<h3 id="代码行">代码行</h3>
<p>1.一行代码只做一件事情，如只定义一个变量，或只写一条语句。</p>
<p>2.if、for、while、do 等语句自占一行，执行语句不得紧跟其后。不论执行语句有多少都要加{}。这样可以防止书写失误。（注：也为了统一风格）</p>
<p>3.尽可能在定义变量的同时初始化该变量（就近原则）。（注：这样可以减少被野指针折磨的痛苦，强烈建议）</p>
<h3 id="代码行内的空格">代码行内的空格</h3>
<p>1.关键字之后要留一个空格。像 if、for、while 等关键字之后应留一个空格再跟左括号 &lsquo;('，以突出关键字。</p>
<p>2.函数名之后不要留空格，紧跟左括号&rsquo;('，以与关键字区别。</p>
<p>3.'(&lsquo;向后紧跟，')'、‘，’、‘；’向前紧跟，紧跟处不留空格。</p>
<p>4.&rsquo;,&lsquo;之后要留空格，如果&rsquo;;&lsquo;不是一行的结束符号，其后要留空格，如for(initialization; condition; update)。</p>
<p>5.【建议】对于表达式比较长的 for 语句和 if 语句，为了紧凑起见可以适当地去掉一些空格。（注：如果真的长到影响阅读，可以考虑）</p>
<h3 id="对齐">对齐</h3>
<p>1.‘{{’h和‘}}’应独占一行并且位于同一列，同时与引用它们的语句左对齐。</p>
<h3 id="长行拆分">长行拆分</h3>
<p>1.代码行最大长度应控制在 70 至 80 个字符以内。</p>
<p>2.【强烈】长表达式要在低优先级操作符处拆分成新行，操作符放在新行之首。</p>

        
        ]]>
      </description>
    </item>
    
    
    
    <item>
      <title>vim 操作备忘</title>
      <link>/post/2021/07/10/vim-%E6%93%8D%E4%BD%9C%E5%A4%87%E5%BF%98/</link>
      <pubDate>Sat, 10 Jul 2021 10:35:46 +0800</pubDate>
      
      <guid>/post/2021/07/10/vim-%E6%93%8D%E4%BD%9C%E5%A4%87%E5%BF%98/</guid>
      <description>
        <![CDATA[
        <h3 id="一存活">一、存活</h3>
<table>
<thead>
<tr>
<th style="text-align:left">操作</th>
<th style="text-align:left">含义</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">i</td>
<td style="text-align:left">Insert 模式，按 ESC 回到 Normal 模式。</td>
</tr>
<tr>
<td style="text-align:left">x</td>
<td style="text-align:left">删除当前光标所在的一个字符。</td>
</tr>
<tr>
<td style="text-align:left">:wq</td>
<td style="text-align:left">保存退出</td>
</tr>
<tr>
<td style="text-align:left">dd</td>
<td style="text-align:left">删除当前行，并存到剪切板</td>
</tr>
<tr>
<td style="text-align:left">p</td>
<td style="text-align:left">粘贴剪切板</td>
</tr>
<tr>
<td style="text-align:left">hjkl</td>
<td style="text-align:left">左下上右</td>
</tr>
<tr>
<td style="text-align:left">:help <command></td>
<td style="text-align:left">显示相关命令的帮助</td>
</tr>
</tbody>
</table>
<h3 id="二感觉良好">二、感觉良好</h3>
<p>1.各种插入模式</p>
<table>
<thead>
<tr>
<th style="text-align:left">操作</th>
<th style="text-align:left">含义</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">a</td>
<td style="text-align:left">在光标后插入</td>
</tr>
<tr>
<td style="text-align:left">o</td>
<td style="text-align:left">在当前行后插入一个新行</td>
</tr>
<tr>
<td style="text-align:left">O</td>
<td style="text-align:left">在当前行前插入一个新行</td>
</tr>
<tr>
<td style="text-align:left">cw</td>
<td style="text-align:left">替换从光标所在位置到一个单词结尾的字符</td>
</tr>
</tbody>
</table>
<p>2.简单的光标移动</p>
<table>
<thead>
<tr>
<th style="text-align:left">操作</th>
<th style="text-align:left">含义</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">0</td>
<td style="text-align:left">数字零，到行头</td>
</tr>
<tr>
<td style="text-align:left">^</td>
<td style="text-align:left">到本行第一个不是 blank 字符的位置（blank 字符就是空格、tab、换行、回车等）</td>
</tr>
<tr>
<td style="text-align:left">$</td>
<td style="text-align:left">到本行行尾</td>
</tr>
<tr>
<td style="text-align:left">g_</td>
<td style="text-align:left">到本行最后一个不是 blank 字符的位置</td>
</tr>
<tr>
<td style="text-align:left">/pattern</td>
<td style="text-align:left">搜索 pattern 的字符串（多个匹配时，按 n 到下一个）</td>
</tr>
</tbody>
</table>
<p>3.拷贝/粘贴</p>
<table>
<thead>
<tr>
<th style="text-align:left">操作</th>
<th style="text-align:left">含义</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">p</td>
<td style="text-align:left">粘贴</td>
</tr>
<tr>
<td style="text-align:left">yy</td>
<td style="text-align:left">拷贝当前行</td>
</tr>
</tbody>
</table>
<p>4.撤销反撤销</p>
<table>
<thead>
<tr>
<th style="text-align:left">操作</th>
<th style="text-align:left">含义</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">u</td>
<td style="text-align:left">撤销</td>
</tr>
<tr>
<td style="text-align:left">ctrl-r</td>
<td style="text-align:left">反撤销</td>
</tr>
</tbody>
</table>
<p>5.打开/保存/退出/改变文件（Buffer)</p>
<table>
<thead>
<tr>
<th style="text-align:left">操作</th>
<th style="text-align:left">含义</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">:e &lt;path/to/file&gt;</td>
<td style="text-align:left">打开一个文件</td>
</tr>
<tr>
<td style="text-align:left">:w</td>
<td style="text-align:left">保存</td>
</tr>
<tr>
<td style="text-align:left">:saveas &lt;path/to/file&gt;</td>
<td style="text-align:left">另存为</td>
</tr>
<tr>
<td style="text-align:left">:x, ZZ 或 :wq</td>
<td style="text-align:left">保存并退出(:x仅在需要时保存)</td>
</tr>
<tr>
<td style="text-align:left">:q!</td>
<td style="text-align:left">退出不保存</td>
</tr>
<tr>
<td style="text-align:left">:qa!</td>
<td style="text-align:left">强行退出所有正在编辑的文件</td>
</tr>
<tr>
<td style="text-align:left">:n， :bn</td>
<td style="text-align:left">下一个文件</td>
</tr>
<tr>
<td style="text-align:left">:bp</td>
<td style="text-align:left">上一个文件</td>
</tr>
</tbody>
</table>
<h3 id="三更好更强更快">三、更好、更强、更快</h3>
<h3 id="未完待续">未完待续</h3>

        
        ]]>
      </description>
    </item>
    
    
    
    <item>
      <title>从零开始搭建个人网站——小白篇</title>
      <link>/post/2021/06/01/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E7%BD%91%E7%AB%99%E5%B0%8F%E7%99%BD%E7%AF%87/</link>
      <pubDate>Tue, 01 Jun 2021 06:16:32 +0800</pubDate>
      <author>罗泽勋</author>
      <guid>/post/2021/06/01/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E7%BD%91%E7%AB%99%E5%B0%8F%E7%99%BD%E7%AF%87/</guid>
      <description>
        <![CDATA[
        <h3 id="前言">前言</h3>
<p>小白篇和前面<a href="../2021-2-18-2/">正经篇</a>的区别是，懒人篇专门针对基础更浅（或者更懒的）朋友而设计，在这里不会新建一个网站，而是下载我预先准备好的<a href="https://gitee.com/lzxqaq/demosite.git">示例网站</a>，在这个示例上面做扩展。这样也是为了避免新手成功创建网站时，面对空荡荡的网站不知所措的尴尬。</p>
<h3 id="准备工作与前篇一致">准备工作（与前篇一致）</h3>
<p>1.注册 Github 帐号。前往 <a href="https://github.com/" target="_blank">github.com</a> 注册一个 Github 帐号。（友情提示：认真考虑注册时的用户名，它将是你网站网址的一部分）</p>
<p>补充：Github 是一个代码托管平台（远程仓库），你可以将网站的源代码放在上面，Github Pages 是一个免费的静态网站服务，你将网站的源文件放在上面，它会提供一个链接，使互联网上的人都能访问你的网站。</p>
<p>2.准备Git。</p>
<p>（1）下载安装。前往 <a href="https://git-scm.com/download/win" target="_blank">这里</a> ，点击下载 Git-**-64-bit.exe。然后安装，不懂的话一直 next 。</p>
<p>（2）配置。在 win10 搜索 cmd ，打开命令提示符，输入 <code>git config --global user.email &quot;你注册Github所用的邮箱&quot;</code> 回车执行，再输入 <code>git config --global user.name &quot;你的昵称&quot;</code> 回车执行。</p>
<p>3.安装 Hugo。（官方教程可看<a href="https://www.gohugo.org/doc/tutorials/installing-on-windows/" target="_blank">这里</a>)</p>
<p>（1）首先在 D 盘创建一个新文件夹 Hugo，然后在里面创建 bin 和 sites两个文件夹。bin 将用来放 Hugo 的可执行文件，sites 将用来放你的网站的源代码。</p>
<p>（2）前往<a href="https://github.com/spf13/hugo/releases" target="_blank">这里</a>，找到并下载 hugo_<em><em>Windows-64bit.zip。解压，如果是一个 hugo</em></em>_windows_amd64.exe 文件，将它改名为 hugo.exe。</p>
<p>（3）将这个 hugo.exe 文件移动到刚刚创建的 bin 文件夹里。</p>
<p>（4）配置环境变量。方法1:在 win10 搜索 cmd，右键<strong>以管理员身份打开</strong>命令提示符，将 <code>setx &quot;Path&quot; &quot;%PATH%;D:\Hugo\bin&quot; /m </code>复制粘贴上去，回车（输入命令后需回车执行，后文不再赘述）。 方法2：在 win10 搜索环境变量，进去找到系统变量中的 Path，-&gt;编辑-&gt;新建，然后将 <code>D:\Hugo\bin</code> 复制进去，确定。</p>
<p>（5）验证。重新打开命令提示符（关闭上一步骤使用的），输入执行 <code>hugo help</code>，如果你能看到 hugo 的帮助文档，就验证成功，否则检查上述步骤是否出错。</p>
<h3 id="开始">开始</h3>
<p>1.建立博客网站</p>
<p>（1）下载示例网站。打开命令提示符，执行 <code>D:</code> 切换 D 盘，然后执行 <code>cd D:\Hugo\sites</code> 进入 D:\Hugo\sites 目录（便捷方法：在文件资源管理器中进入相应目录，单击地址栏右边空白地方，在文本最左输入 <code>cmd </code> 加空格，回车），执行命令 <code>git clone https://gitee.com/lzxqaq/demosite.git</code> ，如最后出现 <code>** 100% ** 完成</code> 则成功。（此时可在文件资源管理器中查看下载的文件夹 <code>demosite</code>）</p>
<p>（2）预览。紧接上一步，在命令提示符中执行 <code>cd demosite</code> 进入 demosite 目录，先执行 <code>hugo</code> ，再执行 <code>hugo server</code>。打开浏览器，输入网址访问 localhost:1313。</p>
<p>2.将网站展示文件存放到 Github 远程仓库。</p>
<p>（1）在 Github 中创建一个名为 你的仓库名字.github.io 的仓库，在设置中检查 Github Pages。</p>
<p>（2）打开命令提示符，进入 demosite\public 目录，分别执行</p>
<pre><code>git init 
git add .
git commit -m &quot;first commit&quot;
git remote add origin https://github.com/你的Github名字/你的Github名字.github.io.git
git push --set-upstream origin master
</code></pre>
<p>输入账号名，密码，完成上传。</p>
<p>（3）测试。访问 github.com 网站，在你之前创建的仓库可以看到刚刚上传的文件。随后检查 Github Pages 设置，打开网址 <code>https://你的Github账户名.github.io</code> 访问你的网站，如果没有之前预览的网页，可以等待一会再刷新。</p>
<p>3.自定义域名（可选、需要一定的时间）</p>
<p>（1）购买域名。在华为云、阿里云等服务商购买域名。注意：国内购买域名需要实名认证。</p>
<p>（2）配置。访问 github.com 网站，进入你的仓库，在 setting 中找到 Github Pages，在 Custom domain 输入框中输入你的域名，保存。</p>
<p>（3）测试。访问你的域名。</p>

        
        ]]>
      </description>
    </item>
    
    
    
    <item>
      <title>【规约】 C&#43;&#43; 编程篇</title>
      <link>/post/2021/05/28/%E8%A7%84%E7%BA%A6-c-%E7%BC%96%E7%A8%8B%E7%AF%87/</link>
      <pubDate>Fri, 28 May 2021 11:46:44 +0800</pubDate>
      
      <guid>/post/2021/05/28/%E8%A7%84%E7%BA%A6-c-%E7%BC%96%E7%A8%8B%E7%AF%87/</guid>
      <description>
        <![CDATA[
        <h3 id="前言">前言</h3>
<p>“码出高效，码出质量”。本文整理了比较常见的 C++ 编程规范，主要来源于华为《软件编程规范总则》。</p>
<h3 id="一排版">（一）排版</h3>
<p>1.程序块要采用缩进风格编写，缩进的空格数位 4 个。对齐只用空格键，不适用tab键。<br>
2.相对独立的程序块之间、变量说明之后必须加空行。<br>
3.较长的语句（&gt;80 字符）要分成多行书写，长表达式要在低优先级操作符划分新行，操作符放在新行之首。<br>
4.if、for、do、while、case、switch、default 等语句自占一行，且执行语句部分无论多少都要加括号 {}。</p>
<h3 id="二注释">（二）注释</h3>
<p>1.一般情况下，源程序有效注释量必须在 20% 以上。<br>
2.说明性文件（如头文件 .h 文件、.inc 文件、.def 文件等）头部应进行注释，注释必须列出：版权说明、版本号、生成日期、作者、内容、功能、与其他头文件关系、修改日志等，头文件注释中还应有函数功能简要说明。<br>
3.源文件头部应进行注释，列出：版权说明、版本号、生成日期、作者、模块目的/功能、主要函数及其功能、修改日志等。<br>
4.函数头部应进行注释，列出：函数的目的/功能、输入参数、输出参数、返回值、调用关系（函数、表）等。<br>
5.边写代码边注释，修改代码同时修改响应的注释。不再有用的注释 要删除。<br>
6.注释格式尽量统一，建议使用“/<em>…………</em>/”。<br>
7.注释应考虑程序易读性，建议使用中文。</p>
<h3 id="三标识符命名">（三）标识符命名</h3>
<p>1.命名规范必须与所使用的系统风格保持一致，并在同一项目中统一，比如采用 UNIX 的全小写加下划线风格或大小写混排的方式，不要将两种方式混合使用。用作特殊标识如标识成员变量或全局变量的 m_ 和 g_，其后加上大小写混排的方式是允许的。<br>
示例：Add_User 不允许，add_user、AddUser、m_AddUser允许。</p>
<p>2.用正确的反义词组命名具有互斥意义的变量或相反动作的函数等。<br>
说明：以下是一些在软件中常用的反义词组。<br>
add / remove    begin / end    create / destroy<br>
insert /delete    first / last    get / release<br>
increment / decrement    put / get<br>
add /delete    lock unlock    open /close<br>
min / max    old /new     stat / stop<br>
next /previous    source / target    show / hide<br>
send / receive    source / destination <br>
cut /paste    up / down<br>
示例：<br>
int min_sum;<br>
int max_sum;<br>
int add_user( BYTE *user_name );<br>
int delete_user( BYTE *user_name);</p>
<h3 id="四可测性">（四）可测性</h3>
<p>1.使用断言来发现软件问题，提高代码可测性。</p>
<h3 id="五程序效率">（五）程序效率</h3>
<p>1.多重循环中，应将最忙的循环放在最内层。<br>
2.尽量减少循环嵌套层次。<br>
3.尽量使用乘法或其他方法代替除法特别是浮点运算中的除法（占用较多 CPU 资源）。</p>
<h3 id="六质量保证">（六）质量保证</h3>
<p>1.防止引用已经释放的内存空间。<br>
2.过程/函数中分配的内存，在过程/函数退出之前要释放。<br>
3.过程/函数中申请的（为打开文件而使用的）文件句柄，在过程/函数退出之前要关闭。<br>
4.防止内存操作越界。<br>
5.编程时，要防止差 1 错误。（&lt;=、&lt;等注意）<br>
6.if 语句尽量加上 else 分支，switch 语句必须有 default 分支。<br>
7.Unix 下，多线程的子线程退出必需采用主动退出的方式，即子线程应 return 出口。<br>
8.时刻注意表达式是否会上溢、下溢。使用变量时要注意其边界值的情况。</p>

        
        ]]>
      </description>
    </item>
    
    
    
    <item>
      <title>【规约】 Java 编程篇</title>
      <link>/post/2021/05/28/%E8%A7%84%E7%BA%A6-java-%E7%BC%96%E7%A8%8B%E7%AF%87/</link>
      <pubDate>Fri, 28 May 2021 10:36:40 +0800</pubDate>
      
      <guid>/post/2021/05/28/%E8%A7%84%E7%BA%A6-java-%E7%BC%96%E7%A8%8B%E7%AF%87/</guid>
      <description>
        <![CDATA[
        <h3 id="前言">前言</h3>
<p>“码出高效，码出质量”。本文整理了比较常见的 Java 编程规范，主要来源于《阿里巴巴 Java 开发手册》。</p>
<h3 id="一命名风格">（一）命名风格</h3>
<p>1.【强制】类名使用 UpperCamelCase风格，但以下情形例外：DO  /  BO  /  DTO  /  VO  /  AO  /  PO  /  UID等。
正例：MarcoPolo  /  UserDO  /  XmlService  /  TcpUdpDeal  /TaPromotion</p>
<p>2.【强制】方法名、参数名、成员变量、局部变量都统一使用 lowerCamelCase 风格，必须遵从驼峰形式。<br>
正例：localValue  /  getHttpMessage()  /  inputUserId</p>
<p>3.【强制】常量命名全部大写，单词间用下划线隔开，力求语义表达完整清楚，不要嫌名字长。<br>
正例：MAX_STOCK_COUNT</p>
<p>4.【强制】抽象类命名使用 Abstract 或 Base 开头；异常类命名使用 Exception 结尾；测试类命名以它要测试的类的名称开始，以 Test 结尾。</p>
<p>5.【强制】类型与中括号紧挨起来表示数组。<br>
正例：int[] arrayDemo;</p>
<p>6.【强制】POJO 类中布尔类型的变量，都不要加 is 前缀。</p>
<p>7.【强制】包名统一使用小写，点分隔符之间有且只有一个自然语义的英语单词。包名统一使用单数形式，但是类名如果有复数含义，类名可以使用复数形式。<br>
正例：应用工具类包名为 com.alibaba.ai.util、类名为 MessageUtils。</p>
<p>8.【强制】杜绝完全不规范的缩写，任何自定义编程元素在命名时，使用尽量完整的单词组合来表达其意。</p>
<p>9.【推荐】如果模块、接口、类、方法使用了设计模式，在命名时需体系那具体模式。</p>
<p>10.【推荐】接口类的方法和属性不要加任何修饰符号（public 也不要加），保持代码整洁，并加上有效的 Javadoc 注释。</p>
<p>11.【强制】对于 Service 和 DAO 类，基于 SOA 的理念，暴露出来的一定时接口，内部的实现类用 Impl 的后缀与接口区别。<br>
正例：CacheServiceImpl 实现 CacheService。</p>
<p>12.【参考】各层命名规约：
A）Service/DAO 层方法命名规约<br>
1）获取单个对象的方法用 get 做前缀。<br>
2）获取多个对象的方法用 list 做前缀，复数形式结尾如： listObjects。<br>
3）获取统计值的方法用 count 做前缀。<br>
4）插入的方法用 save/insert 做前缀<br>
5）删除的方法用 remove/delete 做前缀<br>
6）修改的方法用 update 做前缀<br>
B）领域模型命名规约<br>
1）数据对象：xxxDO，xxx 即为数据表名。<br>
2）数据传输对象：xxxDTO，xxx 为业务领域相关的名称。<br>
3）展示对象：xxxVO，xxx 一般为网页名称。<br>
4) POJO 是 DO/DTO/BO/VO 的统称，禁止命名为 xxxPOJO。</p>
<p>13.【强制】不允许任何魔法值（即未经预先i当以的常量）出现在代码中。<br>
反例：String key = &ldquo;ID#taobao_&rdquo; + tradeId;</p>
<p>14.【强制】代码格式，具体见下面正例。
正例：</p>
<pre><code>    public static void main(String[] args) {
        // 缩进4个空格，注释内空1格
        String say = &quot;hello&quot;;
        // 运算符左右必须有一个空格
        int flag = 0;
        // 关键词 if 与括号之间必须有一个空格
        if (flag == 0) {
            System.out.println(say);
        }

        // 左大括号前加空格且不换行，左大括号后换行。
        if (flag == 0) {
            System.out.println(&quot;world&quot;);
        //  右大括号前换行，右大括号后有 else，不用换行、
        }
        else {
            System.out.printLn(&quot;ok&quot;);
        }
    }</code></pre>

        
        ]]>
      </description>
    </item>
    
    
    
    <item>
      <title>【规约】 MySQL 数据库篇</title>
      <link>/post/2021/05/28/%E8%A7%84%E7%BA%A6-mysql-%E6%95%B0%E6%8D%AE%E5%BA%93%E7%AF%87/</link>
      <pubDate>Fri, 28 May 2021 09:03:51 +0800</pubDate>
      
      <guid>/post/2021/05/28/%E8%A7%84%E7%BA%A6-mysql-%E6%95%B0%E6%8D%AE%E5%BA%93%E7%AF%87/</guid>
      <description>
        <![CDATA[
        <h3 id="前言">前言</h3>
<p>“码出高效，码出质量”。本文整理了比较常见的 MySQL 数据库编程规范，主要来源于《阿里巴巴 Java 开发手册》。</p>
<h3 id="一建表规约">(一)建表规约</h3>
<p>1.【强制】表达是与否概念的字段，必须使用 is_xxx 的方式命名，数据类型是 unsigned tinying(1 表示是，0 表示否)。<br>
说明：任何字段如果为非负数，必须是 unsigned。<br>
注意：POJO 类中任何布尔类型的变量，都不要加 is 前缀，所以，需要在 <resultMap> 设置从 is_xxx 到 Xxx 的映射关系。数据库表示是与否的值，使用 tinyint 类型，坚持 is_xxx 的命名方式是为了明确其取值含义与范围。<br>
正例：表达逻辑删除的字段名 is_deleted，1 表示删除，0 表示未删除。</p>
<p>2.【强制】表名、字段名必须使用小写字母或数字，禁止出现数字开头，禁止两个下划线中间只出现数字。数据库字段名的修改代价很大，因为无法进行预发布，所以字段名称需要慎重考虑。<br>
说明:MySQL 在 Windows 下不区分大小写，但在 Linux 下默认是区分大小写。因此，数据库名、表名、字段名，都不允许出现任何大小写字母，避免节外生枝。<br>
正例：aliyun_admin, rdc_config, level3_name
反例：AliyunAdmin, rdcConfig, level_3_name</p>
<p>3.【强制】表明不使用复数名词。
说明：表名应该仅仅表示表里面的实体内容，不应该表示实体数量，对应于 DO 类名也是单数形式，符合表达习惯。</p>
<p>4.【强制】主键索引名为 pk_字段名；唯一索引名为 uk_字段名；普通索引名则为 idx_字段名。<br>
说明：pk_ 即 primary key；uk_ 即 unique key；idx_ 即 index 的简称。</p>
<p>5.【小数类型】为 decimal，禁止使用 float 和 double。<br>
说明：float 和 double 在存储的时候，存在精度损失的问题，很可能在值的比较时，得不到正确的结果。如果存储的数据范围超 decimal 的范围，建议将数据拆成整数和小数分开存储。</p>
<p>6.【强制】如果存储的字符串长度几乎相等，使用 char 定长字符串类型。</p>
<p>7.【强制】varchar 是可变字符串，不与先分配存储控件，长度不要超过 5000，如果存储长度大于此值，定义字段类型为 text,独立出来一张表，用主键来对应，避免影响其他字段索引效率。</p>
<p>8.【强制】表必备三字段：id, gmt_create, gmt_modified。<br>
说明：其中 id 必为主键，类型为 bigint unsigned、单表自增、步长为 1。gmt_create，gmt_modified 的类型均为 datetime 类型，前者现在时表示主动创建，后者过去分词表示被动更新。</p>
<p>9.【推荐】表的命名最好是加上”业务名称_表的作用“。<br>
正例：alipay_task   /   force_project   /   trade_config</p>
<p>10.【推荐】库名与应用名称尽量一致。</p>
<p>11.【推荐】字段允许适当冗余，以提高查询性能，但必须考虑数据一致。冗余字段应遵循：<br>
1）不是频繁修改的字段。<br>
2）不是 varchar 超长字段，更不能是 text 字段。<br>
正例：商品类目名称使用频率高，字段长度短，名称基本一成不变，可在相关联的表中冗余存储类目名称，避免关联查询。</p>
<p>12.【参考】合适的字符存储长度，不但节约数据库表空间、节约索引存储，更重要的是提升检索速度。<br>
正例：  人  150岁之内   tinyint unsigned    1字节   无符号值：0 到 255<br>
龟  数百岁  smallint unsigned   2字节   无符号值：0 到65535</p>
<h3 id="二索引规约">（二）索引规约</h3>
<p>1.【强制】业务上具有唯一特性的字段，即使是多个字段的组合，也必须建成唯一索引。<br>
说明：不要以为唯一索引影响了 insert 速度，这个速度的损耗可以忽略，但提高查找速度是明显的；另外，只要没有唯一索引，必定有脏数据产生（墨菲定律）。</p>
<p>2.【强制】超过三个表禁止 join。需要 join 的字段，数据类型必须绝对一致；多表关联查询时，保证被关联的字段有索引。<br>
说明：join 需要注意表索引、SQL 性能。</p>
<p>3.【强制】在 varchar 字段上建立索引时，必须根据文本区分度指定索引长度。</p>
<p>4.【强制】页面搜索严禁左模糊或者全模糊，如果需要请走搜索引擎来解决。<br>
说明：索引文件具有 B-Tree 的最左前缀匹配特性，如果左边的值未确定，那么无法使用此索引。</p>
<p>5.【推荐】利用覆盖索引来进行查询操作，避免回表。</p>
<p>6.【参考】创建索引时避免有如下极端误解：<br>
1）宁滥勿缺。认为一个查询就需要建一个索引。<br>
2）宁缺毋滥。认为索引会消耗空间、严重拖慢更新和新增速度。<br>
3）抵制唯一索引。认为业务的唯一性一律需要在应用层通过”先查后插“方式解决。</p>
<h3 id="三sql-语句">（三）SQL 语句</h3>
<p>1.【强制】不要使用 count(列名) 或 count(常量) 来替代 count(*)。</p>
<p>2.【强制】使用 ISNULL() 来判断是否为 NULL 值。</p>
<p>3.【强制】不得使用外键和级联，一切外键概念不必在应用层解决。
说明：外键与级联更新使用于单机低并发，不适合分布式、高并发集群；级联更新时强阻塞，存在数据库过呢更新风暴的风险；外键影响数据库的插入速度。</p>
<p>4.【推荐】尽量避免 in 操作，若使用也需评估 in 后边的集合元素数量，控制在 1000 个之内。</p>

        
        ]]>
      </description>
    </item>
    
    
    
    <item>
      <title>[做点有趣的]C&#43;&#43;做一个哈夫曼压缩软件</title>
      <link>/post/2021/05/25/%E5%81%9A%E7%82%B9%E6%9C%89%E8%B6%A3%E7%9A%84c-%E5%81%9A%E4%B8%80%E4%B8%AA%E5%93%88%E5%A4%AB%E6%9B%BC%E5%8E%8B%E7%BC%A9%E8%BD%AF%E4%BB%B6/</link>
      <pubDate>Tue, 25 May 2021 07:12:32 +0800</pubDate>
      
      <guid>/post/2021/05/25/%E5%81%9A%E7%82%B9%E6%9C%89%E8%B6%A3%E7%9A%84c-%E5%81%9A%E4%B8%80%E4%B8%AA%E5%93%88%E5%A4%AB%E6%9B%BC%E5%8E%8B%E7%BC%A9%E8%BD%AF%E4%BB%B6/</guid>
      <description>
        <![CDATA[
        <h3 id="前言">前言</h3>
<p>这是以前的一个实训周作业，核心是哈夫曼编码和解码，软件界面由 QT 实现。代码量很小，比较简单。</p>
<p>源代码： <a href="https://gitee.com/lzxqaq/zxhan.git">https://gitee.com/lzxqaq/zxhan.git</a></p>
<p>介绍：<a href="https://lzxqaq.com/post/zxhan/">https://lzxqaq.com/post/zxhan/</a></p>
<p>算法参考：<a href="https://blog.csdn.net/small_hacker/article/details/52843738">Huffman压缩真正的C++实现</a></p>
<p>运行环境：Linux 系统（Windows系统下运行尚有 bug ),开发环境为 QT Creator。</p>
<p>运行截图：</p>
<div  align="center">    
 <img src="https://cdn.jsdelivr.net/gh/lzxqaq/zxhan@master/images/zxhan.png" width = "500" height = "200" alt="图片名称" align=center /></div>
<!-- ![img](https://cdn.jsdelivr.net/gh/lzxqaq/zxhan@master/images/zxhan.png) -->
<h3 id="核心实现">核心实现</h3>
<pre><code>void create_node_array();//构造包含字符及其频率的数组
void create_pq();//构造优先级队列
void create_huffman_tree();//构造哈夫曼树
void create_map_table(Node* node,bool);//根据哈夫曼树建立哈夫曼映射表
bool calculate_huffman_codes();//计算哈夫曼编码
bool do_compress();//开始压缩
bool rebuid_huffman_tree();//从哈夫曼编码文件中重构哈夫曼树
void decode_huffman();//根据重构的哈夫曼树解码文件

</code></pre>
<h3 id="后续">后续</h3>
<p>该项目仍有许多不足之处，如果你对该项目有任何意见或建议，欢迎<a href="https://lzxqaq.com/about/">联系我</a>。如有任何问题，亦可与我一同探讨。</p>

        
        ]]>
      </description>
    </item>
    
    
    
    <item>
      <title>[做点有趣的]Java开发泡泡堂游戏（MVC架构）</title>
      <link>/post/2021/05/08/%E5%81%9A%E7%82%B9%E6%9C%89%E8%B6%A3%E7%9A%84java%E5%BC%80%E5%8F%91%E6%B3%A1%E6%B3%A1%E5%A0%82%E6%B8%B8%E6%88%8Fmvc%E6%9E%B6%E6%9E%84/</link>
      <pubDate>Sat, 08 May 2021 11:09:51 +0800</pubDate>
      
      <guid>/post/2021/05/08/%E5%81%9A%E7%82%B9%E6%9C%89%E8%B6%A3%E7%9A%84java%E5%BC%80%E5%8F%91%E6%B3%A1%E6%B3%A1%E5%A0%82%E6%B8%B8%E6%88%8Fmvc%E6%9E%B6%E6%9E%84/</guid>
      <description>
        <![CDATA[
        <h3 id="介绍">介绍</h3>
<p>本项目是一个很久以前的实训周项目，由我和我的组员 ljr 共同实现。整个项目思路清晰，整体难度不大，但是很多细节需要花功夫。本项目仍存在一些不足的地方，后续可能会进行优化，现在我将项目源代码和一些实现思路开源公布。</p>
<p>源代码：<a href="https://gitee.com/lzxqaq/CrazyArcade">https://gitee.com/lzxqaq/CrazyArcade</a></p>
<p>文章介绍：<a href="https://lzxqaq.com/post/java/paopaotang/">https://lzxqaq.com/post/java/paopaotang/</a></p>
<p>程序运行： 在终端下进入执行程序所在目录，执行 <code>java -jar CrazyArcade.jar</code> 或者双击 <code>CrazyArcade.jar</code>，或者在开发环境中打开源代码，运行 <code>GameStart.java</code>的 <code>main</code> 方法。</p>
<p>运行环境：Linux、Windows均可。开发环境：IDEA。</p>
<p>演示视频：</p>
<p>运行截图：</p>
<div  align="center">    
 <img src="https://cdn.jsdelivr.net/gh/lzxqaq/CrazyArcade@master/images/CrazyArcade.png" width = "500" height = "200" alt="图片1" align=center />
 <br/>
  <img src="https://cdn.jsdelivr.net/gh/lzxqaq/CrazyArcade/images/2.png" width = "500" height = "200" alt="图片2" align=center />
 </div>
<h3 id="功能">功能</h3>
<p>本项目实现的功能如下：</p>
<ul>
<li>绘制游戏启动界面、结束界面、地图、主角、道具</li>
<li>实现泡泡爆炸</li>
<li>实现双主角PK（积分制）</li>
<li>实现道具掉落和相应属性加成</li>
<li>实现游戏音效和背景音乐</li>
</ul>
<p>其中我们对游戏玩法做了调整，大致如下:</p>
<p>我们把游戏设计为双人pk积分赛模式，在这个模式里面，玩家只要率先达到一定分数既可以赢得比赛。玩家可以通过炸箱子可以得到少量的分数，也可以通过炸掉对手然后戳破包围对手的水泡得到大量分数。而玩家如果被泡泡爆炸击中，会被泡泡包裹一段时间，在这段时间内不可以移动和放泡泡，需要等时间过去或者被对手戳破水泡才能获得自由。但如果玩家被自己放的泡泡炸中，会扣一定的分数。</p>
<h3 id="思路和架构">思路和架构</h3>
<p>整个项目采用 MVC 架构，将项目整体分为数据模型层（M）、视图层（V）、控制层（C）。M层负责元素的创建、存储、管理，V层负责所有元素的显示（24帧/秒），C层负责交互（监听用户的操作），同时负责控制游戏的进程。</p>
<p>选择MVC架构最主要的原因是让这个游戏项目具有良好的可扩展性和更新功能，当然了，一个好的游戏也需要良好的交互功能，漂亮的UI设计。</p>
<p>架构设计图：</p>
<div  align="center">    
 <img src="https://cdn.jsdelivr.net/gh/lzxqaq/CrazyArcade@master/images/design.png" width = "500" height = "200" alt="图片名称" align=center /></div>
<h3 id="包结构">包结构</h3>
<p>未完待续……</p>
<h3 id="核心实现">核心实现</h3>
<p>未完待续……</p>
<h3 id="后续">后续</h3>
<p>该项目仍有许多不足之处，如果你对该项目有任何意见或建议，欢迎<a href="https://lzxqaq.com/about/">联系我</a>。如有任何问题，亦可与我一同探讨。</p>

        
        ]]>
      </description>
    </item>
    
    
    
    <item>
      <title>从零开始搭建个人网站（win10,Github,Hugo）</title>
      <link>/post/2021/02/18/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E7%BD%91%E7%AB%99win10githubhugo/</link>
      <pubDate>Thu, 18 Feb 2021 09:03:38 +0800</pubDate>
      <author>罗泽勋</author>
      <guid>/post/2021/02/18/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E7%BD%91%E7%AB%99win10githubhugo/</guid>
      <description>
        <![CDATA[
        <h3 id="准备工作">准备工作</h3>
<p>1.注册 Github 帐号。前往 <a href="https://github.com/" target="_blank">github.com</a> 注册一个 Github 帐号。（友情提示：认真考虑注册时的用户名，它将是网址的一部分）</p>
<p>补充：Github 是一个代码托管平台（远程仓库），你可以将网站的源代码放在上面，Github Pages 是一个免费的静态网站服务，你将网站的源文件放在上面，它会提供一个链接，使互联网上的人都能访问你的网站。</p>
<p>2.准备Git。</p>
<p>（1）下载安装。前往 <a href="https://git-scm.com/download/win" target="_blank">这里</a> ，点击下载 Git-**-64-bit.exe。然后安装，不懂的话一直 next 。</p>
<p>（2）配置。在 win10 搜索 cmd ，打开命令提示符，输入 <code>git config --global user.email &quot;你注册Github所用的邮箱&quot;</code> 回车执行，再输入 <code>git config --global user.name &quot;你的昵称&quot;</code> 回车执行。</p>
<p>3.安装 Hugo。（官方教程可看<a href="https://www.gohugo.org/doc/tutorials/installing-on-windows/" target="_blank">这里</a>)</p>
<p>（1）首先在 D 盘创建一个新文件夹 Hugo，然后在里面创建 bin 和 sites两个文件夹。bin 将用来放 Hugo 的可执行文件，sites 将用来放你的网站的源代码。</p>
<p>（2）前往<a href="https://github.com/spf13/hugo/releases" target="_blank">这里</a>，找到并下载 hugo_<em><em>Windows-64bit.zip。解压，如果是一个 hugo</em></em>_windows_amd64.exe 文件，将它改名为 hugo.exe。</p>
<p>（3）将这个 hugo.exe 文件移动到刚刚创建的 bin 文件夹里。</p>
<p>（4）配置环境变量。方法1:在 win10 搜索 cmd，右键<strong>以管理员身份打开</strong>命令提示符，将 <code>setx &quot;Path&quot; &quot;%PATH%;D:\Hugo\bin&quot; /m </code>复制粘贴上去，回车（输入命令后需回车执行，后文不再赘述）。 方法2：在 win10 搜索环境变量，进去找到系统变量中的 Path，-&gt;编辑-&gt;新建，然后将 <code>D:\Hugo\bin</code> 复制进去，确定。</p>
<p>（5）验证。重新打开命令提示符（关闭上一步骤使用的），输入执行 <code>hugo help</code>，如果你能看到 hugo 的帮助文档，就验证成功，否则检查上述步骤是否出错。</p>
<h3 id="开始">开始</h3>
<p>1.建立博客网站</p>
<p>（1）使用 Hugo 建立网站。打开命令提示符，执行 <code>D:</code> 切换 D 盘，然后执行 <code>cd D:\Hugo\sites</code> 进入 D:\Hugo\sites 目录（便捷方法：在文件资源管理器中进入相应目录，单击地址栏右边空白地方，在最左边输入 <code>cmd </code> 加空格，回车），执行命令 <code>hugo new site blog</code> ，如出现 Congratulations! 提示则成功。（此时可在文件资源管理器中查看生成的文件）</p>
<p>（2）下载主题模板（以 Hugo.386 为例）。接上述步骤，在命令提示符中 执行 <code>git clone https://gitlab.com/maxlefou/hugo.386 themes/hugo.386 </code>来下载 hugo.386 主题。</p>
<p>（3）配置。将 hugo.386\exampleSite 文件夹中的 theme.toml 文件复制到文件夹 blog 中，替换原本的。根据需要修改其中的内容。</p>
<p>（4）预览。命令提示符进入 blog 目录，先执行 <code>hugo</code> ，再执行 <code>hugo server</code>。打开浏览器，访问 localhost:1313。</p>
<p>2.将网站展示文件存放到 Github 远程仓库。</p>
<p>（1）在 Github 中创建一个名为 你的仓库名字.github.io 的仓库，在设置 setting 中检查 Github Pages。</p>
<p>（2）打开命令提示符，进入 blog\public 目录，分别执行</p>
<pre><code>git init 
git add .
git commit -m &quot;first commit&quot;
git remote add origin https://github.com/你的Github名字/你的Github名字.github.io.git
git push --set-upstream origin master
</code></pre>
<p>输入账号名，密码，完成上传。</p>
<p>（3）测试。访问 github.com 网站，在你之前创建的仓库可以看到刚刚上传的文件。随后检查 Github Pages 设置，访问提供的 <code>https://你的Github账户名.github.io</code> 访问你的网站，如果没有之前预览的网页，可以等待一会再刷新。</p>
<p>3.自定义域名（可选、需要一定的时间）</p>
<p>（1）购买域名。在华为云、阿里云等服务商购买域名。注意：国内购买域名需要实名认证。</p>
<p>（2）配置。访问 github.com 网站，进入你的仓库，在 setting 中找到 Github Pages，在 Custom domain 输入框中输入你的域名，保存。</p>
<p>（3）测试。访问你的域名。</p>

        
        ]]>
      </description>
    </item>
    
    
    
    <item>
      <title>Java I/O</title>
      <link>/post/2021/01/12/java-i/o/</link>
      <pubDate>Tue, 12 Jan 2021 08:46:08 +0800</pubDate>
      <author>罗泽勋</author>
      <guid>/post/2021/01/12/java-i/o/</guid>
      <description>
        <![CDATA[
        <h3 id="一概览">一、概览</h3>
<p>Java 的 I/O 大概可以分成以下几类：</p>
<ul>
<li>磁盘操作：File</li>
<li>字节操作：InputStream 和 OutputStream</li>
<li>对象操作：Serializable</li>
<li>网络操作：Socket</li>
<li>新的输入/输出：NIO</li>
</ul>
<h3 id="二磁盘操作">二、磁盘操作</h3>
<p>File 类可以用于表示文件和目录的信息，但是它不表示文件的内容。
递归地列出一个目录的所有文件：</p>
<pre><code>public static void listAllFiles(File dir){
    if(dir == null || !dir.exists()){
        return ;
    }
    if(dir.isFile()) {
        System.out.println(dir.getName());
        return ;
    }
    for (File:file : dir.listFiles()) {
        listAllFiles(file);
    }
}
</code></pre>
<p>从 Java 7 开始，可以使用 Paths 和 Files 代替 File。</p>
<h3 id="三字节操作">三、字节操作</h3>
<h4 id="实现文件复制">实现文件复制</h4>
<pre><code>public static void copuFile(String src, String dist) throws IOException {
    FileInputStream in = new FileInputStream(src);
    FileOutputStream out = new FileOutStream(dist);

    byte[] buffer = new byte[20 * 1024];
    int cnt;
    // read() 最多读 buffer.length 个字节
    // 返回的是实际读取的个数
    // 返回 -1 的时候表示读到 eof,即文件结尾
    while ((cnt = in.read(buffer, 0, buffer.length)) != -1) {
        out.write(buffer, 0, cnt);
    }

    in.close();
    out.close();
}
</code></pre>
<h4 id="装饰者模式">装饰者模式</h4>
<p>Java I/O 使用了装饰者模式来实现。</p>
<p>实例化一个具有缓存功能的字节流对象时，只需要在 FileInputStream 对象上再套一层 BufferedInputStream 对象即可。</p>
<h3 id="七nio">七、NIO</h3>
<p>新的输入/输出（NIO）库是在 JDK1.4中引入的，弥补了原来的 I/O 的不足，提供了高速的、面向块的 I/O。</p>

        
        ]]>
      </description>
    </item>
    
    
    
    <item>
      <title>Java 并发</title>
      <link>/post/2021/01/09/java-%E5%B9%B6%E5%8F%91/</link>
      <pubDate>Sat, 09 Jan 2021 10:50:16 +0800</pubDate>
      <author>罗泽勋</author>
      <guid>/post/2021/01/09/java-%E5%B9%B6%E5%8F%91/</guid>
      <description>
        <![CDATA[
        <h3 id="一使用线程">一、使用线程</h3>
<p>有三种使用线程的方法：</p>
<ul>
<li>实现 Runnable 接口；</li>
<li>实现 Callable接口；</li>
<li>继承 Tread 类；</li>
</ul>
<h4 id="实现-runnable-接口">实现 Runnable 接口</h4>
<p>需要实现接口中的 run() 方法。</p>
<pre><code>public class MyRunnable implements Runnable {
    @Override
    public void run(){
        // ...
    }
}
</code></pre>
<p>使用 Runnable 实例再创建一个 Thread 实例，然后调用 Thread 实例的 start() 方法来启动线程。</p>
<pre><code>public static void main(String[] args){
    MyRunnable instance = new MyRunnable();
    Thread thread = new Thread(instance);
    thread.start();
}
</code></pre>
<h4 id="实现-callable-接口">实现 Callable 接口</h4>
<p>与 Runnable 相比，Callable 可以有返回值，返回值通过 FutureTask 进行封装。</p>
<pre><code>public class MyCallable implements Callable&lt;Integer&gt; {
    public Integer call(){
        return 123;
    }
}
</code></pre>
<pre><code>public static void main(String[] args) throws ExecutionException,InterruptedException {
    MyCallable mc = new MyCallble();
    FutureTask&lt;Integer&gt; ft = new FutureTask&lt;&gt;(mc);
    Thread thread = new Thread(ft);
    thread.start();
    System.out.println(ft.get());
}
</code></pre>
<h3 id="继承-thread-类">继承 Thread 类</h3>
<p>同样也是需要实现 run() 方法，因为 Thread 类也实现了 Runnable 接口。</p>
<p>当调用 start() 方法启动一个线程时，虚拟机会将该线程放入就绪队列中等待被调度，当一个线程被调度时会执行该线程的 run() 方法。</p>
<pre><code>public class MyThread extends Thread {
    public void run() {
        // ...
    }
}
</code></pre>
<pre><code>public static void main(String[] args) {
    MyThread mt = new MyThread();
    mt.start();
}
</code></pre>
<h3 id="实现接口-vs-继承-thread">实现接口 VS 继承 Thread</h3>
<p>实现接口会更好一些，因为：</p>
<ul>
<li>Java 不支持多重继承，可以实现多个接口。</li>
<li>继承整个 Thread 类开销过大。</li>
</ul>
<h3 id="四互斥同步">四、互斥同步</h3>
<p>Java 提供了两种锁机制来控制多个线程对共享资源的互斥访问，第一个是 JVM 实现的 synchronized，而另一个是 JDK 实现的 ReentrantLock。</p>
<h4 id="synchronized">synchronized</h4>
<h5 id="1同步一个代码块">1.同步一个代码块</h5>
<pre><code>public void func() {
    synchronized (this) {
        // ...
    }
}
</code></pre>
<p>它只作用于同一个对象，如果调用两个对象上的同步代码块，就不会进行同步。</p>
<p>对于以下代码，使用 ExecutorService 执行了两个线程，由于调用的是同一个对象的同步代码块，因此这两个线程会进行同步，当一个线程进入同步语句块时，另一个线程就必须等待。</p>
<pre><code>public class SynchronizedExample {

    public void func1() {
        synchronized (this) {
            for (int i = 0; i &lt; 10; i++) {
                System.out.print(i + &quot; &quot;);
            }
        }
    }
}
</code></pre>
<pre><code>public static void main(String[] args) {
    SynchronizedExample e1 = new SynchronizedExample();
    ExecutorService executorService = Executors.newCachedThreadPool();
    executorService.execute(() -&gt; e1.func1());
    executorService.execute(() -&gt; e1.func1());
}
</code></pre>
<pre><code>0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9
</code></pre>
<p>对于以下代码，两个线程调用了不同对象的同步代码块，因此这两个线程就不需要同步。从输出结果可以看出，两个线程交叉执行。</p>
<pre><code>public static void main(String[] args) {
    SynchronizedExample e1 = new SynchronizedExample();
    SynchronizedExample e2 = new SynchronizedExample();
    ExecutorService executorService = Executors.newCachedThreadPool();
    executorService.execute(() -&gt; e1.func1());
    executorService.execute(() -&gt; e2.func1());
}
</code></pre>
<pre><code>0 0 1 1 2 2 3 3 4 4 5 5 6 6 7 7 8 8 9 9
</code></pre>
<h5 id="2同步一个方法">2.同步一个方法</h5>
<pre><code>public synchronized void func() {
    // ...
}
</code></pre>
<p>它和同步代码块一样，作用于同一个对象</p>
<h5 id="3同步一个类">3.同步一个类</h5>
<pre><code>public void func() {
    synchronized (SynchronizedExample.class) {
        // ...
    }
}
</code></pre>
<p>作用于整个类，也就是说两个线程调用同一个类的不同对象上的这种同步语句块，也会进行同步。</p>
<pre><code>public class SynchronizedExample {

    public void func2() {
        synchronized (SynchronizedExample.class) {
            for (int i = 0; i &lt; 10; i++) {
                System.out.print(i + &quot; &quot;);
            }
        }
    }
}
</code></pre>
<pre><code>public static void main(String[] args) {
    SynchronizedExample e1 = new SynchronizedExample();
    SynchronizedExample e2 = new SynchronizedExample();
    ExecutorService executorService = Executors.newCachedThreadPool();
    executorService.execute(() -&gt; e1.func2());
    executorService.execute(() -&gt; e2.func2());
}
</code></pre>
<pre><code>0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9
</code></pre>
<h5 id="4同步一个静态方法">4.同步一个静态方法</h5>
<pre><code>public synchronized static void fun() {
    // ...
}
</code></pre>
<p>作用于整个类。</p>
<h4 id="reentrantlock">ReentrantLock</h4>
<p>ReentrantLock 是 java.util.concurrent（J.U.C)包中的锁。</p>
<pre><code>public class LockExample {

    private Lock lock = new ReentrantLock();

    public void func() {
        lock.lock();
        try {
            for (int i = 0; i &lt; 10; i++) {
                System.out.print(i + &quot; &quot;);
            }
        } finally {
            lock.unlock(); // 确保释放锁，从而避免发生死锁。
        }
    }
}

</code></pre>
<pre><code>public static void main(String[] args) {
    LockExample lockExample = new LockExample();
    ExecutorService executorService = Executors.newCachedThreadPool();
    executorService.execute(() -&gt; lockExample.func());
    executorService.execute(() -&gt; lockExample.func());
}
</code></pre>
<pre><code>0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9
</code></pre>
<h5 id="使用选择">使用选择</h5>
<p>除非需要使用 ReentrantLock 的高级功能，否则优先使用 synchronized。这是因为 synchronized 是 JVM 实现的一种锁机制，JVM 原生地支持它，而 ReentrantLock 不是所有的 JDK 版本都支持。并且使用 synchronized 不用担心没有释放锁而导致死锁问题，因为 JVM 会确保锁的释放。</p>
<h3 id="六线程状态">六、线程状态</h3>
<h4 id="新建">新建</h4>
<h4 id="可运行">可运行</h4>
<h4 id="阻塞">阻塞</h4>
<h4 id="无限期等待">无限期等待</h4>
<h4 id="死亡">死亡</h4>

        
        ]]>
      </description>
    </item>
    
    
    
    <item>
      <title>SQL 语法</title>
      <link>/post/2020/12/31/sql-%E8%AF%AD%E6%B3%95/</link>
      <pubDate>Thu, 31 Dec 2020 10:12:40 +0800</pubDate>
      <author>罗泽勋</author>
      <guid>/post/2020/12/31/sql-%E8%AF%AD%E6%B3%95/</guid>
      <description>
        <![CDATA[
        <ul>
<li><a href="#1">一、基础</a></li>
<li><a href="#2">二、创建表</a></li>
<li><a href="#3">三、修改表</a></li>
<li><a href="#4">四、插入</a></li>
<li><a href="#5">五、更新</a></li>
<li><a href="#6">六、删除</a></li>
<li><a href="#7">七、查询</a>
<ul>
<li><a href="#7.1">DISTINCT</a></li>
<li><a href="#7.2">LIMIT</a></li>
</ul>
</li>
<li><a href="#8">八、排序</a></li>
<li><a href="#9">九、过滤</a></li>
<li><a href="#10">十、通配符</a></li>
<li><a href="#11">十一、计算字段</a></li>
<li><a href="#12">十二、函数</a>
<ul>
<li><a href="#12.1">汇总</a></li>
<li><a href="#12.2">文本处理</a></li>
<li><a href="#12.3">日期和时间处理</a></li>
<li><a href="#12.4">数值处理</a></li>
</ul>
</li>
<li><a href="#13">十三、分组</a></li>
<li><a href="#14">十四、子查询</a></li>
<li><a href="#15">十五、连接</a>
<ul>
<li><a href="#15.1">内连接</a></li>
<li><a href="#15.2">自连接</a></li>
<li><a href="#15.3">自然连接</a></li>
<li><a href="#15.4">外连接</a></li>
</ul>
</li>
<li><a href="#16">十六、组合查询</a></li>
<li><a href="#17">十七、视图</a></li>
<li><a href="#18">十八、存储过程</a></li>
<li><a href="#19">十九、游标</a></li>
<li><a href="#20">二十、触发器</a></li>
<li><a href="#21">二十一、事务管理</a></li>
<li><a href="#22">二十二、字符集</a></li>
<li><a href="#23">二十三、权限管理</a></li>
</ul>
<h3 id="一基础a-name1a">一、基础<a name="1"></a></h3>
<p>模式定义了数据如何存储、存储怎么样的数据以及数据如何分解等信息，数据库和表都有模式。</p>
<p>主键的值不允许修改，也不允许复用（不能将已经删除的主键值赋给新数据行的主键）。</p>
<p>SQL，（Structred Query Language)，标准 SQL 由 ANSI 标准委员会管理，从而被称为 ANSI SQL。各个 DBMS 都有自己的实现，如 PL/SQL、Transact-SQL 等。</p>
<p>SQL 语句不区分大小写，但是数据库表名、列名和值是否区分依赖于具体的 DBMS 以及配置。</p>
<p>SQL 支持以下三种注释：</p>
<pre><code>### 注释
SELECT * FROM mytable; -- 注释
/* 注释1
   注释2 */

</code></pre>
<p>数据库创建与使用：</p>
<pre><code>CREATE DATABASE test;
USE test;
</code></pre>
<h3 id="二创建表a-name2a">二、创建表<a name="2"></a></h3>
<pre><code>CREATE TABLE mytable (
    # int 类型，不为空，自增
    id INT NOT NULL AUTO_INCREMENT,
    # int 类型，不可为空，默认值为1，不为空
    col1 INT NOT NULL DEFAULT 1,
    # 变长字符串类型，最常为 45 个字符，可以为空
    col2 VARCHAR(45) NULL,
    # 日期类型，可为空
    col3 DATE NULL,
    # 设置主健为 id
    PRIMARY KEY (`id`)
);
</code></pre>
<h3 id="三修改表">三、修改表</h3>
<p>添加列</p>
<pre><code>ALTER TABLE mytable
ADD col CHAR(20);
</code></pre>
<p>删除列</p>
<pre><code>ALTER TABLE mytable
DROP COLUMN col;
</code></pre>
<p>删除表</p>
<pre><code>DROP TABLE mytable;
</code></pre>
<h3 id="四插入">四、插入</h3>
<p>普通插入</p>
<pre><code>INSERT INTO mytable(col1, col2)
VALUES(val1,val2);
</code></pre>
<p>插入检索出来的数据</p>
<pre><code>INSERT INTO mytable1(col1, col2)
SELECT col1, col2
FROM mytable2;
</code></pre>
<p>将一个表的内容插入到一个新表</p>
<pre><code>CREATE TABLE newtable AS 
SELECT * FROM mytable;
</code></pre>
<h3 id="五更新">五、更新</h3>
<pre><code>UPDATE mytable
SET col = val 
WHERE id = 1;
</code></pre>
<h3 id="六删除">六、删除</h3>
<pre><code>DELETE FROM mytable
WHERE id = 1;
</code></pre>
<p>TRUNCATE TABLE table 可以清空表，也就是删除所有行。</p>
<pre><code>TRUNCATE TABLE mytable;
</code></pre>
<p>使用更新和删除操作时一定要用 WHERE 字句，不然会把整张表的数据都损坏。用 SELECT 语句进行测试，防止错误删除。</p>
<h3 id="七查询">七、查询</h3>
<p>DISTINCT
相同值只会出现一次。它作用与所有列，也就是说所有列的值都想同时才算相同。</p>
<pre><code>SELECT DISTINCT col1, col2
FROM mytable;
</code></pre>
<p>LIMIT
限制返回的行数。可以有两个参数，第一个参数为起始行，从 0 开始；第二个参数为返回的总行数。<br>
返回前五行：</p>
<pre><code>SELECT * 
FROM mytable
LIMIT 5;
</code></pre>
<pre><code>SELECT *
FROM mytable
LIMIT 0, 5;
</code></pre>
<p>返回第3～5行：</p>
<pre><code>SELECT *
FROM mytable
LIMIT 2, 3;
</code></pre>
<h3 id="八排序">八、排序</h3>
<ul>
<li>ASC：升序（默认）</li>
<li>DESC：降序
可以按多个列进行排序，并且为每个列指定不同的排序方式：</li>
</ul>
<pre><code>SELECT *
FROM mytable
ORDER BY col1 DESC, col2 ASC;
</code></pre>
<h3 id="九过滤">九、过滤</h3>
<p>不进行过滤的数据非常大，导致通过网络传输了多余的数据，从而浪费了网络带宽。因此尽量使用 SQL 语句来过滤不必要的数据，而不是传输所有的数据到客户端中然后由客户端进行过滤。</p>
<pre><code>SELECT * 
FROM mytable
WHERE col IS NULL;
</code></pre>
<p>下表显示了 WHERE 字句可用的操作符。</p>
<table>
<thead>
<tr>
<th>操作符</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>=</td>
<td>等于</td>
</tr>
<tr>
<td>&lt;</td>
<td>小于</td>
</tr>
<tr>
<td>&gt;</td>
<td>大于</td>
</tr>
<tr>
<td>&lt;&gt;!=</td>
<td>不等于</td>
</tr>
<tr>
<td>&lt;=!&gt;</td>
<td>小于等于</td>
</tr>
<tr>
<td>&gt;=!=</td>
<td>大于等于</td>
</tr>
<tr>
<td>BETWEEN</td>
<td>在两个值之间</td>
</tr>
<tr>
<td>IS NULL</td>
<td>为 NULL 值</td>
</tr>
</tbody>
</table>
<p>应该注意到，NULL 和 0、空字符串都不同。</p>
<p>AND 和 OR 用于连接多个过滤条件。优先处理 AND，当一个过滤表达式涉及到多个 AND 和 OR 时，可以使用（）来决定优先级，时的优先级关系更清晰。</p>
<p>IN 操作符用于匹配一组值，其后也可以接一个 SELECT 子句，从而匹配子查询得到的一组值。</p>
<p>NOT 操作符用于否定一个条件。</p>
<h3 id="十通配符">十、通配符</h3>
<p>通配符也是用在过滤语句中，但它只能用于文本字段。</p>
<ul>
<li>% 匹配 &gt;=0 个任意字符；</li>
<li>_ 匹配 ==1 个任意字符；</li>
<li>[] 可以匹配集合内的字符，例如 [ab]将匹配字符 a 或者 b。用脱字符 ^ 可以对其进行否定，也就是不匹配集合内的字符。<br>
使用 LIKE 来进行通配符匹配。</li>
</ul>
<pre><code>SELECT *
FROM mytable
WHERE col LIKE '[^AB]%'; -- 不以 A 和 B 开头的任意文本
</code></pre>
<p>不要滥用通配符，通配符位于开头处匹配会非常慢。</p>

        
        ]]>
      </description>
    </item>
    
    
    
    <item>
      <title>Linux 不同发行版的选择</title>
      <link>/post/2020/12/26/linux-%E4%B8%8D%E5%90%8C%E5%8F%91%E8%A1%8C%E7%89%88%E7%9A%84%E9%80%89%E6%8B%A9/</link>
      <pubDate>Sat, 26 Dec 2020 22:33:13 +0800</pubDate>
      <author>罗泽勋</author>
      <guid>/post/2020/12/26/linux-%E4%B8%8D%E5%90%8C%E5%8F%91%E8%A1%8C%E7%89%88%E7%9A%84%E9%80%89%E6%8B%A9/</guid>
      <description>
        <![CDATA[
        <p>如果你对 Linux 感兴趣但还不了解，想知道 Linux 的不同发行版之间的区别，我的这些经历应该对你有帮助。</p>
<p>我最初使用的是 Ubuntu，它以前经常被推荐为 Linux 入门选择。用了很长一段时间，它给我最大的感受是不稳定和笨重。会经常收到系统内部崩溃的通知，而且另一个问题是装其他显卡驱动时很艰难（做深度学习、玩游戏等等会用到），令我几度崩溃 T_T 。所以，我认为 Ubuntu 对新手非常不友好；</p>
<p>后来我开始尝试 Deepin 系统，这是一款由国内深之度公司推出的发行版，预装软件最符合国人习惯，而且上手简单，系统不需要怎么配置就能拥有漂亮的界面。但是很快我就不能忍受它的软件源的落后。软件获取、维护便捷本该是 Linux 系统的一大优点，它可以为很多工作带来便利。</p>
<p>接着我来到 Arch 的世界。遗憾的是 Arch Linux 我在尝试的中途便放弃了。它确实很棒，从零开始定制操作系统很诱人，但是因为时间关系，我需要的是能快速上手，成为主力的操作系统。</p>
<p>最后，我接触到了很多人推荐的 Manjaro，它是为了让用户更方便使用的 Arch 衍生版。安装之后确实让我很惊喜，它完美符合我对操作系统的需求：上手简单、使用高效、美。而且尝试过后我才知道 Arch 系的软件仓库 AUR 有多强大。AUR 是一个社区维护的软件包仓库，有了它，你可以轻易获取到很多想要的软件。因此我很推荐使用 Manjaro。</p>
<p>（顺便提一下最稳定发行版之一的 CentOS。当我想在服务器上尝试它时，它就被官宣抛弃了……）</p>

        
        ]]>
      </description>
    </item>
    
    
    
    <item>
      <title>Java 虚拟机</title>
      <link>/post/2020/12/25/java-%E8%99%9A%E6%8B%9F%E6%9C%BA/</link>
      <pubDate>Fri, 25 Dec 2020 15:06:19 +0800</pubDate>
      <author>罗泽勋</author>
      <guid>/post/2020/12/25/java-%E8%99%9A%E6%8B%9F%E6%9C%BA/</guid>
      <description>
        <![CDATA[
        <p>参考自 <a href="https://github.com/CyC2018/CS-Notes/blob/master/notes/Java%20%E8%99%9A%E6%8B%9F%E6%9C%BA.md">CyC2018/CS-Notes</a></p>
<ul>
<li><a href="#1">一、运行时数据区域</a>
<ul>
<li><a href="#1.1">程序计数器</a></li>
<li><a href="#1.2">Java 虚拟机栈</a></li>
<li><a href="#1.3">本地方法栈</a></li>
<li><a href="#1.4">堆</a></li>
<li><a href="#1.5">方法区</a></li>
<li><a href="#1.6">运行时常量池</a></li>
<li><a href="#1.7">直接内存</a></li>
</ul>
</li>
<li><a href="#2">二、垃圾收集</a>
<ul>
<li><a href="#2.1">判断一个对象是否可被回收</a></li>
<li><a href="#2.2">引用类型</a></li>
<li><a href="#2.3">垃圾收集算法</a></li>
<li><a href="#2.4">垃圾收集器</a></li>
</ul>
</li>
<li><a href="#3">三、内存分配和回收策略</a>
<ul>
<li><a href="#3.1">Minor Gc 和 Full Gc</a></li>
<li><a href="#3.2">内存分配策略</a></li>
<li><a href="#3.3">Full GC 的触发条件</a></li>
</ul>
</li>
<li><a href="#4">四、类加载机制</a>
<ul>
<li><a href="#4.1">类的生命周期</a></li>
<li><a href="#4.2">类加载过程</a></li>
<li><a href="#4.3">类初始化时机</a></li>
<li><a href="#4.4">类与类加载器</a></li>
<li><a href="#4.5">类加载器分类</a></li>
<li><a href="#4.6">双亲委派模型</a></li>
<li><a href="#4.7">自定义类加载器实现</a></li>
</ul>
</li>
</ul>
<h3 id="一运行时数据区域-a-name1a">一、运行时数据区域 <a name="1"></a></h3>
<h4 id="程序计数器-a-name11a">程序计数器 <a name="1.1"></a></h4>
<p>记录正在执行的虚拟机字节码指令的地址（如果正在执行的是本地方法则为空）。</p>
<h4 id="java-虚拟机栈-a-name12a">Java 虚拟机栈 <a name="1.2"></a></h4>
<p>每个 Java方法在执行的同时会创建一个栈帧用于存储局部变量表、操作数栈、常量池引用等信息。从方法调用直至执行完成的过程，对应着一个栈帧在 Java 虚拟机栈中入栈和出栈的过程。</p>
<p>可以通过 -Xss 这个虚拟机参数来指定每个线程的 Java 虚拟机栈内存大小，在 JDK 1.4 中默认为 256K，而在 JDK1.5+ 默认为 1M：</p>
<pre><code>java -Xss2M HaskTheJava
</code></pre>
<p>该区域可能抛出以下异常：</p>
<ul>
<li>当线程请求的栈深度超过最大值，会抛出 StackOverflowError 异常；</li>
<li>栈进行动态扩展的时如果无法申请到足够的内存，会抛出 OutofMemoryError 异常。</li>
</ul>
<h4 id="本地方法栈a-name13a">本地方法栈<a name="1.3"></a></h4>
<p>本地方法栈与 Java 虚拟机栈类似，他们之间的区别只不过是本地方法栈为本地方法服务。<br>
本地方法一般是用其他语言（C、C++或汇编语言等等）编写的，并且被编译为基于本机硬件和操作系统的程序，对待这些方法需要特别处理。</p>
<h4 id="堆-a-name14a">堆 <a name="1.4"></a></h4>
<p>所有对象都在这里分配内存，是垃圾收集的主要区域（&ldquo;GC堆&rdquo;）。<br>
现代的垃圾收集器基本都是采用分代收集算法，其主要的思想是针对不同类型的对象采用不同的垃圾回收算法。可以将堆分成两块：</p>
<ul>
<li>新生代</li>
<li>老年代</li>
</ul>
<p>堆不需要连续内存，并且可以动态增加其内存，增加失败会抛出 OutOfMemoryError 异常。</p>
<p>可以通过 -Xms 和 -Xmx 这两个虚拟机参数来指定一个程序的堆内存大小，第一个参数设置初始值，第二个参数设置最大值。</p>
<pre><code>java -Xms1M -Xmx2M HackTheJava
</code></pre>
<h4 id="方法区a-name15a">方法区<a name="1.5"></a></h4>
<p>用于存放已被加载的类信息、常量、静态变量、即时编译器编译后的代码等数据。</p>
<p>和堆一样不需要连续的内存，并且可以动态扩展，动态扩展失败一样会抛出 OutOfMemoryError 异常。</p>
<p>对这块区域进行垃圾回收的主要目标是对常量池的回收和对类的卸载，但是一般比较难实现。</p>
<p>HotSpot 虚拟机把它当成永久代来进行垃圾回收。但很难确定永久代的大小，因为它受到很多因素影响，并且每次 Full GC 之后永久代的大小都会改变，所以经常会抛出 OutOfMemoryError 异常。为了更容易管理方法区，从 JDK 1.8 开始，移除永久代，并把方法区移至元空间，它位于本地内存，而不是虚拟机内存。<br>
方法区是一个 JVM 规范，永久代与元空间都是其一种实现方式。在 JDK 1.8 之后，原来永久代的数据被分到了堆和元空间中。元空间存储类的元信息，静态变量和常量池等放入堆中。</p>
<h4 id="运行时常量池a-name16a">运行时常量池<a name="1.6"></a></h4>
<p>运行时常量池是方法区的一部分。</p>
<p>Class 文件中的常量池（编译器生成的字面量和符号引用）会在类加载后被放入这个区域。</p>
<p>除了在编译期生成的常量，还允许动态生成，例如 String 类的 intern()。</p>
<h4 id="直接内存a-name17a">直接内存<a name="1.7"></a></h4>
<p>在 JDK 1.4 中新引入了 NIO 类，它可以使用 Native 函数库直接分配堆外内存。</p>
<h3 id="二垃圾回收a-name2a">二、垃圾回收<a name="2"></a></h3>
<p>垃圾收集主要是针对堆和方法区进行。程序计数器、虚拟机栈和本地方法栈这三个区域属于线程私有的，只存在于线程的生命周期，线程结束之后就会消失，因此不需要对这三个区域进行垃圾回收。</p>
<h4 id="判断一个对象是否可被回收a-name21a">判断一个对象是否可被回收<a name="2.1"></a></h4>
<h5 id="1引用技术算法">1.引用技术算法</h5>
<p>（相互引用时，两个对象都无法被回收）</p>
<h5 id="2可达性分析">2.可达性分析</h5>
<p>以 GC Roots为起始点进行搜索，可达的对象都是存活的，不可达的对象可被回收。
Java 虚拟机使用该算法来判断对象是否可被回收，GC Roots 一般包含以下内容：</p>
<ul>
<li>虚拟机栈中局部变量表中引用的对象</li>
<li>本地方法栈 JNI 中引用的对象</li>
<li>方法区中类静态属性引用的对象</li>
<li>方法区中的常量引用的对象</li>
</ul>
<h5 id="3方法区的回收">3.方法区的回收</h5>
<p>因为方法区主要存放永久代对象，而永久代对象的回收率比新生代低很多，所有在方法区上进行回收性价比不高。</p>
<p>主要是对常量池的回收和对类的卸载。</p>
<h5 id="4finalize">4.finalize()</h5>
<p>类似 C++ 的析构函数，用于关闭外部资源。最好别用，用try-finally等。</p>
<h4 id="引用类型a-name22a">引用类型<a name="2.2"></a></h4>
<h5 id="1强引用">1.强引用</h5>
<p>被强引用关联的对象不会被回收。</p>
<p>使用 new 一个新对象来创建强引用。</p>
<h5 id="2软引用">2.软引用</h5>
<h5 id="3弱引用">3.弱引用</h5>
<h5 id="4虚引用">4.虚引用</h5>
<h4 id="垃圾收集算法a-name23a">垃圾收集算法<a name="2.3"></a></h4>
<h5 id="1标记-清除">1.标记-清除</h5>
<h5 id="2标记-整理">2.标记-整理</h5>
<h5 id="3复制">3.复制</h5>
<h5 id="4分代收集">4.分代收集</h5>
<p>根据对象存活周期将内存划分为几块，不痛块采用适当的收集算法。</p>
<p>一般将堆分为新生代和老生代。</p>
<ul>
<li>新生代使用：复制算法</li>
<li>老生代使用：标记-清除 或者 标记-整理 算法</li>
</ul>
<h3 id="四类加载机制a-name4a">四、类加载机制<a name="4"></a></h3>
<p>类是在运行期间第一次使用时动态加载的，而不是一次性加载所有类。因为如果一次性加载，那么会占用很多的内存。</p>
<h4 id="类的生命周期a-name41a">类的生命周期<a name="4.1"></a></h4>
<p>包括以下阶段：</p>
<ul>
<li>加载</li>
<li>验证</li>
<li>准备</li>
<li>解析</li>
<li>初始化</li>
<li>使用</li>
<li>卸载</li>
</ul>

        
        ]]>
      </description>
    </item>
    
    
    
    <item>
      <title>Java 容器</title>
      <link>/post/2020/12/24/java-%E5%AE%B9%E5%99%A8/</link>
      <pubDate>Thu, 24 Dec 2020 16:47:24 +0800</pubDate>
      <author>罗泽勋</author>
      <guid>/post/2020/12/24/java-%E5%AE%B9%E5%99%A8/</guid>
      <description>
        <![CDATA[
        <p>参考自 <a href="https://github.com/CyC2018/CS-Notes/blob/master/notes/Java%20%E5%AE%B9%E5%99%A8.md">CyC2018/CS-Notes</a></p>
<ul>
<li><a href="#1">一、概览</a>
<ul>
<li><a href="#1.1">Collection</a></li>
<li><a href="#1.2">Map</a></li>
</ul>
</li>
</ul>
<!-- * [二、容器中的设计模式]
    * [迭代器模式](#2.1)
    * [适配器模式](#2.2)
* [三、源码分析](#3)
    * [ArrayList](#3.1)
    * [Vector](#3.2)
    * [CopyOnWriteArrayList](#3.3)
    * [LinkedList](#3.4)
    * [HashMap](#3.5)
    * [ConcurrentHashMap](#3.6)
    * [LinkedHashMap](#3.7)
    * [WeakHashMap](#3.8) -->
<h3 id="一概览-a-name1a">一、概览 <a name="1"></a></h3>
<p>容器主要包括 Collection 和 Map 两种，Collection 存储着对象的集合，而 Map存储着键值对（两个对象）的映射表。</p>
<h4 id="collection-a-name11a">Collection <a name="1.1"></a></h4>
<p><strong>1.Set</strong></p>
<ul>
<li>TreeSet: 基于红黑树实现，支持有序性操作，例如根据一个范围查找元素的操作。但是查找效率不如 HashSet, HashSet 查找的时间复杂度为 O(1)，TreeSet 则为 O(logN)。</li>
<li>HashSet: 基于哈希表的实现，支持快速查找，但不支持有序性操作。并且失去了元素的插入顺序信息，也就是说使用 Iterator 遍历 HashSet 得到的结果是不确定的。</li>
<li>LinkedHashSet: 具有 HashSet 的查找效率，并且内部使用双向链表维护元素的插入顺序。</li>
</ul>
<p><strong>2.List</strong></p>
<ul>
<li>ArrayList： 基于动态数组实现，支持随机访问。</li>
<li>Vector： 和 ArrayList 类似，但它是线程安全的。</li>
<li>LinkedList： 基于双向链表实现，只能顺序访问，但是可以快速地在链表中间插入和删除元素。不仅如此，LinkedList 还可以用做栈、队列和双向队列。</li>
</ul>
<p><strong>3.Queue</strong></p>
<ul>
<li>LinkedList：可以用它来实现双向队列。</li>
<li>PriorityQueue：基于堆结构实现，可以用它来实现优先队列。</li>
</ul>
<h4 id="map-a-name12a">Map <a name="1.2"></a></h4>
<ul>
<li>TreeMap：基于红黑树实现</li>
<li>HashMap：基于哈希表实现</li>
<li>hashTable：和 HashMap 类似，但它是线程安全的，这意味着同一时刻多个线程同时写入 HashTable 不会导致数据不一致。它是遗留类，不应该去使用它，而是使用 ConcurrentHashMap 来支持线程安全，ConcurrentHashMap 的效率会更高，因为 ConcurrentHashMap 引入了分段锁。</li>
<li>LinkedHashMap：使用双向链表来维护元素的顺序，顺序为插入顺序或者最近最少使用（LRU）顺序。</li>
</ul>

        
        ]]>
      </description>
    </item>
    
    
    
    <item>
      <title>String 类真的不可以改变吗？</title>
      <link>/post/2020/12/15/string-%E7%B1%BB%E7%9C%9F%E7%9A%84%E4%B8%8D%E5%8F%AF%E4%BB%A5%E6%94%B9%E5%8F%98%E5%90%97/</link>
      <pubDate>Tue, 15 Dec 2020 15:05:27 +0800</pubDate>
      <author>罗泽勋</author>
      <guid>/post/2020/12/15/string-%E7%B1%BB%E7%9C%9F%E7%9A%84%E4%B8%8D%E5%8F%AF%E4%BB%A5%E6%94%B9%E5%8F%98%E5%90%97/</guid>
      <description>
        <![CDATA[
        <p>对于 java.lang.String 类，我相信很多人印象里都是它不能被改变。通过查看源码，可以知道 String 有一个 final char 数组的变量，这个变量初始化之后便不能重新赋值。虽然这个变量引用的 char 数组的值虽然可以改变，但是String 类中并没有主动修改 这个 char 数组的方法。这就是通常所说 String 类不可变的依据。</p>
<p>然而在学习反射的时候，我产生了一个疑问：我们不可以通过反射修改 String 内部的 char 数组的值吗？答案是可以的，了解 Java 反射的人很容易就做到这点。那为什么还说 String 不可变呢？在思考过后，我得出一个答案：String 的不可变说的是一种约束规范。换句话说，String 的不可变是有好处的。在实际工作中，代码是自己写来用的，没有人会费劲给自己找麻烦，而没有任何益处。</p>
<p>事情到这里就完了？不，最近我再去了解 String 、String Pool（字符串常量池）的时候，又有了一些疑惑，于是亲手操刀给String 来了一次手术。最后也是加深了对 String 的理解，也验证了上面的观点。先上代码（如果你对任一实验结果感到疑惑，没关系，请带着疑惑来看后面的对照实验）：</p>
<pre><code>    //实验1
    String s1 = &quot;1&quot;;
    Field valueField = String.class.getDeclaredField(&quot;value&quot;);
    valueField.setAccessible(true);
    char[] value = (char[]) valueField.get(s1);
    value[0] = '2';
    System.out.println(s1);                 //2
    System.out.println((s1 == &quot;1&quot;));        //true
</code></pre>
<p>上述实验 1 做的事情就是：用 <code>s1 = &quot;1&quot; </code> 的方式创建字符串，用反射修改它的值为 <code>&quot;2&quot;</code>,最后用它与 <code>&quot;1&quot;</code> 比较，结果是 <code>true</code> 。琢磨琢磨，再看下一段代码：</p>
<pre><code>    //实验2
    String s2 = new String(&quot;1&quot;);
    Field valueField = String.class.getDeclaredField(&quot;value&quot;);
    valueField.setAccessible(true);
    char[] value2 = (char[]) valueField.get(s2);
    value2[0] = '2';
    System.out.println(s2);                //2
    System.out.println((s2 == &quot;1&quot;));       //false
</code></pre>
<p>上述实验 2 和实验 1 唯一的区别是字符串创建方式，实验2是通过 <code>new String(&quot;1&quot;)</code> 方式创建，实验1是通过 <code>= &quot;1&quot;</code> 的方式创建。而实验2的结果： <code>s2 == &quot;1&quot;</code> 是 <code>false</code> 。</p>
<p>到这里，可以停一会了。很多技术文章中都做过类似上面的实验（通过比较创建方式的区别、反射修改等)，来分析 String 、String Pool 的原理和设计理念。但我总觉得以此说明最终的结论还不够严谨、或者说还不够直观。接下来请看——魔鬼实验：</p>
<pre><code>    //实验3 
    String s1 = &quot;1&quot;;
    Field valueField = String.class.getDeclaredField(&quot;value&quot;);
    valueField.setAccessible(true);
    char[] value = (char[]) valueField.get(s1);
    value[0] = '2';
    System.out.println(s1);                 //2
    System.out.println((s1 == &quot;1&quot;));        //true
    System.out.println(&quot;1&quot;);                //2
</code></pre>
<p>不难发现，实验3仅仅只是在实验1的基础上输出了 <code>&quot;1&quot;</code> 的值。然而 <code>&quot;1&quot;</code> 输出的值为 2，这样的结果，也许有人会困惑，没关系,看完几个对比实验，相信你会对相关理论（String 、String Pool 等）有了更直观的认识。接下来，请看终极实验：</p>
<pre><code>    //实验4
    String s2 = new String(&quot;1&quot;);
    Field valueField = String.class.getDeclaredField(&quot;value&quot;);
    valueField.setAccessible(true);
    char[] value2 = (char[]) valueField.get(s2);
    value2[0] = '2';
    System.out.println(s2);                 //2
    System.out.println((s2 == &quot;1&quot;));        //false
    System.out.println(&quot;1&quot;);                //2
</code></pre>
<p>同样的，上述实验 4 只是在实验 2 的基础上输出了 <code>&quot;1&quot;</code> 的值。结果 <code>&quot;1&quot;</code> 的值还是 2。</p>
<p><strong>结论：</strong><br>
基于对 String 类和字符串常量池（String Pool） 的了解，我对以上实验作出解释（详细理论下回贴出）:</p>
<p>实验 3 中 字符串 <code>s1</code> 通过直接赋值字符串常量 <code>&quot;1&quot;</code> 的方式创建，因此 <strong><code>s1</code> 会直接引用字符串常量池中 <code>&quot;1&quot;</code> 对应的对象</strong>。对 <code>s1</code> 的修改，也就是对常量池中 <code>&quot;1&quot;</code> 对象的修改，因此 <code>s1</code> 和 <code>&quot;1&quot;</code> 的值都是修改后的 2，而 <code>s1 == &quot;1&quot;</code> 也是 <code>true</code>,因为它们是同一个对象的引用。</p>
<p>实验 4 中 字符串 <code>s2</code> 通过 <code>new String(&quot;1&quot;)</code>的方式创建，因此，<strong><code>s2</code> 会被新建在堆中，并且，<code>s2</code> 的 <code>char</code> 数组变量会直接引用字符串常量池中 &ldquo;1&quot;对象的 <code>char</code> 数组</strong>，也就是说虽然 <code>s2</code> 是新创建的对象，但是 <code>s2</code> 里存储字符的 <code>char</code> 数组是创建时传进来的字符串常量 <code>&quot;1&quot;</code> 的 <code>char</code> 数组。因此，<code>s2</code> 修改 <code>char</code> 数组,<code>&quot;1&quot;</code> 的也会变。<code>s2</code> 和 <code>&quot;1&quot;</code> 的值都是修改后的 2 。而 <code>s2 == &quot;1&quot;</code> 是 <code>false</code> 的，因为它们引用的不是同一个对象。</p>
<p>最终结论，String 类真的是“不可以”变的！因为这不仅仅是它的特点，更是它的设计初衷。（<del>任何想通过反射修改它的人都应该被拉去祭天</del>)</p>
<p>如果你发现任何问题，请<a href="/about">联系</a>我。</p>

        
        ]]>
      </description>
    </item>
    
    
    
    <item>
      <title>Java 基础</title>
      <link>/post/2020/12/15/java-%E5%9F%BA%E7%A1%80/</link>
      <pubDate>Tue, 15 Dec 2020 08:32:26 +0800</pubDate>
      <author>罗泽勋</author>
      <guid>/post/2020/12/15/java-%E5%9F%BA%E7%A1%80/</guid>
      <description>
        <![CDATA[
        <p>参考自 <a href="https://github.com/CyC2018/CS-Notes/blob/master/notes/Java%20%E5%9F%BA%E7%A1%80.md">CyC2018/CS-Notes</a></p>
<ul>
<li><a href="#1">一、数据类型</a>
<ul>
<li><a href="#1.1">基本类型</a></li>
<li><a href="#1.2">包装类型</a></li>
<li><a href="#1.3">缓存池</a></li>
</ul>
</li>
<li><a href="#2">二、String</a>
<ul>
<li><a href="#2.1">概述</a></li>
<li><a href="#2.2">不可变的好处</a></li>
<li><a href="#2.3">String,StringBuffer and StringBuilder</a></li>
<li><a href="#2.4">StringPoll</a></li>
<li><a href="#2.5">new String(&ldquo;abc&rdquo;)</a></li>
</ul>
</li>
<li><a href="#3">三、运算</a>
<ul>
<li><a href="#3.1">参数传递</a></li>
<li><a href="#3.2">float与double</a></li>
<li><a href="#3.3">隐式类型转换</a></li>
<li><a href="#3.4">switch</a></li>
</ul>
</li>
<li><a href="#4">四、关键字</a>
<ul>
<li><a href="#4.1">final</a></li>
<li><a href="#4.2">static</a></li>
</ul>
</li>
<li><a href="#5">五、Object通用方法</a>
<ul>
<li><a href="#5.1">概览</a></li>
<li><a href="#5.2">equals()</a></li>
<li><a href="#5.3">hashCode()</a></li>
<li><a href="#5.4">toString()</a></li>
<li><a href="#5.5">clone()</a></li>
</ul>
</li>
<li><a href="#6">六、继承</a>
<ul>
<li><a href="#6.1">访问权限</a></li>
<li><a href="#6.2">抽象类和接口</a></li>
<li><a href="#6.3">super</a></li>
<li><a href="#6.4">重载和重写</a></li>
</ul>
</li>
<li><a href="#7">七、反射</a></li>
<li><a href="#8">八、异常</a></li>
<li><a href="#9">九、泛型</a></li>
<li><a href="#10">十、注解</a></li>
<li><a href="#11">十一、特性</a></li>
</ul>
<h3 id="一数据类型-a-name1a">一、数据类型 <a name="1"></a></h3>
<h4 id="基本类型-a-name11a">基本类型 <a name="1.1"></a></h4>
<ul>
<li>byte/8</li>
<li>char/16</li>
<li>short/16</li>
<li>int/32</li>
<li>float/32</li>
<li>long/64</li>
<li>double/64</li>
<li>boolean/~</li>
</ul>
<p>boolean 只有两个值：true、flase,可以使用 1 bit 来存储，但是具体大小没有明确规定。JVM 会在编译时期将 boolean 类型的数据转换为 int，使用 1 来表示 true， 0 表示 false。JVM 支持 boolean 数组，但是是通过读写 byte 数组来实现的。</p>
<h4 id="包装类型-a-name12a">包装类型 <a name="1.2"></a></h4>
<p>基本类型都有对应的包装类型，基本类型与其对应的包装类型之间的赋值使用自动装箱和拆箱完成。</p>
<pre><code>Integer x = 2;  //装箱 调用了 Integer.valueOf(2)
int y = x;  //  拆箱 调用了 x.intValue()
</code></pre>
<h4 id="缓存池-a-name13a">缓存池 <a name="1.3"></a></h4>
<p>new Integer(123) 与 Integer.valueOf(123)的区别在于：</p>
<ul>
<li>new Integer(123) 每次都会创建一个对象；</li>
<li>Integer.valueOf(123) 会使用缓存池中的对象，调用会取得同一个对象的引用。</li>
</ul>
<pre><code>Integer x = new Integer(123);
Integer y = new Integer(123);
System.out.println(x == y);     //false
Integer z = Integer.valueOf(123);
Integer k = Integer.valueOf(123);
System.out.println(z == k);     //true
</code></pre>
<p>valueOf() 方法的实现，就是先判断值是否存在缓存池中，如果在的话就直接返回缓存池的内容。</p>
<pre><code>public static Integer valueOf(int i){
    if(i &gt;= IntegerCache.low &amp;&amp; i &lt;= IntegerCache.high){
        return IntegerCache.cache[i + (-IntegerCache.low)];
        return new Integer(i);
    }
}
</code></pre>
<p>在 Java 8 中，Integer 缓存池的大小默认为 -128~127。</p>
<p>编译器会在自动装箱过程中调用 valueOf()方法，因此多个值相同且值在缓存池范围内的 Integer 实例使用自动装箱来创建，那么就会引用相同的对象。</p>
<pre><code>Integer m = 123;
Integer n = 123;
System.out.priintln(m == n);    //true
</code></pre>
<p>基本类型对应的缓冲池如下：</p>
<ul>
<li>boolean values true and false</li>
<li>all byte values</li>
<li>short values between -128 and 127</li>
<li>int values between -128 and 127</li>
<li>char in the range \u0000 to \u007F</li>
</ul>
<p>在使用这些基本类型对应的包装类型时，如果该数值范围在缓冲范围内，就可以直接使用缓冲池中的对象。<br>
在 JDK 1.8 所有的数值类型缓冲池中，Integer 的缓冲池 IntegerCache 很特殊，这个缓冲池的下界是 -128，上界默认是 127，但是这个上界是可以调的，在启动 JVM 的时候，通过 <code>-XX:AutoBoxCacheMax=&lt;size&gt;</code> 来指定 IntegerCache 的大小，该选项在 JVM 初始化的时候会设定一个名为 <code>java.lang.IntegerCache.high</code> 系统属性，然后 IntegerCache 初始化的时候就会读取该系统属性来决定上界。</p>
<h3 id="二string-a-name2a">二、String <a name="2"></a></h3>
<h4 id="概览a-name21a">概览<a name="2.1"></a></h4>
<p>String 被声明为 final,因此不可被继承。(Integer 等包装类也不能被继承)<br>
在 Java 8 中，String 内部使用 char 数组存储数据。</p>
<pre><code>public final class String 
    implements java.io.Serializable, Comparable&lt;String&gt;, CharSequence {
    private final char value[];   
}
</code></pre>
<p>在 Java 9 之后，String 类的实现改用 byte 数组存储字符串，同时使用 <code>coder</code> 来标识使用的编码。</p>
<pre><code>public final class String
    implements java.io.Serializable, Comparable&lt;String&gt;, CharSequence {
        private final byte[] value;
        private final byte coder;
    }
</code></pre>
<p>value 数组被声明为 final，这意味着 value 数组初始化之后就不能在引用其他数组，并且 String 内部没有改变 value 数组的方法。这些表明 String 不能更改的约束规范。实际上可以通过反射来修改 String 内部 value 数组的值，但是这样的做法毫无意义，而且会引发错误。</p>
<h4 id="不可变的好处a-name22a">不可变的好处<a name="2.2"></a></h4>
<p>1.可以缓存 hash 值</p>
<p>因为 String 的 hash 值经常被使用，例如 String 用做 HashMap 的 key。不可变的特性使得 hash 值也不可变，因此只需要进行一次计算。</p>
<p>2.String Pool 的需要</p>
<p>如果一个 String 对象已经被创建过了，那么就会从 String Pool 中取得引用。只有 String 是不可变的，才可能使用 String Pool。</p>
<p>3.安全性</p>
<p>String 经常作为参数，String 不可变性可以保证参数不可变。</p>
<p>4.线程安全</p>
<p>String 不可变性天生具备线程安全，可以在多个线程中安全使用。</p>
<h4 id="stringstringbufferand-stringbuildera-name23a">String,StringBuffer,and StringBuilder<a name="2.3"></a></h4>
<p>1.可变性</p>
<ul>
<li>String 不可变</li>
<li>StringBuffer 和 StringBuilder 可变</li>
</ul>
<p>2.线程安全</p>
<ul>
<li>String 不可变，因此是线程安全的</li>
<li>StringBuilder 不是线程安全的</li>
<li>StringBuffer 是线程安全的，内部使用 synchronized 进行同步</li>
</ul>
<h4 id="string-poola-name24a">String Pool<a name="2.4"></a></h4>
<p>字符串常量池(String Pool) 保存着所有字符串字面量(literal strings) ,这些字面量在编译时期就确定。不仅如此，还可以使用 String 的 intern() 方法在运行过程将字符串添加到 String Pool中。<br>
当一个字符串调用 intern() 方法时，如果 String Pool 中已存在一个字符串和该字符串相等(使用 equals() 方法进行确定)，那么就会返回 String Pool 中字符串的引用；否则，就会在 String Poll 中添加一个新的字符串，并返回这个新字符串的引用。</p>
<pre><code>String s1 = new String(&quot;aaa&quot;);
String s2 = new String(&quot;aaa&quot;);
System.out.println(s1 == s2);    //false
String s3 = s1.intern();
String s4 = s2.intern();
System.out.println(s3 == s4);   //true
</code></pre>
<p>如果是采用 &ldquo;bbb&rdquo; 这种字面量的形式创建字符串，会自动将字符串放入 String Pool 中。</p>
<pre><code>String s5 = &quot;bbb&quot;;
String s6 = &quot;bbb&quot;;
System.out.println(s5 == s6);   //true
</code></pre>
<p>在 Java 7 之前，String Pool被放在运行时常量池中，它属于永久代。而在 Java 7 ，String Pool 被移到堆中。这是因为永久代的空间有限，在大量使用字符串的场景下会导致 OutOfMemoryError 错误。</p>
<h4 id="new-stringabca-name25a">new String(&ldquo;abc&rdquo;)<a name="2.5"></a></h4>
<p>使用这种方式一共会创建两个字符串对象（前提是 String Pool  中还没有 &ldquo;abc&rdquo; 字符串对象）。</p>
<ul>
<li>&ldquo;abc&rdquo; 属于字符串字面量，因此在编译时期会在 String Pool 中创建一个字符串对象，指向这个 &ldquo;abc&rdquo; 字符串字面量。</li>
<li>而使用 new 的方式会在堆中创建一个字符串对象。<br>
创建一个测试类，其 main 方法中使用这种方式来创建字符串对象。</li>
</ul>
<pre><code>    public class NewStringTest {
        public static void main(String[] args){
            String s = new String(&quot;abc&quot;);
        }
    }
</code></pre>
<p>使用 javap -verbose 进行反编译，得到以下内容：</p>
<pre><code>// ...
Constant pool:
// ...
   #2 = Class              #18            // java/lang/String
   #3 = String             #19            // abc
// ...
  #18 = Utf8               java/lang/String
  #19 = Utf8               abc
// ...
  public static void main(java.lang.String[]);
    descriptor: ([Ljava/lang/String;)V
    flags: ACC_PUBLIC, ACC_STATIC
    Code:
      stack=3, locals=2, args_size=1
         0: new           #2                  // class java/lang/String
         3: dup
         4: ldc           #3                  // String abc
         6: invokespecial #4                  // Method java/lang/String.&quot;&lt;init&gt;&quot;:(Ljava/lang/String;)V
         9: astore_1
// ...

</code></pre>
<p>在 Constant Pool 中，#19 存储这字符串字面量 &ldquo;abc&rdquo;, #3 是 String Pool 的字符串对象，它指向 #19 这个字符串字面量。在 main 方法中， 0: 行使用 new #2 在堆中创建一个字符串对象，并且使用 ldc #3 将 String Pool 中的字符串对象作为 String 构造函数的参数。</p>
<p>以下是 String 构造函数的源码，可以看到，在将一个字符串对象作为另一个字符串对象的构造函数参数时，并不会完全复制 value 数组内容，而是都会指向同一个 value 数组。</p>
<pre><code>public String(String original){
    this.value = original.value;
    this.hash = original.hash;
}
</code></pre>
<h3 id="三运算a-name3a">三、运算<a name="3"></a></h3>
<h4 id="参数传递a-name31a">参数传递<a name="3.1"></a></h4>
<p>以下代码中 Dog dog 的dog是一个指针，存储的是对象的地址。在将一个参数传入一个方法时，本质上是将对象的地址以值得方式传递到形参中。</p>
<pre><code>public class Dog {
    
    String name;

    Dog(String name) {
        this.name = name;
    }

    String getName() {
        return this.name;
    }

    String getObjectAddress() {
        return super.toString();
    }
}
</code></pre>
<p>在方法中改变对象的字段值会改变原对象该字段值，因为引用的是同一个对象。</p>
<pre><code>class PassByValueExample {
    public static void main(String[] args) {
        Dog dog = new Dog(&quot;A&quot;);
        func(dog);
        System.out.println(dog.getName());      // B
    }

    private static void func(Dog dog) {
        dog.setName(&quot;B&quot;);
    }
}
</code></pre>
<p>但是在方法中将指针引用了其它对象，那么此时方法里和方法外的两个指针指向了不同的对象，在一个指针改变其所指向对象的内容对另一个指针所指向的对象没有影响。</p>
<pre><code>public class PassByValueExample {
    public static void main(String[] args) {
        Dog dog = new Dog(&quot;A&quot;);
        System.out.println(dog.getObjectAddress()); // Dog@4554617c
        func(dog);
        System.out.println(dog.getObjectAddress()); // Dog@4554617c
        System.out.println(dog.getName());          // A
    }

    private static void func(Dog dog) {
        System.out.println(dog.getObjectAddress()); // Dog@4554617c
        dog = new Dog(&quot;B&quot;);
        System.out.println(dog.getObjectAddress()); // Dog@74a14482
        System.out.println(dog.getName());          // B
    }
}
</code></pre>
<h4 id="float-与-doublea-name32a">float 与 double<a name="3.2"></a></h4>
<p>Java 不能隐式执行向下转型，因为这会使得精度降低。</p>
<p>1.1 字面量属于 double 类型，不能直接将 1.1 直接赋值给 float 变量，因为这是向下转型。</p>
<pre><code>// float f = 1.1;
</code></pre>
<p>1.1f 字面量才是 float 类型。</p>
<pre><code>float f = 1.1f;
</code></pre>
<h4 id="隐式类型转换a-name33a">隐式类型转换<a name="3.3"></a></h4>
<p>因为字面量 1 是 int 类型，它比 short 类型精度要高，因此不能隐式地将 int 类型向下转型为 short 类型。</p>
<pre><code>short s1 = 1;
//s1 = s1 + 1;
</code></pre>
<p>但是使用 += 或者 ++ 运算符会执行隐式类型转换。</p>
<pre><code>s1 += 1;
s1++;
</code></pre>
<p>上面的语句相当于将 s1 + 1 的计算结果进行了向下转型：</p>
<pre><code>s1 = (short)(s1 + 1);
</code></pre>
<h4 id="switcha-name34a">switch<a name="3.4"></a></h4>
<p>从 Java 7 开始，可以在 switch 条件判断语句中使用 String 对象。<br>
switch 不支持 long、float、double，是因为 switch 的设计初衷是对那些只有少数几个值的类型进行等值判断，如果值过于复杂，那么还是用 if 比较合适。</p>
<h3 id="四关键字a-name4a">四、关键字<a name="4"></a></h3>
<h4 id="finala-name41a">final<a name="4.1"></a></h4>
<p>1.<strong>数据</strong></p>
<p>声明数据为常量，可以是编译时的常量，也可以是在运行时被初始化后不能被改变的常量。</p>
<ul>
<li>对于基本类型，final 使数值不变；</li>
<li>对于引用类型，final 使引用不变，也就不能引用其他对象，但是被引用的对象本身是可以修改的。</li>
</ul>
<pre><code>final int x = 1;
//x = 3;    // cannot assign value to final variable 'x'
final A y = new A();
y.a = 1;
</code></pre>
<p>2.<strong>方法</strong></p>
<p>声明方法不能被子类重写。<br>
private 方法隐式地被指定为 final，如果在子类中定义的方法和基类中的一个 private 方法签名相同，此时子类的方法不是重写基类方法，而是在子类中定义了一个新的方法。</p>
<p>3.<strong>类</strong>
声明类不允许被继承。</p>
<h4 id="statica-name42a">static<a name="4.2"></a></h4>
<p>1.<strong>静态变量</strong></p>
<ul>
<li>静态变量： 又被称为类变量，也就是说这个变量属于类的，类所有的实例都共享静态变量，可以直接通过类名来访问它。静态变量在内存中只存在一份。</li>
<li>实例变量： 每创建一个实例就会产生一个实例变量，它与该实例同生共死。</li>
</ul>
<pre><code>public class A {
    private int x;          // 实例变量
    private static int y;   // 静态变量

    public static void main(String[] args) {
        // int x = A.x;     // Non-static field 'x' cannot be referenced from a static context 
        A a = new A();
        int x = a.x;
        int y = A.y;
    }
}
</code></pre>
<p>2.<strong>静态方法</strong></p>
<p>静态方法在类加载的时候就存在了，它不依赖于任何实例。所以静态方法必须有实现，也就是说它不能是抽象方法。</p>
<pre><code>public  abstract class A {
    public static void func1(){}
}
</code></pre>
<p>只能访问所属类的静态字段和静态方法，方法中不能有 this 和 super 关键字，因为这两个关键字与具体对象关联。</p>
<pre><code>public class A {
    private static int x;
    private int y;

    public static void func1(){
        int a = x;
        // int b = y;       // Non-static field 'y' cannot be referenced from a static context
        // int b = this.y;  //'A.this' cannot be referenced from a static context
    }
}
</code></pre>
<p><strong>3.静态语句块</strong><br>
静态语句块在类初始化时运行一次。</p>
<pre><code>public class A {
    static {
        System.out.println(&quot;123&quot;);
    }

    public static void main(String[] args) {
        A a1 = new A();
        A a2 = new A();
    }
}
</code></pre>
<pre><code>123
</code></pre>
<p><strong>4.静态内部类</strong><br>
非静态内部类依赖于外部类的实例，也就是说需要先创建外部类的实例，才能用这个实例去创建非静态内部类。而静态内部类不需要。</p>
<pre><code>public class OuterClass {
    class InnerClass {
    }
    static class StaticInnerClass {
    }
    public static void main(String[] args) {
        //InnerClass innerClass = new InnerClass();     //  'OuterClass.this' cannot be referenced from a static context
        OuterClass  outerClass = new OuterClass();
        InnerClass innerClass = outerClass.new InnerClass();
        StaticInnerClass staticInnerClass = new StaticInnerClass(); 
    }
}
</code></pre>
<p>静态内部类不能访问外部类的非静态的变量和方法。</p>
<p><strong>5.静态导包</strong>
在使用静态变量和方法时不用再指明 ClassName,从而简化代码，但可读性大大降低。</p>
<p><strong>6.初始化顺序</strong><br>
静态变量和静态语句块优先于实例变量和普通语句块，静态变量和静态语句块的初始化顺序取决于它们在代码中的顺序。</p>
<pre><code>public static String staticField = &quot;静态变量&quot;;
</code></pre>
<pre><code>static {
    System.out.println(&quot;静态语句块&quot;);
}
</code></pre>
<pre><code>public String field = &quot;实例变量&quot;;
</code></pre>
<pre><code>{
    System.out.println(&quot;普通语句块&quot;);
}
</code></pre>
<p>最后才是构造函数的初始化。</p>
<pre><code>public InitialOrderTest(){
    System.out.println(&quot;构造函数&quot;);
}
</code></pre>
<p>存在继承的情况下，初始化顺序为：</p>
<ul>
<li>父类（静态变量、静态语句块）</li>
<li>子类（静态变量、静态语句块）</li>
<li>父类（实例变量、普通语句块）</li>
<li>父类（构造函数）</li>
<li>子类（实例变量、普通语句块）</li>
<li>子类（构造函数）</li>
</ul>
<h3 id="五object-通用方法a-name5a">五、Object 通用方法<a name="5"></a></h3>
<h4 id="概述a-name51a">概述<a name="5.1"></a></h4>
<pre><code>public native int hashCode()

public boolean equals(Object obj)

protected native Object clone() throws CloneNotSupportedException

public String toString()

public final native Class&lt;?&gt; getClass()

protected void finalize() throws Throwable

public final native void notify()

public final native void notifyAll()

public final native void wait(long timeout) throws InterruptedException

public final void wait(long timeout, int nanos) throws InterruptedException

public final void wait() throws InterruptedException

</code></pre>
<h4 id="equalsa-name52a">equals()<a name="5.2"></a></h4>
<p><strong>1.等价关系</strong><br>
两个对象具有等价关系，需要满足以下五个条件：自反性、对称性、传递性、一致性、与 null 的比较（对任何不是 null 的对象 x 调用 x.equals(null) 结果都为flase)</p>
<p><strong>2.等价于相等</strong></p>
<ul>
<li>对于基本类型，== 判断两个值是否相等，基本类型没有 equals() 方法。</li>
<li>对于引用类型，== 判断两个变量是否引用同一个对象，而 equals() 判断引用的对象是否等价。</li>
</ul>
<pre><code>Integer x = new Integer(1);
Integer y = new Integer(1);
System.out.println(x.equals(y));    // true
System.out.println(x == y);         // false
</code></pre>
<p><strong>3.实现</strong></p>
<ul>
<li>检查是否为同一个对象的引用，如果是直接返回 true；</li>
<li>检查是否是同一个类型，如果不是，直接返回 false；</li>
<li>将 Object 对象进行转型；</li>
<li>判断每个关键域是否相等</li>
</ul>
<pre><code>public class EqualExample {
    private int x;
    private int y;
    private int z;

    public EqualExample(int x, int y, int z){
        this.x = x;
        this.y = y;
        this.z = z;
    }

    @Override
    public boolean equals(Object o){
        if(this == o) return true;
        if(o == null || getClass() != o.getClass()) return false;

        EqualExample that = (EqualExample) o;
        
        if(x != that.x) return false;
        if(y != that.y) return false;
        return z == that.z;
    }
}
</code></pre>
<h4 id="hashcodea-name53a">hashCode()<a name="5.3"></a></h4>
<p>hashCode() 返回哈希值，而 equals() 是用来判断两个对象是否等价。等价的两个对象散列值一定相同，但是散列值相同的两个对象不一定等价，这是因为计算哈希值具有随机性，两个值不同的对象可能计算出相同的哈希值。<br>
在覆盖 equals() 方法时应当总是覆盖 hashCode() 方法，保证等价的两个对象哈希值也相等。<br>
HashSet 和 HashMap 等集合类使用了 hashCode() 方法来计算对象应该存储的位置，因此要将对象添加到这些集合类中，需要让对应的类实现 hashCode() 方法。<br>
下面的代码中，新建了两个等价的对象，并将它们添加到 HashSet 中，我们希望将两个对象当成一样的，只在集合中添加一个对象。但是 EqualExample 没有实现 hashCode() 方法，因此两个对象的哈希值是不同的，最终导致集合添加了两个等价的对象。</p>
<pre><code>EqualExample e1 = new EqualExample(1,1,1);
EqualExample e2 = new EqualExample(1,1,1);
System.out.println(eq.equal(e2));   // true
HashSet&lt;EqualExample&gt; set  = new HashSet&lt;&gt;();
set.add(e1);
set.add(e2);
System.out.println(set.size());     // 2
</code></pre>
<p>理想的哈希函数应当具有均匀性 ，即不相等的对象应当均匀分布到所有可能的哈希值上。这就要求了哈希函数要把所有域的值都考虑进来。可以将每个域都当成 R 进制的某一位，然后组成一个 R 进制的整数。</p>
<p>R 一般取 31，它是一个奇素数。</p>
<h4 id="tostringa-name54a">toString()<a name="5.4"></a></h4>
<p>默认返回 类名@十六进制数 这种形式，其中 @ 后面的数值为散列码的无符号十六进制表示。</p>
<h4 id="clonea-name55a">clone()<a name="5.5"></a></h4>
<h5 id="1cloneable">1.cloneable</h5>
<p>clone() 是 Object 的 protected 方法，它不是 public，一个类不显式去重写 clone()，其他类就不能直接去调用该类实例的 clone() 方法。</p>
<h5 id="2浅拷贝">2.浅拷贝</h5>
<p>拷贝对象和原始对象的引用类型引用同一个对象。</p>
<h5 id="3深拷贝">3.深拷贝</h5>
<p>拷贝对象和原始对象的引用类型引用不同的对象。</p>
<h5 id="4clone的替代方案">4.clone的替代方案</h5>
<p>使用 clone() 方法既复杂又有风险，最好别用，使用拷贝构造函数或拷贝工厂来拷贝一个对象。</p>
<h3 id="六继承-a-name6a">六、继承 <a name="6"></a></h3>
<h4 id="访问权限-a-name61a">访问权限 <a name="6.1"></a></h4>
<p>Java 中有三个访问权限修饰符：private、protected 以及 public，如果不加访问修饰符，表示包级可见。</p>
<h4 id="抽象类与接口-a-name62a">抽象类与接口 <a name="6.2"></a></h4>
<h5 id="1抽象类">1.抽象类</h5>
<p>抽象类和抽象方法都使用 abstract 关键字进行声明。如果一个类中包含抽象方法，那么该类必须声明为抽象类。</p>
<p>抽象类不能被实例化，只能被继承。</p>
<h5 id="2接口">2.接口</h5>
<p>接口是抽象类的延伸，在 Java 8 之前，它可以看成是一个完全抽象的类，也就是说它不能有任何的方法实现。</p>
<p>从 Java 8开始，接口也可以拥有默认的方法实现，这是因为不支持默认方法的接口的维护成本太高了。</p>
<p>接口的成员（字段+方法）默认都是 public的，并且不允许定义为 private 或 protected。从 Java 9 开始，允许将方法定义为 private，这样就能定义某些复用的代码又不会把方法暴露出去。</p>
<p>接口的字段默认都是 static 和 final 的。</p>
<h5 id="3抽象类与接口比较">3.抽象类与接口比较</h5>
<ul>
<li>从设计层面上看，抽象类提供一种 IS-A 关系，而接口更像一种 LIKE-A 关系。</li>
<li>从使用上看，一个类可以实现多个接口，但是不能继承多个抽象类。</li>
<li>接口的字段只能是 static 和 final 类型的，而抽象类的字段没有这种限制。</li>
<li>接口的成员只能是 public 的，而抽象类的成员可以有多种访问权限。</li>
</ul>
<p>在很多情况下，接口优先于抽象类。因为接口没有抽象类严格的类层次结构要求，可以灵活地为一个类添加行为。并且从 Java 8 开始，接口也可以有默认的方法实现，使得接口的成本也变得很低。</p>
<h4 id="supera-name63a">super<a name="6.3"></a></h4>
<ul>
<li>访问父类的构造函数。super()。</li>
<li>访问父类的成员。</li>
</ul>
<h4 id="重写与重载-a-name64a">重写与重载 <a name="6.4"></a></h4>
<h5 id="1重写">1.重写</h5>
<p>存在于继承体系中，指子类实现了一个与父类在方法声明上完全相同的一个方法。</p>
<h5 id="2重载">2.重载</h5>
<p>存在于一个类中，指一个方法与已经存在的方法名称上相同，但是参数类型、个数、顺序至少有一个不同。</p>
<p>应该注意的是，返回值不同，其他都相同不算是重载。</p>
<h3 id="七反射a-name7a">七、反射<a name="7"></a></h3>
<p>每个类都有一个 Class 对象，包含了与类有关的信息。当编译一个新类时，会产生一个同名的 .class 文件，该文件内容保存着 Class 对象。</p>
<p>类加载相当于 Class 对象的加载，类在第一次使用时才动态加载到 JVM 中。也可以使用 Class.forname(&ldquo;com.mysql.jdbc.Driver&rdquo;) 这种方式来控制类的加载，该方法会返回一个 Class 对象。</p>
<p>反射可以提供运行时的类信息，并且这个类可以在运行时才加载进来，甚至在编译时期该类的.class不存在也可以加载进来。</p>
<p>反射的优点：</p>
<ul>
<li>可扩展性</li>
<li>可视化开发环境： 如IDE,从反射中可用的类型信息中受益，帮助程序员编写正确的代码。</li>
<li>调试器和测试工具</li>
</ul>
<p>反射的缺点：</p>
<ul>
<li>性能开销</li>
<li>安全限制</li>
<li>内部暴露</li>
</ul>
<h3 id="八异常a-name8a">八、异常<a name="8"></a></h3>
<h3 id="九泛型a-name9a">九、泛型<a name="9"></a></h3>
<h3 id="十注解a-name10a">十、注解<a name="10"></a></h3>
<h3 id="十一特性a-name11a">十一、特性<a name="11"></a></h3>

        
        ]]>
      </description>
    </item>
    
    
  </channel>
</rss>
